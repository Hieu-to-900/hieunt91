
Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1a4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800b260  0800b260  0001b260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b810  0800b810  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b810  0800b810  0001b810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b818  0800b818  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b818  0800b818  0001b818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b81c  0800b81c  0001b81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  2000007c  0800b89c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  0800b89c  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0e4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ef7  00000000  00000000  0002c188  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  0002e080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa0  00000000  00000000  0002ec18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018567  00000000  00000000  0002f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a26d  00000000  00000000  00047c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009bbf6  00000000  00000000  00051e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eda82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd4  00000000  00000000  000edb00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000007c 	.word	0x2000007c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b248 	.word	0x0800b248

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000080 	.word	0x20000080
 8000100:	0800b248 	.word	0x0800b248

08000104 <__gnu_thumb1_case_uhi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5a09      	ldrh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c08      	adds	r0, r1, #0
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 fc4f 	bl	8000cb0 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 fbd1 	bl	8000bc4 <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fc41 	bl	8000cb0 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fc37 	bl	8000cb0 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fbdf 	bl	8000c14 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fbd5 	bl	8000c14 <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_uldivmod>:
 8000478:	2b00      	cmp	r3, #0
 800047a:	d111      	bne.n	80004a0 <__aeabi_uldivmod+0x28>
 800047c:	2a00      	cmp	r2, #0
 800047e:	d10f      	bne.n	80004a0 <__aeabi_uldivmod+0x28>
 8000480:	2900      	cmp	r1, #0
 8000482:	d100      	bne.n	8000486 <__aeabi_uldivmod+0xe>
 8000484:	2800      	cmp	r0, #0
 8000486:	d002      	beq.n	800048e <__aeabi_uldivmod+0x16>
 8000488:	2100      	movs	r1, #0
 800048a:	43c9      	mvns	r1, r1
 800048c:	1c08      	adds	r0, r1, #0
 800048e:	b407      	push	{r0, r1, r2}
 8000490:	4802      	ldr	r0, [pc, #8]	; (800049c <__aeabi_uldivmod+0x24>)
 8000492:	a102      	add	r1, pc, #8	; (adr r1, 800049c <__aeabi_uldivmod+0x24>)
 8000494:	1840      	adds	r0, r0, r1
 8000496:	9002      	str	r0, [sp, #8]
 8000498:	bd03      	pop	{r0, r1, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	ffffff65 	.word	0xffffff65
 80004a0:	b403      	push	{r0, r1}
 80004a2:	4668      	mov	r0, sp
 80004a4:	b501      	push	{r0, lr}
 80004a6:	9802      	ldr	r0, [sp, #8]
 80004a8:	f000 f81e 	bl	80004e8 <__udivmoddi4>
 80004ac:	9b01      	ldr	r3, [sp, #4]
 80004ae:	469e      	mov	lr, r3
 80004b0:	b002      	add	sp, #8
 80004b2:	bc0c      	pop	{r2, r3}
 80004b4:	4770      	bx	lr
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_f2uiz>:
 80004b8:	219e      	movs	r1, #158	; 0x9e
 80004ba:	b510      	push	{r4, lr}
 80004bc:	05c9      	lsls	r1, r1, #23
 80004be:	1c04      	adds	r4, r0, #0
 80004c0:	f7ff ffd0 	bl	8000464 <__aeabi_fcmpge>
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d103      	bne.n	80004d0 <__aeabi_f2uiz+0x18>
 80004c8:	1c20      	adds	r0, r4, #0
 80004ca:	f000 ff4d 	bl	8001368 <__aeabi_f2iz>
 80004ce:	bd10      	pop	{r4, pc}
 80004d0:	219e      	movs	r1, #158	; 0x9e
 80004d2:	1c20      	adds	r0, r4, #0
 80004d4:	05c9      	lsls	r1, r1, #23
 80004d6:	f000 fd6d 	bl	8000fb4 <__aeabi_fsub>
 80004da:	f000 ff45 	bl	8001368 <__aeabi_f2iz>
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	061b      	lsls	r3, r3, #24
 80004e2:	469c      	mov	ip, r3
 80004e4:	4460      	add	r0, ip
 80004e6:	e7f2      	b.n	80004ce <__aeabi_f2uiz+0x16>

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	464f      	mov	r7, r9
 80004ec:	4646      	mov	r6, r8
 80004ee:	46d6      	mov	lr, sl
 80004f0:	b5c0      	push	{r6, r7, lr}
 80004f2:	0004      	movs	r4, r0
 80004f4:	b082      	sub	sp, #8
 80004f6:	000d      	movs	r5, r1
 80004f8:	4691      	mov	r9, r2
 80004fa:	4698      	mov	r8, r3
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d82f      	bhi.n	8000560 <__udivmoddi4+0x78>
 8000500:	d02c      	beq.n	800055c <__udivmoddi4+0x74>
 8000502:	4641      	mov	r1, r8
 8000504:	4648      	mov	r0, r9
 8000506:	f002 fd15 	bl	8002f34 <__clzdi2>
 800050a:	0029      	movs	r1, r5
 800050c:	0006      	movs	r6, r0
 800050e:	0020      	movs	r0, r4
 8000510:	f002 fd10 	bl	8002f34 <__clzdi2>
 8000514:	1a33      	subs	r3, r6, r0
 8000516:	469c      	mov	ip, r3
 8000518:	3b20      	subs	r3, #32
 800051a:	469a      	mov	sl, r3
 800051c:	d500      	bpl.n	8000520 <__udivmoddi4+0x38>
 800051e:	e076      	b.n	800060e <__udivmoddi4+0x126>
 8000520:	464b      	mov	r3, r9
 8000522:	4652      	mov	r2, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001f      	movs	r7, r3
 8000528:	464b      	mov	r3, r9
 800052a:	4662      	mov	r2, ip
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d828      	bhi.n	8000586 <__udivmoddi4+0x9e>
 8000534:	d025      	beq.n	8000582 <__udivmoddi4+0x9a>
 8000536:	4653      	mov	r3, sl
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5a>
 8000540:	e07b      	b.n	800063a <__udivmoddi4+0x152>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	4652      	mov	r2, sl
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4662      	mov	r2, ip
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e018      	b.n	800058e <__udivmoddi4+0xa6>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9d0      	bls.n	8000502 <__udivmoddi4+0x1a>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8a>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b002      	add	sp, #8
 8000578:	bc1c      	pop	{r2, r3, r4}
 800057a:	4690      	mov	r8, r2
 800057c:	4699      	mov	r9, r3
 800057e:	46a2      	mov	sl, r4
 8000580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000582:	42a3      	cmp	r3, r4
 8000584:	d9d7      	bls.n	8000536 <__udivmoddi4+0x4e>
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	9200      	str	r2, [sp, #0]
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	4663      	mov	r3, ip
 8000590:	2b00      	cmp	r3, #0
 8000592:	d0e9      	beq.n	8000568 <__udivmoddi4+0x80>
 8000594:	07fb      	lsls	r3, r7, #31
 8000596:	4698      	mov	r8, r3
 8000598:	4641      	mov	r1, r8
 800059a:	0872      	lsrs	r2, r6, #1
 800059c:	430a      	orrs	r2, r1
 800059e:	087b      	lsrs	r3, r7, #1
 80005a0:	4666      	mov	r6, ip
 80005a2:	e00e      	b.n	80005c2 <__udivmoddi4+0xda>
 80005a4:	42ab      	cmp	r3, r5
 80005a6:	d101      	bne.n	80005ac <__udivmoddi4+0xc4>
 80005a8:	42a2      	cmp	r2, r4
 80005aa:	d80c      	bhi.n	80005c6 <__udivmoddi4+0xde>
 80005ac:	1aa4      	subs	r4, r4, r2
 80005ae:	419d      	sbcs	r5, r3
 80005b0:	2001      	movs	r0, #1
 80005b2:	1924      	adds	r4, r4, r4
 80005b4:	416d      	adcs	r5, r5
 80005b6:	2100      	movs	r1, #0
 80005b8:	3e01      	subs	r6, #1
 80005ba:	1824      	adds	r4, r4, r0
 80005bc:	414d      	adcs	r5, r1
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d006      	beq.n	80005d0 <__udivmoddi4+0xe8>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d9ee      	bls.n	80005a4 <__udivmoddi4+0xbc>
 80005c6:	3e01      	subs	r6, #1
 80005c8:	1924      	adds	r4, r4, r4
 80005ca:	416d      	adcs	r5, r5
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d1f8      	bne.n	80005c2 <__udivmoddi4+0xda>
 80005d0:	9800      	ldr	r0, [sp, #0]
 80005d2:	9901      	ldr	r1, [sp, #4]
 80005d4:	4653      	mov	r3, sl
 80005d6:	1900      	adds	r0, r0, r4
 80005d8:	4169      	adcs	r1, r5
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db23      	blt.n	8000626 <__udivmoddi4+0x13e>
 80005de:	002b      	movs	r3, r5
 80005e0:	4652      	mov	r2, sl
 80005e2:	40d3      	lsrs	r3, r2
 80005e4:	002a      	movs	r2, r5
 80005e6:	4664      	mov	r4, ip
 80005e8:	40e2      	lsrs	r2, r4
 80005ea:	001c      	movs	r4, r3
 80005ec:	4653      	mov	r3, sl
 80005ee:	0015      	movs	r5, r2
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db2d      	blt.n	8000650 <__udivmoddi4+0x168>
 80005f4:	0026      	movs	r6, r4
 80005f6:	4657      	mov	r7, sl
 80005f8:	40be      	lsls	r6, r7
 80005fa:	0033      	movs	r3, r6
 80005fc:	0026      	movs	r6, r4
 80005fe:	4667      	mov	r7, ip
 8000600:	40be      	lsls	r6, r7
 8000602:	0032      	movs	r2, r6
 8000604:	1a80      	subs	r0, r0, r2
 8000606:	4199      	sbcs	r1, r3
 8000608:	9000      	str	r0, [sp, #0]
 800060a:	9101      	str	r1, [sp, #4]
 800060c:	e7ac      	b.n	8000568 <__udivmoddi4+0x80>
 800060e:	4662      	mov	r2, ip
 8000610:	2320      	movs	r3, #32
 8000612:	1a9b      	subs	r3, r3, r2
 8000614:	464a      	mov	r2, r9
 8000616:	40da      	lsrs	r2, r3
 8000618:	4661      	mov	r1, ip
 800061a:	0013      	movs	r3, r2
 800061c:	4642      	mov	r2, r8
 800061e:	408a      	lsls	r2, r1
 8000620:	0017      	movs	r7, r2
 8000622:	431f      	orrs	r7, r3
 8000624:	e780      	b.n	8000528 <__udivmoddi4+0x40>
 8000626:	4662      	mov	r2, ip
 8000628:	2320      	movs	r3, #32
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	002a      	movs	r2, r5
 800062e:	4666      	mov	r6, ip
 8000630:	409a      	lsls	r2, r3
 8000632:	0023      	movs	r3, r4
 8000634:	40f3      	lsrs	r3, r6
 8000636:	4313      	orrs	r3, r2
 8000638:	e7d4      	b.n	80005e4 <__udivmoddi4+0xfc>
 800063a:	4662      	mov	r2, ip
 800063c:	2320      	movs	r3, #32
 800063e:	2100      	movs	r1, #0
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	2200      	movs	r2, #0
 8000644:	9100      	str	r1, [sp, #0]
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	2201      	movs	r2, #1
 800064a:	40da      	lsrs	r2, r3
 800064c:	9201      	str	r2, [sp, #4]
 800064e:	e780      	b.n	8000552 <__udivmoddi4+0x6a>
 8000650:	2320      	movs	r3, #32
 8000652:	4662      	mov	r2, ip
 8000654:	0026      	movs	r6, r4
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	40de      	lsrs	r6, r3
 800065a:	002f      	movs	r7, r5
 800065c:	46b0      	mov	r8, r6
 800065e:	4666      	mov	r6, ip
 8000660:	40b7      	lsls	r7, r6
 8000662:	4646      	mov	r6, r8
 8000664:	003b      	movs	r3, r7
 8000666:	4333      	orrs	r3, r6
 8000668:	e7c8      	b.n	80005fc <__udivmoddi4+0x114>
 800066a:	46c0      	nop			; (mov r8, r8)

0800066c <__aeabi_fadd>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	4647      	mov	r7, r8
 8000670:	46ce      	mov	lr, r9
 8000672:	0243      	lsls	r3, r0, #9
 8000674:	0a5b      	lsrs	r3, r3, #9
 8000676:	0044      	lsls	r4, r0, #1
 8000678:	0fc2      	lsrs	r2, r0, #31
 800067a:	469c      	mov	ip, r3
 800067c:	0048      	lsls	r0, r1, #1
 800067e:	00dd      	lsls	r5, r3, #3
 8000680:	024b      	lsls	r3, r1, #9
 8000682:	0e24      	lsrs	r4, r4, #24
 8000684:	0a5b      	lsrs	r3, r3, #9
 8000686:	0e00      	lsrs	r0, r0, #24
 8000688:	b580      	push	{r7, lr}
 800068a:	4698      	mov	r8, r3
 800068c:	0026      	movs	r6, r4
 800068e:	4691      	mov	r9, r2
 8000690:	0fc9      	lsrs	r1, r1, #31
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	1a27      	subs	r7, r4, r0
 8000696:	428a      	cmp	r2, r1
 8000698:	d029      	beq.n	80006ee <__aeabi_fadd+0x82>
 800069a:	2f00      	cmp	r7, #0
 800069c:	dd15      	ble.n	80006ca <__aeabi_fadd+0x5e>
 800069e:	2800      	cmp	r0, #0
 80006a0:	d14a      	bne.n	8000738 <__aeabi_fadd+0xcc>
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d000      	beq.n	80006a8 <__aeabi_fadd+0x3c>
 80006a6:	e095      	b.n	80007d4 <__aeabi_fadd+0x168>
 80006a8:	08ed      	lsrs	r5, r5, #3
 80006aa:	2cff      	cmp	r4, #255	; 0xff
 80006ac:	d100      	bne.n	80006b0 <__aeabi_fadd+0x44>
 80006ae:	e088      	b.n	80007c2 <__aeabi_fadd+0x156>
 80006b0:	026b      	lsls	r3, r5, #9
 80006b2:	0a5b      	lsrs	r3, r3, #9
 80006b4:	b2e6      	uxtb	r6, r4
 80006b6:	025b      	lsls	r3, r3, #9
 80006b8:	05f6      	lsls	r6, r6, #23
 80006ba:	0a58      	lsrs	r0, r3, #9
 80006bc:	4330      	orrs	r0, r6
 80006be:	07d2      	lsls	r2, r2, #31
 80006c0:	4310      	orrs	r0, r2
 80006c2:	bc0c      	pop	{r2, r3}
 80006c4:	4690      	mov	r8, r2
 80006c6:	4699      	mov	r9, r3
 80006c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006ca:	2f00      	cmp	r7, #0
 80006cc:	d000      	beq.n	80006d0 <__aeabi_fadd+0x64>
 80006ce:	e087      	b.n	80007e0 <__aeabi_fadd+0x174>
 80006d0:	1c60      	adds	r0, r4, #1
 80006d2:	b2c0      	uxtb	r0, r0
 80006d4:	2801      	cmp	r0, #1
 80006d6:	dc00      	bgt.n	80006da <__aeabi_fadd+0x6e>
 80006d8:	e0b6      	b.n	8000848 <__aeabi_fadd+0x1dc>
 80006da:	1aee      	subs	r6, r5, r3
 80006dc:	0172      	lsls	r2, r6, #5
 80006de:	d500      	bpl.n	80006e2 <__aeabi_fadd+0x76>
 80006e0:	e0c5      	b.n	800086e <__aeabi_fadd+0x202>
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d13d      	bne.n	8000762 <__aeabi_fadd+0xf6>
 80006e6:	2200      	movs	r2, #0
 80006e8:	2600      	movs	r6, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	e7e3      	b.n	80006b6 <__aeabi_fadd+0x4a>
 80006ee:	2f00      	cmp	r7, #0
 80006f0:	dc00      	bgt.n	80006f4 <__aeabi_fadd+0x88>
 80006f2:	e096      	b.n	8000822 <__aeabi_fadd+0x1b6>
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d05d      	beq.n	80007b4 <__aeabi_fadd+0x148>
 80006f8:	2cff      	cmp	r4, #255	; 0xff
 80006fa:	d060      	beq.n	80007be <__aeabi_fadd+0x152>
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	04d2      	lsls	r2, r2, #19
 8000700:	4313      	orrs	r3, r2
 8000702:	2f1b      	cmp	r7, #27
 8000704:	dd00      	ble.n	8000708 <__aeabi_fadd+0x9c>
 8000706:	e0ec      	b.n	80008e2 <__aeabi_fadd+0x276>
 8000708:	2220      	movs	r2, #32
 800070a:	1bd2      	subs	r2, r2, r7
 800070c:	0018      	movs	r0, r3
 800070e:	4093      	lsls	r3, r2
 8000710:	40f8      	lsrs	r0, r7
 8000712:	1e5a      	subs	r2, r3, #1
 8000714:	4193      	sbcs	r3, r2
 8000716:	4303      	orrs	r3, r0
 8000718:	18ed      	adds	r5, r5, r3
 800071a:	016b      	lsls	r3, r5, #5
 800071c:	d57b      	bpl.n	8000816 <__aeabi_fadd+0x1aa>
 800071e:	3401      	adds	r4, #1
 8000720:	2cff      	cmp	r4, #255	; 0xff
 8000722:	d100      	bne.n	8000726 <__aeabi_fadd+0xba>
 8000724:	e0b7      	b.n	8000896 <__aeabi_fadd+0x22a>
 8000726:	2201      	movs	r2, #1
 8000728:	2607      	movs	r6, #7
 800072a:	402a      	ands	r2, r5
 800072c:	086b      	lsrs	r3, r5, #1
 800072e:	4d9a      	ldr	r5, [pc, #616]	; (8000998 <__aeabi_fadd+0x32c>)
 8000730:	401d      	ands	r5, r3
 8000732:	4315      	orrs	r5, r2
 8000734:	402e      	ands	r6, r5
 8000736:	e029      	b.n	800078c <__aeabi_fadd+0x120>
 8000738:	2cff      	cmp	r4, #255	; 0xff
 800073a:	d0b5      	beq.n	80006a8 <__aeabi_fadd+0x3c>
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	04d2      	lsls	r2, r2, #19
 8000740:	4313      	orrs	r3, r2
 8000742:	2f1b      	cmp	r7, #27
 8000744:	dd00      	ble.n	8000748 <__aeabi_fadd+0xdc>
 8000746:	e0b2      	b.n	80008ae <__aeabi_fadd+0x242>
 8000748:	2220      	movs	r2, #32
 800074a:	1bd2      	subs	r2, r2, r7
 800074c:	0019      	movs	r1, r3
 800074e:	4093      	lsls	r3, r2
 8000750:	40f9      	lsrs	r1, r7
 8000752:	1e5a      	subs	r2, r3, #1
 8000754:	4193      	sbcs	r3, r2
 8000756:	430b      	orrs	r3, r1
 8000758:	1aed      	subs	r5, r5, r3
 800075a:	016b      	lsls	r3, r5, #5
 800075c:	d55b      	bpl.n	8000816 <__aeabi_fadd+0x1aa>
 800075e:	01ad      	lsls	r5, r5, #6
 8000760:	09ae      	lsrs	r6, r5, #6
 8000762:	0030      	movs	r0, r6
 8000764:	f002 fbc8 	bl	8002ef8 <__clzsi2>
 8000768:	3805      	subs	r0, #5
 800076a:	4086      	lsls	r6, r0
 800076c:	4284      	cmp	r4, r0
 800076e:	dc65      	bgt.n	800083c <__aeabi_fadd+0x1d0>
 8000770:	1b04      	subs	r4, r0, r4
 8000772:	0033      	movs	r3, r6
 8000774:	2020      	movs	r0, #32
 8000776:	3401      	adds	r4, #1
 8000778:	40e3      	lsrs	r3, r4
 800077a:	1b04      	subs	r4, r0, r4
 800077c:	40a6      	lsls	r6, r4
 800077e:	1e75      	subs	r5, r6, #1
 8000780:	41ae      	sbcs	r6, r5
 8000782:	4333      	orrs	r3, r6
 8000784:	2607      	movs	r6, #7
 8000786:	001d      	movs	r5, r3
 8000788:	2400      	movs	r4, #0
 800078a:	401e      	ands	r6, r3
 800078c:	2201      	movs	r2, #1
 800078e:	464b      	mov	r3, r9
 8000790:	401a      	ands	r2, r3
 8000792:	2e00      	cmp	r6, #0
 8000794:	d004      	beq.n	80007a0 <__aeabi_fadd+0x134>
 8000796:	230f      	movs	r3, #15
 8000798:	402b      	ands	r3, r5
 800079a:	2b04      	cmp	r3, #4
 800079c:	d000      	beq.n	80007a0 <__aeabi_fadd+0x134>
 800079e:	3504      	adds	r5, #4
 80007a0:	016b      	lsls	r3, r5, #5
 80007a2:	d400      	bmi.n	80007a6 <__aeabi_fadd+0x13a>
 80007a4:	e780      	b.n	80006a8 <__aeabi_fadd+0x3c>
 80007a6:	3401      	adds	r4, #1
 80007a8:	b2e6      	uxtb	r6, r4
 80007aa:	2cff      	cmp	r4, #255	; 0xff
 80007ac:	d12f      	bne.n	800080e <__aeabi_fadd+0x1a2>
 80007ae:	26ff      	movs	r6, #255	; 0xff
 80007b0:	2300      	movs	r3, #0
 80007b2:	e780      	b.n	80006b6 <__aeabi_fadd+0x4a>
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d152      	bne.n	800085e <__aeabi_fadd+0x1f2>
 80007b8:	2cff      	cmp	r4, #255	; 0xff
 80007ba:	d000      	beq.n	80007be <__aeabi_fadd+0x152>
 80007bc:	e774      	b.n	80006a8 <__aeabi_fadd+0x3c>
 80007be:	000a      	movs	r2, r1
 80007c0:	08ed      	lsrs	r5, r5, #3
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d0f3      	beq.n	80007ae <__aeabi_fadd+0x142>
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	03db      	lsls	r3, r3, #15
 80007ca:	432b      	orrs	r3, r5
 80007cc:	025b      	lsls	r3, r3, #9
 80007ce:	0a5b      	lsrs	r3, r3, #9
 80007d0:	26ff      	movs	r6, #255	; 0xff
 80007d2:	e770      	b.n	80006b6 <__aeabi_fadd+0x4a>
 80007d4:	3f01      	subs	r7, #1
 80007d6:	2f00      	cmp	r7, #0
 80007d8:	d0be      	beq.n	8000758 <__aeabi_fadd+0xec>
 80007da:	2cff      	cmp	r4, #255	; 0xff
 80007dc:	d1b1      	bne.n	8000742 <__aeabi_fadd+0xd6>
 80007de:	e763      	b.n	80006a8 <__aeabi_fadd+0x3c>
 80007e0:	2c00      	cmp	r4, #0
 80007e2:	d047      	beq.n	8000874 <__aeabi_fadd+0x208>
 80007e4:	28ff      	cmp	r0, #255	; 0xff
 80007e6:	d069      	beq.n	80008bc <__aeabi_fadd+0x250>
 80007e8:	2480      	movs	r4, #128	; 0x80
 80007ea:	04e4      	lsls	r4, r4, #19
 80007ec:	427a      	negs	r2, r7
 80007ee:	4325      	orrs	r5, r4
 80007f0:	2a1b      	cmp	r2, #27
 80007f2:	dd00      	ble.n	80007f6 <__aeabi_fadd+0x18a>
 80007f4:	e0c5      	b.n	8000982 <__aeabi_fadd+0x316>
 80007f6:	002c      	movs	r4, r5
 80007f8:	2620      	movs	r6, #32
 80007fa:	40d4      	lsrs	r4, r2
 80007fc:	1ab2      	subs	r2, r6, r2
 80007fe:	4095      	lsls	r5, r2
 8000800:	1e6a      	subs	r2, r5, #1
 8000802:	4195      	sbcs	r5, r2
 8000804:	4325      	orrs	r5, r4
 8000806:	1b5d      	subs	r5, r3, r5
 8000808:	0004      	movs	r4, r0
 800080a:	4689      	mov	r9, r1
 800080c:	e7a5      	b.n	800075a <__aeabi_fadd+0xee>
 800080e:	01ab      	lsls	r3, r5, #6
 8000810:	0a5b      	lsrs	r3, r3, #9
 8000812:	e750      	b.n	80006b6 <__aeabi_fadd+0x4a>
 8000814:	2400      	movs	r4, #0
 8000816:	2201      	movs	r2, #1
 8000818:	464b      	mov	r3, r9
 800081a:	401a      	ands	r2, r3
 800081c:	076b      	lsls	r3, r5, #29
 800081e:	d1ba      	bne.n	8000796 <__aeabi_fadd+0x12a>
 8000820:	e742      	b.n	80006a8 <__aeabi_fadd+0x3c>
 8000822:	2f00      	cmp	r7, #0
 8000824:	d13b      	bne.n	800089e <__aeabi_fadd+0x232>
 8000826:	3401      	adds	r4, #1
 8000828:	b2e0      	uxtb	r0, r4
 800082a:	2801      	cmp	r0, #1
 800082c:	dd4a      	ble.n	80008c4 <__aeabi_fadd+0x258>
 800082e:	2cff      	cmp	r4, #255	; 0xff
 8000830:	d0bd      	beq.n	80007ae <__aeabi_fadd+0x142>
 8000832:	2607      	movs	r6, #7
 8000834:	18ed      	adds	r5, r5, r3
 8000836:	086d      	lsrs	r5, r5, #1
 8000838:	402e      	ands	r6, r5
 800083a:	e7a7      	b.n	800078c <__aeabi_fadd+0x120>
 800083c:	2307      	movs	r3, #7
 800083e:	4d57      	ldr	r5, [pc, #348]	; (800099c <__aeabi_fadd+0x330>)
 8000840:	1a24      	subs	r4, r4, r0
 8000842:	4035      	ands	r5, r6
 8000844:	401e      	ands	r6, r3
 8000846:	e7a1      	b.n	800078c <__aeabi_fadd+0x120>
 8000848:	2c00      	cmp	r4, #0
 800084a:	d11b      	bne.n	8000884 <__aeabi_fadd+0x218>
 800084c:	2d00      	cmp	r5, #0
 800084e:	d16e      	bne.n	800092e <__aeabi_fadd+0x2c2>
 8000850:	2b00      	cmp	r3, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x1ea>
 8000854:	e09a      	b.n	800098c <__aeabi_fadd+0x320>
 8000856:	000a      	movs	r2, r1
 8000858:	001d      	movs	r5, r3
 800085a:	003c      	movs	r4, r7
 800085c:	e724      	b.n	80006a8 <__aeabi_fadd+0x3c>
 800085e:	3f01      	subs	r7, #1
 8000860:	2f00      	cmp	r7, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_fadd+0x1fa>
 8000864:	e758      	b.n	8000718 <__aeabi_fadd+0xac>
 8000866:	2cff      	cmp	r4, #255	; 0xff
 8000868:	d000      	beq.n	800086c <__aeabi_fadd+0x200>
 800086a:	e74a      	b.n	8000702 <__aeabi_fadd+0x96>
 800086c:	e7a7      	b.n	80007be <__aeabi_fadd+0x152>
 800086e:	1b5e      	subs	r6, r3, r5
 8000870:	4689      	mov	r9, r1
 8000872:	e776      	b.n	8000762 <__aeabi_fadd+0xf6>
 8000874:	2d00      	cmp	r5, #0
 8000876:	d11c      	bne.n	80008b2 <__aeabi_fadd+0x246>
 8000878:	000a      	movs	r2, r1
 800087a:	28ff      	cmp	r0, #255	; 0xff
 800087c:	d01f      	beq.n	80008be <__aeabi_fadd+0x252>
 800087e:	0004      	movs	r4, r0
 8000880:	001d      	movs	r5, r3
 8000882:	e711      	b.n	80006a8 <__aeabi_fadd+0x3c>
 8000884:	2d00      	cmp	r5, #0
 8000886:	d15d      	bne.n	8000944 <__aeabi_fadd+0x2d8>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d117      	bne.n	80008bc <__aeabi_fadd+0x250>
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	2200      	movs	r2, #0
 8000890:	03db      	lsls	r3, r3, #15
 8000892:	26ff      	movs	r6, #255	; 0xff
 8000894:	e70f      	b.n	80006b6 <__aeabi_fadd+0x4a>
 8000896:	000a      	movs	r2, r1
 8000898:	26ff      	movs	r6, #255	; 0xff
 800089a:	2300      	movs	r3, #0
 800089c:	e70b      	b.n	80006b6 <__aeabi_fadd+0x4a>
 800089e:	2c00      	cmp	r4, #0
 80008a0:	d121      	bne.n	80008e6 <__aeabi_fadd+0x27a>
 80008a2:	2d00      	cmp	r5, #0
 80008a4:	d166      	bne.n	8000974 <__aeabi_fadd+0x308>
 80008a6:	28ff      	cmp	r0, #255	; 0xff
 80008a8:	d1e9      	bne.n	800087e <__aeabi_fadd+0x212>
 80008aa:	001d      	movs	r5, r3
 80008ac:	e787      	b.n	80007be <__aeabi_fadd+0x152>
 80008ae:	2301      	movs	r3, #1
 80008b0:	e752      	b.n	8000758 <__aeabi_fadd+0xec>
 80008b2:	1c7a      	adds	r2, r7, #1
 80008b4:	d0a7      	beq.n	8000806 <__aeabi_fadd+0x19a>
 80008b6:	43fa      	mvns	r2, r7
 80008b8:	28ff      	cmp	r0, #255	; 0xff
 80008ba:	d199      	bne.n	80007f0 <__aeabi_fadd+0x184>
 80008bc:	000a      	movs	r2, r1
 80008be:	001d      	movs	r5, r3
 80008c0:	24ff      	movs	r4, #255	; 0xff
 80008c2:	e6f1      	b.n	80006a8 <__aeabi_fadd+0x3c>
 80008c4:	2e00      	cmp	r6, #0
 80008c6:	d121      	bne.n	800090c <__aeabi_fadd+0x2a0>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d04f      	beq.n	800096c <__aeabi_fadd+0x300>
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d04c      	beq.n	800096a <__aeabi_fadd+0x2fe>
 80008d0:	18ed      	adds	r5, r5, r3
 80008d2:	016b      	lsls	r3, r5, #5
 80008d4:	d59e      	bpl.n	8000814 <__aeabi_fadd+0x1a8>
 80008d6:	4b31      	ldr	r3, [pc, #196]	; (800099c <__aeabi_fadd+0x330>)
 80008d8:	3607      	adds	r6, #7
 80008da:	402e      	ands	r6, r5
 80008dc:	2401      	movs	r4, #1
 80008de:	401d      	ands	r5, r3
 80008e0:	e754      	b.n	800078c <__aeabi_fadd+0x120>
 80008e2:	2301      	movs	r3, #1
 80008e4:	e718      	b.n	8000718 <__aeabi_fadd+0xac>
 80008e6:	28ff      	cmp	r0, #255	; 0xff
 80008e8:	d0df      	beq.n	80008aa <__aeabi_fadd+0x23e>
 80008ea:	2480      	movs	r4, #128	; 0x80
 80008ec:	04e4      	lsls	r4, r4, #19
 80008ee:	427f      	negs	r7, r7
 80008f0:	4325      	orrs	r5, r4
 80008f2:	2f1b      	cmp	r7, #27
 80008f4:	dc4d      	bgt.n	8000992 <__aeabi_fadd+0x326>
 80008f6:	2620      	movs	r6, #32
 80008f8:	1bf6      	subs	r6, r6, r7
 80008fa:	002c      	movs	r4, r5
 80008fc:	40b5      	lsls	r5, r6
 80008fe:	40fc      	lsrs	r4, r7
 8000900:	1e6a      	subs	r2, r5, #1
 8000902:	4195      	sbcs	r5, r2
 8000904:	4325      	orrs	r5, r4
 8000906:	18ed      	adds	r5, r5, r3
 8000908:	0004      	movs	r4, r0
 800090a:	e706      	b.n	800071a <__aeabi_fadd+0xae>
 800090c:	2d00      	cmp	r5, #0
 800090e:	d0cc      	beq.n	80008aa <__aeabi_fadd+0x23e>
 8000910:	2b00      	cmp	r3, #0
 8000912:	d100      	bne.n	8000916 <__aeabi_fadd+0x2aa>
 8000914:	e753      	b.n	80007be <__aeabi_fadd+0x152>
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	4660      	mov	r0, ip
 800091a:	03c9      	lsls	r1, r1, #15
 800091c:	4208      	tst	r0, r1
 800091e:	d003      	beq.n	8000928 <__aeabi_fadd+0x2bc>
 8000920:	4640      	mov	r0, r8
 8000922:	4208      	tst	r0, r1
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x2bc>
 8000926:	001d      	movs	r5, r3
 8000928:	2101      	movs	r1, #1
 800092a:	4011      	ands	r1, r2
 800092c:	e747      	b.n	80007be <__aeabi_fadd+0x152>
 800092e:	2b00      	cmp	r3, #0
 8000930:	d100      	bne.n	8000934 <__aeabi_fadd+0x2c8>
 8000932:	e6b9      	b.n	80006a8 <__aeabi_fadd+0x3c>
 8000934:	1aea      	subs	r2, r5, r3
 8000936:	0150      	lsls	r0, r2, #5
 8000938:	d525      	bpl.n	8000986 <__aeabi_fadd+0x31a>
 800093a:	2607      	movs	r6, #7
 800093c:	1b5d      	subs	r5, r3, r5
 800093e:	402e      	ands	r6, r5
 8000940:	4689      	mov	r9, r1
 8000942:	e723      	b.n	800078c <__aeabi_fadd+0x120>
 8000944:	24ff      	movs	r4, #255	; 0xff
 8000946:	2b00      	cmp	r3, #0
 8000948:	d100      	bne.n	800094c <__aeabi_fadd+0x2e0>
 800094a:	e6ad      	b.n	80006a8 <__aeabi_fadd+0x3c>
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	4660      	mov	r0, ip
 8000950:	03d2      	lsls	r2, r2, #15
 8000952:	4210      	tst	r0, r2
 8000954:	d004      	beq.n	8000960 <__aeabi_fadd+0x2f4>
 8000956:	4640      	mov	r0, r8
 8000958:	4210      	tst	r0, r2
 800095a:	d101      	bne.n	8000960 <__aeabi_fadd+0x2f4>
 800095c:	001d      	movs	r5, r3
 800095e:	4689      	mov	r9, r1
 8000960:	2201      	movs	r2, #1
 8000962:	464b      	mov	r3, r9
 8000964:	24ff      	movs	r4, #255	; 0xff
 8000966:	401a      	ands	r2, r3
 8000968:	e69e      	b.n	80006a8 <__aeabi_fadd+0x3c>
 800096a:	002b      	movs	r3, r5
 800096c:	08dd      	lsrs	r5, r3, #3
 800096e:	000a      	movs	r2, r1
 8000970:	2400      	movs	r4, #0
 8000972:	e69d      	b.n	80006b0 <__aeabi_fadd+0x44>
 8000974:	1c7a      	adds	r2, r7, #1
 8000976:	d0c6      	beq.n	8000906 <__aeabi_fadd+0x29a>
 8000978:	43ff      	mvns	r7, r7
 800097a:	28ff      	cmp	r0, #255	; 0xff
 800097c:	d1b9      	bne.n	80008f2 <__aeabi_fadd+0x286>
 800097e:	001d      	movs	r5, r3
 8000980:	e71d      	b.n	80007be <__aeabi_fadd+0x152>
 8000982:	2501      	movs	r5, #1
 8000984:	e73f      	b.n	8000806 <__aeabi_fadd+0x19a>
 8000986:	1e15      	subs	r5, r2, #0
 8000988:	d000      	beq.n	800098c <__aeabi_fadd+0x320>
 800098a:	e744      	b.n	8000816 <__aeabi_fadd+0x1aa>
 800098c:	2200      	movs	r2, #0
 800098e:	2300      	movs	r3, #0
 8000990:	e691      	b.n	80006b6 <__aeabi_fadd+0x4a>
 8000992:	2501      	movs	r5, #1
 8000994:	e7b7      	b.n	8000906 <__aeabi_fadd+0x29a>
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	7dffffff 	.word	0x7dffffff
 800099c:	fbffffff 	.word	0xfbffffff

080009a0 <__aeabi_fdiv>:
 80009a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a2:	4657      	mov	r7, sl
 80009a4:	464e      	mov	r6, r9
 80009a6:	4645      	mov	r5, r8
 80009a8:	46de      	mov	lr, fp
 80009aa:	0244      	lsls	r4, r0, #9
 80009ac:	b5e0      	push	{r5, r6, r7, lr}
 80009ae:	0046      	lsls	r6, r0, #1
 80009b0:	4688      	mov	r8, r1
 80009b2:	0a64      	lsrs	r4, r4, #9
 80009b4:	0e36      	lsrs	r6, r6, #24
 80009b6:	0fc7      	lsrs	r7, r0, #31
 80009b8:	2e00      	cmp	r6, #0
 80009ba:	d063      	beq.n	8000a84 <__aeabi_fdiv+0xe4>
 80009bc:	2eff      	cmp	r6, #255	; 0xff
 80009be:	d024      	beq.n	8000a0a <__aeabi_fdiv+0x6a>
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	00e4      	lsls	r4, r4, #3
 80009c4:	04db      	lsls	r3, r3, #19
 80009c6:	431c      	orrs	r4, r3
 80009c8:	2300      	movs	r3, #0
 80009ca:	4699      	mov	r9, r3
 80009cc:	469b      	mov	fp, r3
 80009ce:	3e7f      	subs	r6, #127	; 0x7f
 80009d0:	4643      	mov	r3, r8
 80009d2:	4642      	mov	r2, r8
 80009d4:	025d      	lsls	r5, r3, #9
 80009d6:	0fd2      	lsrs	r2, r2, #31
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	0a6d      	lsrs	r5, r5, #9
 80009dc:	0e1b      	lsrs	r3, r3, #24
 80009de:	4690      	mov	r8, r2
 80009e0:	4692      	mov	sl, r2
 80009e2:	d065      	beq.n	8000ab0 <__aeabi_fdiv+0x110>
 80009e4:	2bff      	cmp	r3, #255	; 0xff
 80009e6:	d055      	beq.n	8000a94 <__aeabi_fdiv+0xf4>
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	2100      	movs	r1, #0
 80009ec:	00ed      	lsls	r5, r5, #3
 80009ee:	04d2      	lsls	r2, r2, #19
 80009f0:	3b7f      	subs	r3, #127	; 0x7f
 80009f2:	4315      	orrs	r5, r2
 80009f4:	1af6      	subs	r6, r6, r3
 80009f6:	4643      	mov	r3, r8
 80009f8:	464a      	mov	r2, r9
 80009fa:	407b      	eors	r3, r7
 80009fc:	2a0f      	cmp	r2, #15
 80009fe:	d900      	bls.n	8000a02 <__aeabi_fdiv+0x62>
 8000a00:	e08d      	b.n	8000b1e <__aeabi_fdiv+0x17e>
 8000a02:	486d      	ldr	r0, [pc, #436]	; (8000bb8 <__aeabi_fdiv+0x218>)
 8000a04:	0092      	lsls	r2, r2, #2
 8000a06:	5882      	ldr	r2, [r0, r2]
 8000a08:	4697      	mov	pc, r2
 8000a0a:	2c00      	cmp	r4, #0
 8000a0c:	d154      	bne.n	8000ab8 <__aeabi_fdiv+0x118>
 8000a0e:	2308      	movs	r3, #8
 8000a10:	4699      	mov	r9, r3
 8000a12:	3b06      	subs	r3, #6
 8000a14:	26ff      	movs	r6, #255	; 0xff
 8000a16:	469b      	mov	fp, r3
 8000a18:	e7da      	b.n	80009d0 <__aeabi_fdiv+0x30>
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	4653      	mov	r3, sl
 8000a1e:	2902      	cmp	r1, #2
 8000a20:	d01b      	beq.n	8000a5a <__aeabi_fdiv+0xba>
 8000a22:	2903      	cmp	r1, #3
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fdiv+0x88>
 8000a26:	e0bf      	b.n	8000ba8 <__aeabi_fdiv+0x208>
 8000a28:	2901      	cmp	r1, #1
 8000a2a:	d028      	beq.n	8000a7e <__aeabi_fdiv+0xde>
 8000a2c:	0030      	movs	r0, r6
 8000a2e:	307f      	adds	r0, #127	; 0x7f
 8000a30:	2800      	cmp	r0, #0
 8000a32:	dd20      	ble.n	8000a76 <__aeabi_fdiv+0xd6>
 8000a34:	076a      	lsls	r2, r5, #29
 8000a36:	d004      	beq.n	8000a42 <__aeabi_fdiv+0xa2>
 8000a38:	220f      	movs	r2, #15
 8000a3a:	402a      	ands	r2, r5
 8000a3c:	2a04      	cmp	r2, #4
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_fdiv+0xa2>
 8000a40:	3504      	adds	r5, #4
 8000a42:	012a      	lsls	r2, r5, #4
 8000a44:	d503      	bpl.n	8000a4e <__aeabi_fdiv+0xae>
 8000a46:	0030      	movs	r0, r6
 8000a48:	4a5c      	ldr	r2, [pc, #368]	; (8000bbc <__aeabi_fdiv+0x21c>)
 8000a4a:	3080      	adds	r0, #128	; 0x80
 8000a4c:	4015      	ands	r5, r2
 8000a4e:	28fe      	cmp	r0, #254	; 0xfe
 8000a50:	dc03      	bgt.n	8000a5a <__aeabi_fdiv+0xba>
 8000a52:	01ac      	lsls	r4, r5, #6
 8000a54:	0a64      	lsrs	r4, r4, #9
 8000a56:	b2c2      	uxtb	r2, r0
 8000a58:	e001      	b.n	8000a5e <__aeabi_fdiv+0xbe>
 8000a5a:	22ff      	movs	r2, #255	; 0xff
 8000a5c:	2400      	movs	r4, #0
 8000a5e:	0264      	lsls	r4, r4, #9
 8000a60:	05d2      	lsls	r2, r2, #23
 8000a62:	0a60      	lsrs	r0, r4, #9
 8000a64:	07db      	lsls	r3, r3, #31
 8000a66:	4310      	orrs	r0, r2
 8000a68:	4318      	orrs	r0, r3
 8000a6a:	bc3c      	pop	{r2, r3, r4, r5}
 8000a6c:	4690      	mov	r8, r2
 8000a6e:	4699      	mov	r9, r3
 8000a70:	46a2      	mov	sl, r4
 8000a72:	46ab      	mov	fp, r5
 8000a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a76:	2201      	movs	r2, #1
 8000a78:	1a10      	subs	r0, r2, r0
 8000a7a:	281b      	cmp	r0, #27
 8000a7c:	dd7c      	ble.n	8000b78 <__aeabi_fdiv+0x1d8>
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2400      	movs	r4, #0
 8000a82:	e7ec      	b.n	8000a5e <__aeabi_fdiv+0xbe>
 8000a84:	2c00      	cmp	r4, #0
 8000a86:	d11d      	bne.n	8000ac4 <__aeabi_fdiv+0x124>
 8000a88:	2304      	movs	r3, #4
 8000a8a:	4699      	mov	r9, r3
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	2600      	movs	r6, #0
 8000a90:	469b      	mov	fp, r3
 8000a92:	e79d      	b.n	80009d0 <__aeabi_fdiv+0x30>
 8000a94:	3eff      	subs	r6, #255	; 0xff
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	d120      	bne.n	8000adc <__aeabi_fdiv+0x13c>
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	464a      	mov	r2, r9
 8000aa0:	407b      	eors	r3, r7
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	2a0f      	cmp	r2, #15
 8000aa6:	d8d8      	bhi.n	8000a5a <__aeabi_fdiv+0xba>
 8000aa8:	4845      	ldr	r0, [pc, #276]	; (8000bc0 <__aeabi_fdiv+0x220>)
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	5882      	ldr	r2, [r0, r2]
 8000aae:	4697      	mov	pc, r2
 8000ab0:	2d00      	cmp	r5, #0
 8000ab2:	d119      	bne.n	8000ae8 <__aeabi_fdiv+0x148>
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	e7f1      	b.n	8000a9c <__aeabi_fdiv+0xfc>
 8000ab8:	230c      	movs	r3, #12
 8000aba:	4699      	mov	r9, r3
 8000abc:	3b09      	subs	r3, #9
 8000abe:	26ff      	movs	r6, #255	; 0xff
 8000ac0:	469b      	mov	fp, r3
 8000ac2:	e785      	b.n	80009d0 <__aeabi_fdiv+0x30>
 8000ac4:	0020      	movs	r0, r4
 8000ac6:	f002 fa17 	bl	8002ef8 <__clzsi2>
 8000aca:	2676      	movs	r6, #118	; 0x76
 8000acc:	1f43      	subs	r3, r0, #5
 8000ace:	409c      	lsls	r4, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	4276      	negs	r6, r6
 8000ad4:	1a36      	subs	r6, r6, r0
 8000ad6:	4699      	mov	r9, r3
 8000ad8:	469b      	mov	fp, r3
 8000ada:	e779      	b.n	80009d0 <__aeabi_fdiv+0x30>
 8000adc:	464a      	mov	r2, r9
 8000ade:	2303      	movs	r3, #3
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	4691      	mov	r9, r2
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	e786      	b.n	80009f6 <__aeabi_fdiv+0x56>
 8000ae8:	0028      	movs	r0, r5
 8000aea:	f002 fa05 	bl	8002ef8 <__clzsi2>
 8000aee:	1f43      	subs	r3, r0, #5
 8000af0:	1836      	adds	r6, r6, r0
 8000af2:	409d      	lsls	r5, r3
 8000af4:	3676      	adds	r6, #118	; 0x76
 8000af6:	2100      	movs	r1, #0
 8000af8:	e77d      	b.n	80009f6 <__aeabi_fdiv+0x56>
 8000afa:	2480      	movs	r4, #128	; 0x80
 8000afc:	2300      	movs	r3, #0
 8000afe:	03e4      	lsls	r4, r4, #15
 8000b00:	22ff      	movs	r2, #255	; 0xff
 8000b02:	e7ac      	b.n	8000a5e <__aeabi_fdiv+0xbe>
 8000b04:	2500      	movs	r5, #0
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	03db      	lsls	r3, r3, #15
 8000b0a:	421c      	tst	r4, r3
 8000b0c:	d028      	beq.n	8000b60 <__aeabi_fdiv+0x1c0>
 8000b0e:	421d      	tst	r5, r3
 8000b10:	d126      	bne.n	8000b60 <__aeabi_fdiv+0x1c0>
 8000b12:	432b      	orrs	r3, r5
 8000b14:	025c      	lsls	r4, r3, #9
 8000b16:	0a64      	lsrs	r4, r4, #9
 8000b18:	4643      	mov	r3, r8
 8000b1a:	22ff      	movs	r2, #255	; 0xff
 8000b1c:	e79f      	b.n	8000a5e <__aeabi_fdiv+0xbe>
 8000b1e:	0162      	lsls	r2, r4, #5
 8000b20:	016c      	lsls	r4, r5, #5
 8000b22:	42a2      	cmp	r2, r4
 8000b24:	d224      	bcs.n	8000b70 <__aeabi_fdiv+0x1d0>
 8000b26:	211b      	movs	r1, #27
 8000b28:	2500      	movs	r5, #0
 8000b2a:	3e01      	subs	r6, #1
 8000b2c:	2701      	movs	r7, #1
 8000b2e:	0010      	movs	r0, r2
 8000b30:	006d      	lsls	r5, r5, #1
 8000b32:	0052      	lsls	r2, r2, #1
 8000b34:	2800      	cmp	r0, #0
 8000b36:	db01      	blt.n	8000b3c <__aeabi_fdiv+0x19c>
 8000b38:	4294      	cmp	r4, r2
 8000b3a:	d801      	bhi.n	8000b40 <__aeabi_fdiv+0x1a0>
 8000b3c:	1b12      	subs	r2, r2, r4
 8000b3e:	433d      	orrs	r5, r7
 8000b40:	3901      	subs	r1, #1
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d1f3      	bne.n	8000b2e <__aeabi_fdiv+0x18e>
 8000b46:	0014      	movs	r4, r2
 8000b48:	1e62      	subs	r2, r4, #1
 8000b4a:	4194      	sbcs	r4, r2
 8000b4c:	4325      	orrs	r5, r4
 8000b4e:	e76d      	b.n	8000a2c <__aeabi_fdiv+0x8c>
 8000b50:	46ba      	mov	sl, r7
 8000b52:	4659      	mov	r1, fp
 8000b54:	0025      	movs	r5, r4
 8000b56:	4653      	mov	r3, sl
 8000b58:	2902      	cmp	r1, #2
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_fdiv+0x1be>
 8000b5c:	e761      	b.n	8000a22 <__aeabi_fdiv+0x82>
 8000b5e:	e77c      	b.n	8000a5a <__aeabi_fdiv+0xba>
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	03db      	lsls	r3, r3, #15
 8000b64:	431c      	orrs	r4, r3
 8000b66:	0264      	lsls	r4, r4, #9
 8000b68:	0a64      	lsrs	r4, r4, #9
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	22ff      	movs	r2, #255	; 0xff
 8000b6e:	e776      	b.n	8000a5e <__aeabi_fdiv+0xbe>
 8000b70:	1b12      	subs	r2, r2, r4
 8000b72:	211a      	movs	r1, #26
 8000b74:	2501      	movs	r5, #1
 8000b76:	e7d9      	b.n	8000b2c <__aeabi_fdiv+0x18c>
 8000b78:	369e      	adds	r6, #158	; 0x9e
 8000b7a:	002a      	movs	r2, r5
 8000b7c:	40b5      	lsls	r5, r6
 8000b7e:	002c      	movs	r4, r5
 8000b80:	40c2      	lsrs	r2, r0
 8000b82:	1e65      	subs	r5, r4, #1
 8000b84:	41ac      	sbcs	r4, r5
 8000b86:	4314      	orrs	r4, r2
 8000b88:	0762      	lsls	r2, r4, #29
 8000b8a:	d004      	beq.n	8000b96 <__aeabi_fdiv+0x1f6>
 8000b8c:	220f      	movs	r2, #15
 8000b8e:	4022      	ands	r2, r4
 8000b90:	2a04      	cmp	r2, #4
 8000b92:	d000      	beq.n	8000b96 <__aeabi_fdiv+0x1f6>
 8000b94:	3404      	adds	r4, #4
 8000b96:	0162      	lsls	r2, r4, #5
 8000b98:	d403      	bmi.n	8000ba2 <__aeabi_fdiv+0x202>
 8000b9a:	01a4      	lsls	r4, r4, #6
 8000b9c:	0a64      	lsrs	r4, r4, #9
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	e75d      	b.n	8000a5e <__aeabi_fdiv+0xbe>
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2400      	movs	r4, #0
 8000ba6:	e75a      	b.n	8000a5e <__aeabi_fdiv+0xbe>
 8000ba8:	2480      	movs	r4, #128	; 0x80
 8000baa:	03e4      	lsls	r4, r4, #15
 8000bac:	432c      	orrs	r4, r5
 8000bae:	0264      	lsls	r4, r4, #9
 8000bb0:	0a64      	lsrs	r4, r4, #9
 8000bb2:	22ff      	movs	r2, #255	; 0xff
 8000bb4:	e753      	b.n	8000a5e <__aeabi_fdiv+0xbe>
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	0800b278 	.word	0x0800b278
 8000bbc:	f7ffffff 	.word	0xf7ffffff
 8000bc0:	0800b2b8 	.word	0x0800b2b8

08000bc4 <__eqsf2>:
 8000bc4:	b570      	push	{r4, r5, r6, lr}
 8000bc6:	0042      	lsls	r2, r0, #1
 8000bc8:	024e      	lsls	r6, r1, #9
 8000bca:	004c      	lsls	r4, r1, #1
 8000bcc:	0245      	lsls	r5, r0, #9
 8000bce:	0a6d      	lsrs	r5, r5, #9
 8000bd0:	0e12      	lsrs	r2, r2, #24
 8000bd2:	0fc3      	lsrs	r3, r0, #31
 8000bd4:	0a76      	lsrs	r6, r6, #9
 8000bd6:	0e24      	lsrs	r4, r4, #24
 8000bd8:	0fc9      	lsrs	r1, r1, #31
 8000bda:	2aff      	cmp	r2, #255	; 0xff
 8000bdc:	d00f      	beq.n	8000bfe <__eqsf2+0x3a>
 8000bde:	2cff      	cmp	r4, #255	; 0xff
 8000be0:	d011      	beq.n	8000c06 <__eqsf2+0x42>
 8000be2:	2001      	movs	r0, #1
 8000be4:	42a2      	cmp	r2, r4
 8000be6:	d000      	beq.n	8000bea <__eqsf2+0x26>
 8000be8:	bd70      	pop	{r4, r5, r6, pc}
 8000bea:	42b5      	cmp	r5, r6
 8000bec:	d1fc      	bne.n	8000be8 <__eqsf2+0x24>
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d00d      	beq.n	8000c0e <__eqsf2+0x4a>
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d1f8      	bne.n	8000be8 <__eqsf2+0x24>
 8000bf6:	0028      	movs	r0, r5
 8000bf8:	1e45      	subs	r5, r0, #1
 8000bfa:	41a8      	sbcs	r0, r5
 8000bfc:	e7f4      	b.n	8000be8 <__eqsf2+0x24>
 8000bfe:	2001      	movs	r0, #1
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d1f1      	bne.n	8000be8 <__eqsf2+0x24>
 8000c04:	e7eb      	b.n	8000bde <__eqsf2+0x1a>
 8000c06:	2001      	movs	r0, #1
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d1ed      	bne.n	8000be8 <__eqsf2+0x24>
 8000c0c:	e7e9      	b.n	8000be2 <__eqsf2+0x1e>
 8000c0e:	2000      	movs	r0, #0
 8000c10:	e7ea      	b.n	8000be8 <__eqsf2+0x24>
 8000c12:	46c0      	nop			; (mov r8, r8)

08000c14 <__gesf2>:
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	004a      	lsls	r2, r1, #1
 8000c18:	024e      	lsls	r6, r1, #9
 8000c1a:	0245      	lsls	r5, r0, #9
 8000c1c:	0044      	lsls	r4, r0, #1
 8000c1e:	0a6d      	lsrs	r5, r5, #9
 8000c20:	0e24      	lsrs	r4, r4, #24
 8000c22:	0fc3      	lsrs	r3, r0, #31
 8000c24:	0a76      	lsrs	r6, r6, #9
 8000c26:	0e12      	lsrs	r2, r2, #24
 8000c28:	0fc9      	lsrs	r1, r1, #31
 8000c2a:	2cff      	cmp	r4, #255	; 0xff
 8000c2c:	d015      	beq.n	8000c5a <__gesf2+0x46>
 8000c2e:	2aff      	cmp	r2, #255	; 0xff
 8000c30:	d00e      	beq.n	8000c50 <__gesf2+0x3c>
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d115      	bne.n	8000c62 <__gesf2+0x4e>
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d101      	bne.n	8000c3e <__gesf2+0x2a>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d01c      	beq.n	8000c78 <__gesf2+0x64>
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d014      	beq.n	8000c6c <__gesf2+0x58>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d027      	beq.n	8000c96 <__gesf2+0x82>
 8000c46:	2002      	movs	r0, #2
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	4018      	ands	r0, r3
 8000c4c:	3801      	subs	r0, #1
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d0ee      	beq.n	8000c32 <__gesf2+0x1e>
 8000c54:	2002      	movs	r0, #2
 8000c56:	4240      	negs	r0, r0
 8000c58:	e7f9      	b.n	8000c4e <__gesf2+0x3a>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d1fa      	bne.n	8000c54 <__gesf2+0x40>
 8000c5e:	2aff      	cmp	r2, #255	; 0xff
 8000c60:	d00e      	beq.n	8000c80 <__gesf2+0x6c>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	d10e      	bne.n	8000c84 <__gesf2+0x70>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d0ed      	beq.n	8000c46 <__gesf2+0x32>
 8000c6a:	e00b      	b.n	8000c84 <__gesf2+0x70>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	3901      	subs	r1, #1
 8000c70:	4399      	bics	r1, r3
 8000c72:	0008      	movs	r0, r1
 8000c74:	3001      	adds	r0, #1
 8000c76:	e7ea      	b.n	8000c4e <__gesf2+0x3a>
 8000c78:	2000      	movs	r0, #0
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d0e7      	beq.n	8000c4e <__gesf2+0x3a>
 8000c7e:	e7e2      	b.n	8000c46 <__gesf2+0x32>
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	d1e7      	bne.n	8000c54 <__gesf2+0x40>
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d1de      	bne.n	8000c46 <__gesf2+0x32>
 8000c88:	4294      	cmp	r4, r2
 8000c8a:	dd05      	ble.n	8000c98 <__gesf2+0x84>
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	1e58      	subs	r0, r3, #1
 8000c90:	4008      	ands	r0, r1
 8000c92:	3801      	subs	r0, #1
 8000c94:	e7db      	b.n	8000c4e <__gesf2+0x3a>
 8000c96:	2400      	movs	r4, #0
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	dc04      	bgt.n	8000ca6 <__gesf2+0x92>
 8000c9c:	42b5      	cmp	r5, r6
 8000c9e:	d8d2      	bhi.n	8000c46 <__gesf2+0x32>
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	42b5      	cmp	r5, r6
 8000ca4:	d2d3      	bcs.n	8000c4e <__gesf2+0x3a>
 8000ca6:	1e58      	subs	r0, r3, #1
 8000ca8:	2301      	movs	r3, #1
 8000caa:	4398      	bics	r0, r3
 8000cac:	3001      	adds	r0, #1
 8000cae:	e7ce      	b.n	8000c4e <__gesf2+0x3a>

08000cb0 <__lesf2>:
 8000cb0:	b530      	push	{r4, r5, lr}
 8000cb2:	0042      	lsls	r2, r0, #1
 8000cb4:	0244      	lsls	r4, r0, #9
 8000cb6:	024d      	lsls	r5, r1, #9
 8000cb8:	0fc3      	lsrs	r3, r0, #31
 8000cba:	0048      	lsls	r0, r1, #1
 8000cbc:	0a64      	lsrs	r4, r4, #9
 8000cbe:	0e12      	lsrs	r2, r2, #24
 8000cc0:	0a6d      	lsrs	r5, r5, #9
 8000cc2:	0e00      	lsrs	r0, r0, #24
 8000cc4:	0fc9      	lsrs	r1, r1, #31
 8000cc6:	2aff      	cmp	r2, #255	; 0xff
 8000cc8:	d012      	beq.n	8000cf0 <__lesf2+0x40>
 8000cca:	28ff      	cmp	r0, #255	; 0xff
 8000ccc:	d00c      	beq.n	8000ce8 <__lesf2+0x38>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	d112      	bne.n	8000cf8 <__lesf2+0x48>
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d119      	bne.n	8000d0a <__lesf2+0x5a>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d117      	bne.n	8000d0a <__lesf2+0x5a>
 8000cda:	2c00      	cmp	r4, #0
 8000cdc:	d02b      	beq.n	8000d36 <__lesf2+0x86>
 8000cde:	2002      	movs	r0, #2
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	4018      	ands	r0, r3
 8000ce4:	3801      	subs	r0, #1
 8000ce6:	e026      	b.n	8000d36 <__lesf2+0x86>
 8000ce8:	2d00      	cmp	r5, #0
 8000cea:	d0f0      	beq.n	8000cce <__lesf2+0x1e>
 8000cec:	2002      	movs	r0, #2
 8000cee:	e022      	b.n	8000d36 <__lesf2+0x86>
 8000cf0:	2c00      	cmp	r4, #0
 8000cf2:	d1fb      	bne.n	8000cec <__lesf2+0x3c>
 8000cf4:	28ff      	cmp	r0, #255	; 0xff
 8000cf6:	d01f      	beq.n	8000d38 <__lesf2+0x88>
 8000cf8:	2800      	cmp	r0, #0
 8000cfa:	d11f      	bne.n	8000d3c <__lesf2+0x8c>
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d11d      	bne.n	8000d3c <__lesf2+0x8c>
 8000d00:	2002      	movs	r0, #2
 8000d02:	3b01      	subs	r3, #1
 8000d04:	4018      	ands	r0, r3
 8000d06:	3801      	subs	r0, #1
 8000d08:	e015      	b.n	8000d36 <__lesf2+0x86>
 8000d0a:	2c00      	cmp	r4, #0
 8000d0c:	d00e      	beq.n	8000d2c <__lesf2+0x7c>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d1e5      	bne.n	8000cde <__lesf2+0x2e>
 8000d12:	2200      	movs	r2, #0
 8000d14:	4290      	cmp	r0, r2
 8000d16:	dc04      	bgt.n	8000d22 <__lesf2+0x72>
 8000d18:	42ac      	cmp	r4, r5
 8000d1a:	d8e0      	bhi.n	8000cde <__lesf2+0x2e>
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	42ac      	cmp	r4, r5
 8000d20:	d209      	bcs.n	8000d36 <__lesf2+0x86>
 8000d22:	1e58      	subs	r0, r3, #1
 8000d24:	2301      	movs	r3, #1
 8000d26:	4398      	bics	r0, r3
 8000d28:	3001      	adds	r0, #1
 8000d2a:	e004      	b.n	8000d36 <__lesf2+0x86>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	3901      	subs	r1, #1
 8000d30:	4399      	bics	r1, r3
 8000d32:	0008      	movs	r0, r1
 8000d34:	3001      	adds	r0, #1
 8000d36:	bd30      	pop	{r4, r5, pc}
 8000d38:	2d00      	cmp	r5, #0
 8000d3a:	d1d7      	bne.n	8000cec <__lesf2+0x3c>
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	d1ce      	bne.n	8000cde <__lesf2+0x2e>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	dde7      	ble.n	8000d14 <__lesf2+0x64>
 8000d44:	2102      	movs	r1, #2
 8000d46:	1e58      	subs	r0, r3, #1
 8000d48:	4008      	ands	r0, r1
 8000d4a:	3801      	subs	r0, #1
 8000d4c:	e7f3      	b.n	8000d36 <__lesf2+0x86>
 8000d4e:	46c0      	nop			; (mov r8, r8)

08000d50 <__aeabi_fmul>:
 8000d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d52:	464e      	mov	r6, r9
 8000d54:	4657      	mov	r7, sl
 8000d56:	4645      	mov	r5, r8
 8000d58:	46de      	mov	lr, fp
 8000d5a:	b5e0      	push	{r5, r6, r7, lr}
 8000d5c:	0243      	lsls	r3, r0, #9
 8000d5e:	0a5b      	lsrs	r3, r3, #9
 8000d60:	0045      	lsls	r5, r0, #1
 8000d62:	b083      	sub	sp, #12
 8000d64:	1c0f      	adds	r7, r1, #0
 8000d66:	4699      	mov	r9, r3
 8000d68:	0e2d      	lsrs	r5, r5, #24
 8000d6a:	0fc6      	lsrs	r6, r0, #31
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d057      	beq.n	8000e20 <__aeabi_fmul+0xd0>
 8000d70:	2dff      	cmp	r5, #255	; 0xff
 8000d72:	d024      	beq.n	8000dbe <__aeabi_fmul+0x6e>
 8000d74:	2080      	movs	r0, #128	; 0x80
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	04c0      	lsls	r0, r0, #19
 8000d7a:	4318      	orrs	r0, r3
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4681      	mov	r9, r0
 8000d80:	469a      	mov	sl, r3
 8000d82:	469b      	mov	fp, r3
 8000d84:	3d7f      	subs	r5, #127	; 0x7f
 8000d86:	027c      	lsls	r4, r7, #9
 8000d88:	007a      	lsls	r2, r7, #1
 8000d8a:	0ffb      	lsrs	r3, r7, #31
 8000d8c:	0a64      	lsrs	r4, r4, #9
 8000d8e:	0e12      	lsrs	r2, r2, #24
 8000d90:	4698      	mov	r8, r3
 8000d92:	d023      	beq.n	8000ddc <__aeabi_fmul+0x8c>
 8000d94:	2aff      	cmp	r2, #255	; 0xff
 8000d96:	d04b      	beq.n	8000e30 <__aeabi_fmul+0xe0>
 8000d98:	00e3      	lsls	r3, r4, #3
 8000d9a:	2480      	movs	r4, #128	; 0x80
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	04e4      	lsls	r4, r4, #19
 8000da0:	3a7f      	subs	r2, #127	; 0x7f
 8000da2:	431c      	orrs	r4, r3
 8000da4:	18ad      	adds	r5, r5, r2
 8000da6:	1c6b      	adds	r3, r5, #1
 8000da8:	4647      	mov	r7, r8
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	4653      	mov	r3, sl
 8000dae:	4077      	eors	r7, r6
 8000db0:	003a      	movs	r2, r7
 8000db2:	2b0f      	cmp	r3, #15
 8000db4:	d848      	bhi.n	8000e48 <__aeabi_fmul+0xf8>
 8000db6:	497d      	ldr	r1, [pc, #500]	; (8000fac <__aeabi_fmul+0x25c>)
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	58cb      	ldr	r3, [r1, r3]
 8000dbc:	469f      	mov	pc, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_fmul+0x74>
 8000dc2:	e085      	b.n	8000ed0 <__aeabi_fmul+0x180>
 8000dc4:	3308      	adds	r3, #8
 8000dc6:	469a      	mov	sl, r3
 8000dc8:	3b06      	subs	r3, #6
 8000dca:	469b      	mov	fp, r3
 8000dcc:	027c      	lsls	r4, r7, #9
 8000dce:	007a      	lsls	r2, r7, #1
 8000dd0:	0ffb      	lsrs	r3, r7, #31
 8000dd2:	25ff      	movs	r5, #255	; 0xff
 8000dd4:	0a64      	lsrs	r4, r4, #9
 8000dd6:	0e12      	lsrs	r2, r2, #24
 8000dd8:	4698      	mov	r8, r3
 8000dda:	d1db      	bne.n	8000d94 <__aeabi_fmul+0x44>
 8000ddc:	2c00      	cmp	r4, #0
 8000dde:	d000      	beq.n	8000de2 <__aeabi_fmul+0x92>
 8000de0:	e090      	b.n	8000f04 <__aeabi_fmul+0x1b4>
 8000de2:	4652      	mov	r2, sl
 8000de4:	2301      	movs	r3, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4692      	mov	sl, r2
 8000dea:	2001      	movs	r0, #1
 8000dec:	e7db      	b.n	8000da6 <__aeabi_fmul+0x56>
 8000dee:	464c      	mov	r4, r9
 8000df0:	4658      	mov	r0, fp
 8000df2:	0017      	movs	r7, r2
 8000df4:	2802      	cmp	r0, #2
 8000df6:	d024      	beq.n	8000e42 <__aeabi_fmul+0xf2>
 8000df8:	2803      	cmp	r0, #3
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_fmul+0xae>
 8000dfc:	e0cf      	b.n	8000f9e <__aeabi_fmul+0x24e>
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2300      	movs	r3, #0
 8000e02:	2801      	cmp	r0, #1
 8000e04:	d14d      	bne.n	8000ea2 <__aeabi_fmul+0x152>
 8000e06:	0258      	lsls	r0, r3, #9
 8000e08:	05d2      	lsls	r2, r2, #23
 8000e0a:	0a40      	lsrs	r0, r0, #9
 8000e0c:	07ff      	lsls	r7, r7, #31
 8000e0e:	4310      	orrs	r0, r2
 8000e10:	4338      	orrs	r0, r7
 8000e12:	b003      	add	sp, #12
 8000e14:	bc3c      	pop	{r2, r3, r4, r5}
 8000e16:	4690      	mov	r8, r2
 8000e18:	4699      	mov	r9, r3
 8000e1a:	46a2      	mov	sl, r4
 8000e1c:	46ab      	mov	fp, r5
 8000e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d15b      	bne.n	8000edc <__aeabi_fmul+0x18c>
 8000e24:	2304      	movs	r3, #4
 8000e26:	469a      	mov	sl, r3
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	2500      	movs	r5, #0
 8000e2c:	469b      	mov	fp, r3
 8000e2e:	e7aa      	b.n	8000d86 <__aeabi_fmul+0x36>
 8000e30:	35ff      	adds	r5, #255	; 0xff
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	d160      	bne.n	8000ef8 <__aeabi_fmul+0x1a8>
 8000e36:	4652      	mov	r2, sl
 8000e38:	2302      	movs	r3, #2
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	4692      	mov	sl, r2
 8000e3e:	2002      	movs	r0, #2
 8000e40:	e7b1      	b.n	8000da6 <__aeabi_fmul+0x56>
 8000e42:	22ff      	movs	r2, #255	; 0xff
 8000e44:	2300      	movs	r3, #0
 8000e46:	e7de      	b.n	8000e06 <__aeabi_fmul+0xb6>
 8000e48:	464b      	mov	r3, r9
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	469c      	mov	ip, r3
 8000e4e:	464b      	mov	r3, r9
 8000e50:	0426      	lsls	r6, r4, #16
 8000e52:	0c36      	lsrs	r6, r6, #16
 8000e54:	0418      	lsls	r0, r3, #16
 8000e56:	4661      	mov	r1, ip
 8000e58:	0033      	movs	r3, r6
 8000e5a:	0c22      	lsrs	r2, r4, #16
 8000e5c:	4664      	mov	r4, ip
 8000e5e:	0c00      	lsrs	r0, r0, #16
 8000e60:	4343      	muls	r3, r0
 8000e62:	434e      	muls	r6, r1
 8000e64:	4350      	muls	r0, r2
 8000e66:	4354      	muls	r4, r2
 8000e68:	1980      	adds	r0, r0, r6
 8000e6a:	0c1a      	lsrs	r2, r3, #16
 8000e6c:	1812      	adds	r2, r2, r0
 8000e6e:	4296      	cmp	r6, r2
 8000e70:	d903      	bls.n	8000e7a <__aeabi_fmul+0x12a>
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	0249      	lsls	r1, r1, #9
 8000e76:	468c      	mov	ip, r1
 8000e78:	4464      	add	r4, ip
 8000e7a:	041b      	lsls	r3, r3, #16
 8000e7c:	0c1b      	lsrs	r3, r3, #16
 8000e7e:	0410      	lsls	r0, r2, #16
 8000e80:	18c0      	adds	r0, r0, r3
 8000e82:	0183      	lsls	r3, r0, #6
 8000e84:	1e5e      	subs	r6, r3, #1
 8000e86:	41b3      	sbcs	r3, r6
 8000e88:	0e80      	lsrs	r0, r0, #26
 8000e8a:	4318      	orrs	r0, r3
 8000e8c:	0c13      	lsrs	r3, r2, #16
 8000e8e:	191b      	adds	r3, r3, r4
 8000e90:	019b      	lsls	r3, r3, #6
 8000e92:	4303      	orrs	r3, r0
 8000e94:	001c      	movs	r4, r3
 8000e96:	0123      	lsls	r3, r4, #4
 8000e98:	d579      	bpl.n	8000f8e <__aeabi_fmul+0x23e>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	0862      	lsrs	r2, r4, #1
 8000e9e:	401c      	ands	r4, r3
 8000ea0:	4314      	orrs	r4, r2
 8000ea2:	9a01      	ldr	r2, [sp, #4]
 8000ea4:	327f      	adds	r2, #127	; 0x7f
 8000ea6:	2a00      	cmp	r2, #0
 8000ea8:	dd4d      	ble.n	8000f46 <__aeabi_fmul+0x1f6>
 8000eaa:	0763      	lsls	r3, r4, #29
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fmul+0x168>
 8000eae:	230f      	movs	r3, #15
 8000eb0:	4023      	ands	r3, r4
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d000      	beq.n	8000eb8 <__aeabi_fmul+0x168>
 8000eb6:	3404      	adds	r4, #4
 8000eb8:	0123      	lsls	r3, r4, #4
 8000eba:	d503      	bpl.n	8000ec4 <__aeabi_fmul+0x174>
 8000ebc:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <__aeabi_fmul+0x260>)
 8000ebe:	9a01      	ldr	r2, [sp, #4]
 8000ec0:	401c      	ands	r4, r3
 8000ec2:	3280      	adds	r2, #128	; 0x80
 8000ec4:	2afe      	cmp	r2, #254	; 0xfe
 8000ec6:	dcbc      	bgt.n	8000e42 <__aeabi_fmul+0xf2>
 8000ec8:	01a3      	lsls	r3, r4, #6
 8000eca:	0a5b      	lsrs	r3, r3, #9
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	e79a      	b.n	8000e06 <__aeabi_fmul+0xb6>
 8000ed0:	230c      	movs	r3, #12
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	3b09      	subs	r3, #9
 8000ed6:	25ff      	movs	r5, #255	; 0xff
 8000ed8:	469b      	mov	fp, r3
 8000eda:	e754      	b.n	8000d86 <__aeabi_fmul+0x36>
 8000edc:	0018      	movs	r0, r3
 8000ede:	f002 f80b 	bl	8002ef8 <__clzsi2>
 8000ee2:	464a      	mov	r2, r9
 8000ee4:	1f43      	subs	r3, r0, #5
 8000ee6:	2576      	movs	r5, #118	; 0x76
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	2300      	movs	r3, #0
 8000eec:	426d      	negs	r5, r5
 8000eee:	4691      	mov	r9, r2
 8000ef0:	1a2d      	subs	r5, r5, r0
 8000ef2:	469a      	mov	sl, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	e746      	b.n	8000d86 <__aeabi_fmul+0x36>
 8000ef8:	4652      	mov	r2, sl
 8000efa:	2303      	movs	r3, #3
 8000efc:	431a      	orrs	r2, r3
 8000efe:	4692      	mov	sl, r2
 8000f00:	2003      	movs	r0, #3
 8000f02:	e750      	b.n	8000da6 <__aeabi_fmul+0x56>
 8000f04:	0020      	movs	r0, r4
 8000f06:	f001 fff7 	bl	8002ef8 <__clzsi2>
 8000f0a:	1f43      	subs	r3, r0, #5
 8000f0c:	1a2d      	subs	r5, r5, r0
 8000f0e:	409c      	lsls	r4, r3
 8000f10:	3d76      	subs	r5, #118	; 0x76
 8000f12:	2000      	movs	r0, #0
 8000f14:	e747      	b.n	8000da6 <__aeabi_fmul+0x56>
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	2700      	movs	r7, #0
 8000f1a:	03db      	lsls	r3, r3, #15
 8000f1c:	22ff      	movs	r2, #255	; 0xff
 8000f1e:	e772      	b.n	8000e06 <__aeabi_fmul+0xb6>
 8000f20:	4642      	mov	r2, r8
 8000f22:	e766      	b.n	8000df2 <__aeabi_fmul+0xa2>
 8000f24:	464c      	mov	r4, r9
 8000f26:	0032      	movs	r2, r6
 8000f28:	4658      	mov	r0, fp
 8000f2a:	e762      	b.n	8000df2 <__aeabi_fmul+0xa2>
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	464a      	mov	r2, r9
 8000f30:	03db      	lsls	r3, r3, #15
 8000f32:	421a      	tst	r2, r3
 8000f34:	d022      	beq.n	8000f7c <__aeabi_fmul+0x22c>
 8000f36:	421c      	tst	r4, r3
 8000f38:	d120      	bne.n	8000f7c <__aeabi_fmul+0x22c>
 8000f3a:	4323      	orrs	r3, r4
 8000f3c:	025b      	lsls	r3, r3, #9
 8000f3e:	0a5b      	lsrs	r3, r3, #9
 8000f40:	4647      	mov	r7, r8
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	e75f      	b.n	8000e06 <__aeabi_fmul+0xb6>
 8000f46:	2301      	movs	r3, #1
 8000f48:	1a9a      	subs	r2, r3, r2
 8000f4a:	2a1b      	cmp	r2, #27
 8000f4c:	dc21      	bgt.n	8000f92 <__aeabi_fmul+0x242>
 8000f4e:	0023      	movs	r3, r4
 8000f50:	9901      	ldr	r1, [sp, #4]
 8000f52:	40d3      	lsrs	r3, r2
 8000f54:	319e      	adds	r1, #158	; 0x9e
 8000f56:	408c      	lsls	r4, r1
 8000f58:	001a      	movs	r2, r3
 8000f5a:	0023      	movs	r3, r4
 8000f5c:	1e5c      	subs	r4, r3, #1
 8000f5e:	41a3      	sbcs	r3, r4
 8000f60:	4313      	orrs	r3, r2
 8000f62:	075a      	lsls	r2, r3, #29
 8000f64:	d004      	beq.n	8000f70 <__aeabi_fmul+0x220>
 8000f66:	220f      	movs	r2, #15
 8000f68:	401a      	ands	r2, r3
 8000f6a:	2a04      	cmp	r2, #4
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_fmul+0x220>
 8000f6e:	3304      	adds	r3, #4
 8000f70:	015a      	lsls	r2, r3, #5
 8000f72:	d411      	bmi.n	8000f98 <__aeabi_fmul+0x248>
 8000f74:	019b      	lsls	r3, r3, #6
 8000f76:	0a5b      	lsrs	r3, r3, #9
 8000f78:	2200      	movs	r2, #0
 8000f7a:	e744      	b.n	8000e06 <__aeabi_fmul+0xb6>
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	464a      	mov	r2, r9
 8000f80:	03db      	lsls	r3, r3, #15
 8000f82:	4313      	orrs	r3, r2
 8000f84:	025b      	lsls	r3, r3, #9
 8000f86:	0a5b      	lsrs	r3, r3, #9
 8000f88:	0037      	movs	r7, r6
 8000f8a:	22ff      	movs	r2, #255	; 0xff
 8000f8c:	e73b      	b.n	8000e06 <__aeabi_fmul+0xb6>
 8000f8e:	9501      	str	r5, [sp, #4]
 8000f90:	e787      	b.n	8000ea2 <__aeabi_fmul+0x152>
 8000f92:	2200      	movs	r2, #0
 8000f94:	2300      	movs	r3, #0
 8000f96:	e736      	b.n	8000e06 <__aeabi_fmul+0xb6>
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e733      	b.n	8000e06 <__aeabi_fmul+0xb6>
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	03db      	lsls	r3, r3, #15
 8000fa2:	4323      	orrs	r3, r4
 8000fa4:	025b      	lsls	r3, r3, #9
 8000fa6:	0a5b      	lsrs	r3, r3, #9
 8000fa8:	22ff      	movs	r2, #255	; 0xff
 8000faa:	e72c      	b.n	8000e06 <__aeabi_fmul+0xb6>
 8000fac:	0800b2f8 	.word	0x0800b2f8
 8000fb0:	f7ffffff 	.word	0xf7ffffff

08000fb4 <__aeabi_fsub>:
 8000fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb6:	4647      	mov	r7, r8
 8000fb8:	46ce      	mov	lr, r9
 8000fba:	0044      	lsls	r4, r0, #1
 8000fbc:	0fc2      	lsrs	r2, r0, #31
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	0247      	lsls	r7, r0, #9
 8000fc2:	0248      	lsls	r0, r1, #9
 8000fc4:	0a40      	lsrs	r0, r0, #9
 8000fc6:	4684      	mov	ip, r0
 8000fc8:	4666      	mov	r6, ip
 8000fca:	0048      	lsls	r0, r1, #1
 8000fcc:	0a7f      	lsrs	r7, r7, #9
 8000fce:	0e24      	lsrs	r4, r4, #24
 8000fd0:	00f6      	lsls	r6, r6, #3
 8000fd2:	0025      	movs	r5, r4
 8000fd4:	4690      	mov	r8, r2
 8000fd6:	00fb      	lsls	r3, r7, #3
 8000fd8:	0e00      	lsrs	r0, r0, #24
 8000fda:	0fc9      	lsrs	r1, r1, #31
 8000fdc:	46b1      	mov	r9, r6
 8000fde:	28ff      	cmp	r0, #255	; 0xff
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_fsub+0x30>
 8000fe2:	e085      	b.n	80010f0 <__aeabi_fsub+0x13c>
 8000fe4:	2601      	movs	r6, #1
 8000fe6:	4071      	eors	r1, r6
 8000fe8:	1a26      	subs	r6, r4, r0
 8000fea:	4291      	cmp	r1, r2
 8000fec:	d057      	beq.n	800109e <__aeabi_fsub+0xea>
 8000fee:	2e00      	cmp	r6, #0
 8000ff0:	dd43      	ble.n	800107a <__aeabi_fsub+0xc6>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d000      	beq.n	8000ff8 <__aeabi_fsub+0x44>
 8000ff6:	e07f      	b.n	80010f8 <__aeabi_fsub+0x144>
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	2900      	cmp	r1, #0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_fsub+0x4c>
 8000ffe:	e0aa      	b.n	8001156 <__aeabi_fsub+0x1a2>
 8001000:	3e01      	subs	r6, #1
 8001002:	2e00      	cmp	r6, #0
 8001004:	d000      	beq.n	8001008 <__aeabi_fsub+0x54>
 8001006:	e0f7      	b.n	80011f8 <__aeabi_fsub+0x244>
 8001008:	1a5b      	subs	r3, r3, r1
 800100a:	015a      	lsls	r2, r3, #5
 800100c:	d400      	bmi.n	8001010 <__aeabi_fsub+0x5c>
 800100e:	e08b      	b.n	8001128 <__aeabi_fsub+0x174>
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	099c      	lsrs	r4, r3, #6
 8001014:	0020      	movs	r0, r4
 8001016:	f001 ff6f 	bl	8002ef8 <__clzsi2>
 800101a:	3805      	subs	r0, #5
 800101c:	4084      	lsls	r4, r0
 800101e:	4285      	cmp	r5, r0
 8001020:	dd00      	ble.n	8001024 <__aeabi_fsub+0x70>
 8001022:	e0d3      	b.n	80011cc <__aeabi_fsub+0x218>
 8001024:	1b45      	subs	r5, r0, r5
 8001026:	0023      	movs	r3, r4
 8001028:	2020      	movs	r0, #32
 800102a:	3501      	adds	r5, #1
 800102c:	40eb      	lsrs	r3, r5
 800102e:	1b45      	subs	r5, r0, r5
 8001030:	40ac      	lsls	r4, r5
 8001032:	1e62      	subs	r2, r4, #1
 8001034:	4194      	sbcs	r4, r2
 8001036:	4323      	orrs	r3, r4
 8001038:	2407      	movs	r4, #7
 800103a:	2500      	movs	r5, #0
 800103c:	401c      	ands	r4, r3
 800103e:	2201      	movs	r2, #1
 8001040:	4641      	mov	r1, r8
 8001042:	400a      	ands	r2, r1
 8001044:	2c00      	cmp	r4, #0
 8001046:	d004      	beq.n	8001052 <__aeabi_fsub+0x9e>
 8001048:	210f      	movs	r1, #15
 800104a:	4019      	ands	r1, r3
 800104c:	2904      	cmp	r1, #4
 800104e:	d000      	beq.n	8001052 <__aeabi_fsub+0x9e>
 8001050:	3304      	adds	r3, #4
 8001052:	0159      	lsls	r1, r3, #5
 8001054:	d400      	bmi.n	8001058 <__aeabi_fsub+0xa4>
 8001056:	e080      	b.n	800115a <__aeabi_fsub+0x1a6>
 8001058:	3501      	adds	r5, #1
 800105a:	b2ec      	uxtb	r4, r5
 800105c:	2dff      	cmp	r5, #255	; 0xff
 800105e:	d000      	beq.n	8001062 <__aeabi_fsub+0xae>
 8001060:	e0a3      	b.n	80011aa <__aeabi_fsub+0x1f6>
 8001062:	24ff      	movs	r4, #255	; 0xff
 8001064:	2300      	movs	r3, #0
 8001066:	025b      	lsls	r3, r3, #9
 8001068:	05e4      	lsls	r4, r4, #23
 800106a:	0a58      	lsrs	r0, r3, #9
 800106c:	07d2      	lsls	r2, r2, #31
 800106e:	4320      	orrs	r0, r4
 8001070:	4310      	orrs	r0, r2
 8001072:	bc0c      	pop	{r2, r3}
 8001074:	4690      	mov	r8, r2
 8001076:	4699      	mov	r9, r3
 8001078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800107a:	2e00      	cmp	r6, #0
 800107c:	d174      	bne.n	8001168 <__aeabi_fsub+0x1b4>
 800107e:	1c60      	adds	r0, r4, #1
 8001080:	b2c0      	uxtb	r0, r0
 8001082:	2801      	cmp	r0, #1
 8001084:	dc00      	bgt.n	8001088 <__aeabi_fsub+0xd4>
 8001086:	e0a7      	b.n	80011d8 <__aeabi_fsub+0x224>
 8001088:	464a      	mov	r2, r9
 800108a:	1a9c      	subs	r4, r3, r2
 800108c:	0162      	lsls	r2, r4, #5
 800108e:	d500      	bpl.n	8001092 <__aeabi_fsub+0xde>
 8001090:	e0b6      	b.n	8001200 <__aeabi_fsub+0x24c>
 8001092:	2c00      	cmp	r4, #0
 8001094:	d1be      	bne.n	8001014 <__aeabi_fsub+0x60>
 8001096:	2200      	movs	r2, #0
 8001098:	2400      	movs	r4, #0
 800109a:	2300      	movs	r3, #0
 800109c:	e7e3      	b.n	8001066 <__aeabi_fsub+0xb2>
 800109e:	2e00      	cmp	r6, #0
 80010a0:	dc00      	bgt.n	80010a4 <__aeabi_fsub+0xf0>
 80010a2:	e085      	b.n	80011b0 <__aeabi_fsub+0x1fc>
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d046      	beq.n	8001136 <__aeabi_fsub+0x182>
 80010a8:	2cff      	cmp	r4, #255	; 0xff
 80010aa:	d049      	beq.n	8001140 <__aeabi_fsub+0x18c>
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	4648      	mov	r0, r9
 80010b0:	04d2      	lsls	r2, r2, #19
 80010b2:	4310      	orrs	r0, r2
 80010b4:	4681      	mov	r9, r0
 80010b6:	2201      	movs	r2, #1
 80010b8:	2e1b      	cmp	r6, #27
 80010ba:	dc09      	bgt.n	80010d0 <__aeabi_fsub+0x11c>
 80010bc:	2020      	movs	r0, #32
 80010be:	464c      	mov	r4, r9
 80010c0:	1b80      	subs	r0, r0, r6
 80010c2:	4084      	lsls	r4, r0
 80010c4:	464a      	mov	r2, r9
 80010c6:	0020      	movs	r0, r4
 80010c8:	40f2      	lsrs	r2, r6
 80010ca:	1e44      	subs	r4, r0, #1
 80010cc:	41a0      	sbcs	r0, r4
 80010ce:	4302      	orrs	r2, r0
 80010d0:	189b      	adds	r3, r3, r2
 80010d2:	015a      	lsls	r2, r3, #5
 80010d4:	d528      	bpl.n	8001128 <__aeabi_fsub+0x174>
 80010d6:	3501      	adds	r5, #1
 80010d8:	2dff      	cmp	r5, #255	; 0xff
 80010da:	d100      	bne.n	80010de <__aeabi_fsub+0x12a>
 80010dc:	e0a8      	b.n	8001230 <__aeabi_fsub+0x27c>
 80010de:	2201      	movs	r2, #1
 80010e0:	2407      	movs	r4, #7
 80010e2:	4994      	ldr	r1, [pc, #592]	; (8001334 <__aeabi_fsub+0x380>)
 80010e4:	401a      	ands	r2, r3
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	400b      	ands	r3, r1
 80010ea:	4313      	orrs	r3, r2
 80010ec:	401c      	ands	r4, r3
 80010ee:	e7a6      	b.n	800103e <__aeabi_fsub+0x8a>
 80010f0:	2e00      	cmp	r6, #0
 80010f2:	d000      	beq.n	80010f6 <__aeabi_fsub+0x142>
 80010f4:	e778      	b.n	8000fe8 <__aeabi_fsub+0x34>
 80010f6:	e775      	b.n	8000fe4 <__aeabi_fsub+0x30>
 80010f8:	2cff      	cmp	r4, #255	; 0xff
 80010fa:	d054      	beq.n	80011a6 <__aeabi_fsub+0x1f2>
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	4649      	mov	r1, r9
 8001100:	04d2      	lsls	r2, r2, #19
 8001102:	4311      	orrs	r1, r2
 8001104:	4689      	mov	r9, r1
 8001106:	2201      	movs	r2, #1
 8001108:	2e1b      	cmp	r6, #27
 800110a:	dc09      	bgt.n	8001120 <__aeabi_fsub+0x16c>
 800110c:	2120      	movs	r1, #32
 800110e:	4648      	mov	r0, r9
 8001110:	1b89      	subs	r1, r1, r6
 8001112:	4088      	lsls	r0, r1
 8001114:	464a      	mov	r2, r9
 8001116:	0001      	movs	r1, r0
 8001118:	40f2      	lsrs	r2, r6
 800111a:	1e48      	subs	r0, r1, #1
 800111c:	4181      	sbcs	r1, r0
 800111e:	430a      	orrs	r2, r1
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	015a      	lsls	r2, r3, #5
 8001124:	d500      	bpl.n	8001128 <__aeabi_fsub+0x174>
 8001126:	e773      	b.n	8001010 <__aeabi_fsub+0x5c>
 8001128:	2201      	movs	r2, #1
 800112a:	4641      	mov	r1, r8
 800112c:	400a      	ands	r2, r1
 800112e:	0759      	lsls	r1, r3, #29
 8001130:	d000      	beq.n	8001134 <__aeabi_fsub+0x180>
 8001132:	e789      	b.n	8001048 <__aeabi_fsub+0x94>
 8001134:	e011      	b.n	800115a <__aeabi_fsub+0x1a6>
 8001136:	4648      	mov	r0, r9
 8001138:	2800      	cmp	r0, #0
 800113a:	d158      	bne.n	80011ee <__aeabi_fsub+0x23a>
 800113c:	2cff      	cmp	r4, #255	; 0xff
 800113e:	d10c      	bne.n	800115a <__aeabi_fsub+0x1a6>
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <__aeabi_fsub+0x194>
 8001146:	e78c      	b.n	8001062 <__aeabi_fsub+0xae>
 8001148:	2080      	movs	r0, #128	; 0x80
 800114a:	03c0      	lsls	r0, r0, #15
 800114c:	4303      	orrs	r3, r0
 800114e:	025b      	lsls	r3, r3, #9
 8001150:	0a5b      	lsrs	r3, r3, #9
 8001152:	24ff      	movs	r4, #255	; 0xff
 8001154:	e787      	b.n	8001066 <__aeabi_fsub+0xb2>
 8001156:	2cff      	cmp	r4, #255	; 0xff
 8001158:	d025      	beq.n	80011a6 <__aeabi_fsub+0x1f2>
 800115a:	08db      	lsrs	r3, r3, #3
 800115c:	2dff      	cmp	r5, #255	; 0xff
 800115e:	d0f0      	beq.n	8001142 <__aeabi_fsub+0x18e>
 8001160:	025b      	lsls	r3, r3, #9
 8001162:	0a5b      	lsrs	r3, r3, #9
 8001164:	b2ec      	uxtb	r4, r5
 8001166:	e77e      	b.n	8001066 <__aeabi_fsub+0xb2>
 8001168:	2c00      	cmp	r4, #0
 800116a:	d04d      	beq.n	8001208 <__aeabi_fsub+0x254>
 800116c:	28ff      	cmp	r0, #255	; 0xff
 800116e:	d018      	beq.n	80011a2 <__aeabi_fsub+0x1ee>
 8001170:	2480      	movs	r4, #128	; 0x80
 8001172:	04e4      	lsls	r4, r4, #19
 8001174:	4272      	negs	r2, r6
 8001176:	4323      	orrs	r3, r4
 8001178:	2a1b      	cmp	r2, #27
 800117a:	dd00      	ble.n	800117e <__aeabi_fsub+0x1ca>
 800117c:	e0c4      	b.n	8001308 <__aeabi_fsub+0x354>
 800117e:	001c      	movs	r4, r3
 8001180:	2520      	movs	r5, #32
 8001182:	40d4      	lsrs	r4, r2
 8001184:	1aaa      	subs	r2, r5, r2
 8001186:	4093      	lsls	r3, r2
 8001188:	1e5a      	subs	r2, r3, #1
 800118a:	4193      	sbcs	r3, r2
 800118c:	4323      	orrs	r3, r4
 800118e:	464a      	mov	r2, r9
 8001190:	0005      	movs	r5, r0
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	4688      	mov	r8, r1
 8001196:	e738      	b.n	800100a <__aeabi_fsub+0x56>
 8001198:	1c72      	adds	r2, r6, #1
 800119a:	d0f8      	beq.n	800118e <__aeabi_fsub+0x1da>
 800119c:	43f2      	mvns	r2, r6
 800119e:	28ff      	cmp	r0, #255	; 0xff
 80011a0:	d1ea      	bne.n	8001178 <__aeabi_fsub+0x1c4>
 80011a2:	000a      	movs	r2, r1
 80011a4:	464b      	mov	r3, r9
 80011a6:	25ff      	movs	r5, #255	; 0xff
 80011a8:	e7d7      	b.n	800115a <__aeabi_fsub+0x1a6>
 80011aa:	019b      	lsls	r3, r3, #6
 80011ac:	0a5b      	lsrs	r3, r3, #9
 80011ae:	e75a      	b.n	8001066 <__aeabi_fsub+0xb2>
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d141      	bne.n	8001238 <__aeabi_fsub+0x284>
 80011b4:	1c65      	adds	r5, r4, #1
 80011b6:	b2e9      	uxtb	r1, r5
 80011b8:	2901      	cmp	r1, #1
 80011ba:	dd45      	ble.n	8001248 <__aeabi_fsub+0x294>
 80011bc:	2dff      	cmp	r5, #255	; 0xff
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x20e>
 80011c0:	e74f      	b.n	8001062 <__aeabi_fsub+0xae>
 80011c2:	2407      	movs	r4, #7
 80011c4:	444b      	add	r3, r9
 80011c6:	085b      	lsrs	r3, r3, #1
 80011c8:	401c      	ands	r4, r3
 80011ca:	e738      	b.n	800103e <__aeabi_fsub+0x8a>
 80011cc:	2207      	movs	r2, #7
 80011ce:	4b5a      	ldr	r3, [pc, #360]	; (8001338 <__aeabi_fsub+0x384>)
 80011d0:	1a2d      	subs	r5, r5, r0
 80011d2:	4023      	ands	r3, r4
 80011d4:	4014      	ands	r4, r2
 80011d6:	e732      	b.n	800103e <__aeabi_fsub+0x8a>
 80011d8:	2c00      	cmp	r4, #0
 80011da:	d11d      	bne.n	8001218 <__aeabi_fsub+0x264>
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d17a      	bne.n	80012d6 <__aeabi_fsub+0x322>
 80011e0:	464b      	mov	r3, r9
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d100      	bne.n	80011e8 <__aeabi_fsub+0x234>
 80011e6:	e091      	b.n	800130c <__aeabi_fsub+0x358>
 80011e8:	000a      	movs	r2, r1
 80011ea:	2500      	movs	r5, #0
 80011ec:	e7b5      	b.n	800115a <__aeabi_fsub+0x1a6>
 80011ee:	3e01      	subs	r6, #1
 80011f0:	2e00      	cmp	r6, #0
 80011f2:	d119      	bne.n	8001228 <__aeabi_fsub+0x274>
 80011f4:	444b      	add	r3, r9
 80011f6:	e76c      	b.n	80010d2 <__aeabi_fsub+0x11e>
 80011f8:	2cff      	cmp	r4, #255	; 0xff
 80011fa:	d184      	bne.n	8001106 <__aeabi_fsub+0x152>
 80011fc:	25ff      	movs	r5, #255	; 0xff
 80011fe:	e7ac      	b.n	800115a <__aeabi_fsub+0x1a6>
 8001200:	464a      	mov	r2, r9
 8001202:	4688      	mov	r8, r1
 8001204:	1ad4      	subs	r4, r2, r3
 8001206:	e705      	b.n	8001014 <__aeabi_fsub+0x60>
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1c5      	bne.n	8001198 <__aeabi_fsub+0x1e4>
 800120c:	000a      	movs	r2, r1
 800120e:	28ff      	cmp	r0, #255	; 0xff
 8001210:	d0c8      	beq.n	80011a4 <__aeabi_fsub+0x1f0>
 8001212:	0005      	movs	r5, r0
 8001214:	464b      	mov	r3, r9
 8001216:	e7a0      	b.n	800115a <__aeabi_fsub+0x1a6>
 8001218:	2b00      	cmp	r3, #0
 800121a:	d149      	bne.n	80012b0 <__aeabi_fsub+0x2fc>
 800121c:	464b      	mov	r3, r9
 800121e:	2b00      	cmp	r3, #0
 8001220:	d077      	beq.n	8001312 <__aeabi_fsub+0x35e>
 8001222:	000a      	movs	r2, r1
 8001224:	25ff      	movs	r5, #255	; 0xff
 8001226:	e798      	b.n	800115a <__aeabi_fsub+0x1a6>
 8001228:	2cff      	cmp	r4, #255	; 0xff
 800122a:	d000      	beq.n	800122e <__aeabi_fsub+0x27a>
 800122c:	e743      	b.n	80010b6 <__aeabi_fsub+0x102>
 800122e:	e787      	b.n	8001140 <__aeabi_fsub+0x18c>
 8001230:	000a      	movs	r2, r1
 8001232:	24ff      	movs	r4, #255	; 0xff
 8001234:	2300      	movs	r3, #0
 8001236:	e716      	b.n	8001066 <__aeabi_fsub+0xb2>
 8001238:	2c00      	cmp	r4, #0
 800123a:	d115      	bne.n	8001268 <__aeabi_fsub+0x2b4>
 800123c:	2b00      	cmp	r3, #0
 800123e:	d157      	bne.n	80012f0 <__aeabi_fsub+0x33c>
 8001240:	28ff      	cmp	r0, #255	; 0xff
 8001242:	d1e6      	bne.n	8001212 <__aeabi_fsub+0x25e>
 8001244:	464b      	mov	r3, r9
 8001246:	e77b      	b.n	8001140 <__aeabi_fsub+0x18c>
 8001248:	2c00      	cmp	r4, #0
 800124a:	d120      	bne.n	800128e <__aeabi_fsub+0x2da>
 800124c:	2b00      	cmp	r3, #0
 800124e:	d057      	beq.n	8001300 <__aeabi_fsub+0x34c>
 8001250:	4649      	mov	r1, r9
 8001252:	2900      	cmp	r1, #0
 8001254:	d053      	beq.n	80012fe <__aeabi_fsub+0x34a>
 8001256:	444b      	add	r3, r9
 8001258:	015a      	lsls	r2, r3, #5
 800125a:	d568      	bpl.n	800132e <__aeabi_fsub+0x37a>
 800125c:	2407      	movs	r4, #7
 800125e:	4a36      	ldr	r2, [pc, #216]	; (8001338 <__aeabi_fsub+0x384>)
 8001260:	401c      	ands	r4, r3
 8001262:	2501      	movs	r5, #1
 8001264:	4013      	ands	r3, r2
 8001266:	e6ea      	b.n	800103e <__aeabi_fsub+0x8a>
 8001268:	28ff      	cmp	r0, #255	; 0xff
 800126a:	d0eb      	beq.n	8001244 <__aeabi_fsub+0x290>
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	04d2      	lsls	r2, r2, #19
 8001270:	4276      	negs	r6, r6
 8001272:	4313      	orrs	r3, r2
 8001274:	2e1b      	cmp	r6, #27
 8001276:	dc53      	bgt.n	8001320 <__aeabi_fsub+0x36c>
 8001278:	2520      	movs	r5, #32
 800127a:	1bad      	subs	r5, r5, r6
 800127c:	001a      	movs	r2, r3
 800127e:	40ab      	lsls	r3, r5
 8001280:	40f2      	lsrs	r2, r6
 8001282:	1e5c      	subs	r4, r3, #1
 8001284:	41a3      	sbcs	r3, r4
 8001286:	4313      	orrs	r3, r2
 8001288:	444b      	add	r3, r9
 800128a:	0005      	movs	r5, r0
 800128c:	e721      	b.n	80010d2 <__aeabi_fsub+0x11e>
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0d8      	beq.n	8001244 <__aeabi_fsub+0x290>
 8001292:	4649      	mov	r1, r9
 8001294:	2900      	cmp	r1, #0
 8001296:	d100      	bne.n	800129a <__aeabi_fsub+0x2e6>
 8001298:	e752      	b.n	8001140 <__aeabi_fsub+0x18c>
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	03c9      	lsls	r1, r1, #15
 800129e:	420f      	tst	r7, r1
 80012a0:	d100      	bne.n	80012a4 <__aeabi_fsub+0x2f0>
 80012a2:	e74d      	b.n	8001140 <__aeabi_fsub+0x18c>
 80012a4:	4660      	mov	r0, ip
 80012a6:	4208      	tst	r0, r1
 80012a8:	d000      	beq.n	80012ac <__aeabi_fsub+0x2f8>
 80012aa:	e749      	b.n	8001140 <__aeabi_fsub+0x18c>
 80012ac:	464b      	mov	r3, r9
 80012ae:	e747      	b.n	8001140 <__aeabi_fsub+0x18c>
 80012b0:	4648      	mov	r0, r9
 80012b2:	25ff      	movs	r5, #255	; 0xff
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d100      	bne.n	80012ba <__aeabi_fsub+0x306>
 80012b8:	e74f      	b.n	800115a <__aeabi_fsub+0x1a6>
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	03d2      	lsls	r2, r2, #15
 80012be:	4217      	tst	r7, r2
 80012c0:	d004      	beq.n	80012cc <__aeabi_fsub+0x318>
 80012c2:	4660      	mov	r0, ip
 80012c4:	4210      	tst	r0, r2
 80012c6:	d101      	bne.n	80012cc <__aeabi_fsub+0x318>
 80012c8:	464b      	mov	r3, r9
 80012ca:	4688      	mov	r8, r1
 80012cc:	2201      	movs	r2, #1
 80012ce:	4641      	mov	r1, r8
 80012d0:	25ff      	movs	r5, #255	; 0xff
 80012d2:	400a      	ands	r2, r1
 80012d4:	e741      	b.n	800115a <__aeabi_fsub+0x1a6>
 80012d6:	4648      	mov	r0, r9
 80012d8:	2800      	cmp	r0, #0
 80012da:	d01f      	beq.n	800131c <__aeabi_fsub+0x368>
 80012dc:	1a1a      	subs	r2, r3, r0
 80012de:	0150      	lsls	r0, r2, #5
 80012e0:	d520      	bpl.n	8001324 <__aeabi_fsub+0x370>
 80012e2:	464a      	mov	r2, r9
 80012e4:	2407      	movs	r4, #7
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	401c      	ands	r4, r3
 80012ea:	4688      	mov	r8, r1
 80012ec:	2500      	movs	r5, #0
 80012ee:	e6a6      	b.n	800103e <__aeabi_fsub+0x8a>
 80012f0:	1c74      	adds	r4, r6, #1
 80012f2:	d0c9      	beq.n	8001288 <__aeabi_fsub+0x2d4>
 80012f4:	43f6      	mvns	r6, r6
 80012f6:	28ff      	cmp	r0, #255	; 0xff
 80012f8:	d1bc      	bne.n	8001274 <__aeabi_fsub+0x2c0>
 80012fa:	464b      	mov	r3, r9
 80012fc:	e720      	b.n	8001140 <__aeabi_fsub+0x18c>
 80012fe:	4699      	mov	r9, r3
 8001300:	464b      	mov	r3, r9
 8001302:	2500      	movs	r5, #0
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	e72b      	b.n	8001160 <__aeabi_fsub+0x1ac>
 8001308:	2301      	movs	r3, #1
 800130a:	e740      	b.n	800118e <__aeabi_fsub+0x1da>
 800130c:	2200      	movs	r2, #0
 800130e:	2300      	movs	r3, #0
 8001310:	e6a9      	b.n	8001066 <__aeabi_fsub+0xb2>
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	2200      	movs	r2, #0
 8001316:	03db      	lsls	r3, r3, #15
 8001318:	24ff      	movs	r4, #255	; 0xff
 800131a:	e6a4      	b.n	8001066 <__aeabi_fsub+0xb2>
 800131c:	2500      	movs	r5, #0
 800131e:	e71c      	b.n	800115a <__aeabi_fsub+0x1a6>
 8001320:	2301      	movs	r3, #1
 8001322:	e7b1      	b.n	8001288 <__aeabi_fsub+0x2d4>
 8001324:	2a00      	cmp	r2, #0
 8001326:	d0f1      	beq.n	800130c <__aeabi_fsub+0x358>
 8001328:	0013      	movs	r3, r2
 800132a:	2500      	movs	r5, #0
 800132c:	e6fc      	b.n	8001128 <__aeabi_fsub+0x174>
 800132e:	2500      	movs	r5, #0
 8001330:	e6fa      	b.n	8001128 <__aeabi_fsub+0x174>
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	7dffffff 	.word	0x7dffffff
 8001338:	fbffffff 	.word	0xfbffffff

0800133c <__aeabi_fcmpun>:
 800133c:	0242      	lsls	r2, r0, #9
 800133e:	024b      	lsls	r3, r1, #9
 8001340:	0040      	lsls	r0, r0, #1
 8001342:	0049      	lsls	r1, r1, #1
 8001344:	0a52      	lsrs	r2, r2, #9
 8001346:	0a5b      	lsrs	r3, r3, #9
 8001348:	0e09      	lsrs	r1, r1, #24
 800134a:	0e00      	lsrs	r0, r0, #24
 800134c:	28ff      	cmp	r0, #255	; 0xff
 800134e:	d006      	beq.n	800135e <__aeabi_fcmpun+0x22>
 8001350:	2000      	movs	r0, #0
 8001352:	29ff      	cmp	r1, #255	; 0xff
 8001354:	d102      	bne.n	800135c <__aeabi_fcmpun+0x20>
 8001356:	0018      	movs	r0, r3
 8001358:	1e43      	subs	r3, r0, #1
 800135a:	4198      	sbcs	r0, r3
 800135c:	4770      	bx	lr
 800135e:	38fe      	subs	r0, #254	; 0xfe
 8001360:	2a00      	cmp	r2, #0
 8001362:	d1fb      	bne.n	800135c <__aeabi_fcmpun+0x20>
 8001364:	e7f4      	b.n	8001350 <__aeabi_fcmpun+0x14>
 8001366:	46c0      	nop			; (mov r8, r8)

08001368 <__aeabi_f2iz>:
 8001368:	0241      	lsls	r1, r0, #9
 800136a:	0042      	lsls	r2, r0, #1
 800136c:	0fc3      	lsrs	r3, r0, #31
 800136e:	0a49      	lsrs	r1, r1, #9
 8001370:	0e12      	lsrs	r2, r2, #24
 8001372:	2000      	movs	r0, #0
 8001374:	2a7e      	cmp	r2, #126	; 0x7e
 8001376:	d90d      	bls.n	8001394 <__aeabi_f2iz+0x2c>
 8001378:	2a9d      	cmp	r2, #157	; 0x9d
 800137a:	d80c      	bhi.n	8001396 <__aeabi_f2iz+0x2e>
 800137c:	2080      	movs	r0, #128	; 0x80
 800137e:	0400      	lsls	r0, r0, #16
 8001380:	4301      	orrs	r1, r0
 8001382:	2a95      	cmp	r2, #149	; 0x95
 8001384:	dc0a      	bgt.n	800139c <__aeabi_f2iz+0x34>
 8001386:	2096      	movs	r0, #150	; 0x96
 8001388:	1a82      	subs	r2, r0, r2
 800138a:	40d1      	lsrs	r1, r2
 800138c:	4248      	negs	r0, r1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d100      	bne.n	8001394 <__aeabi_f2iz+0x2c>
 8001392:	0008      	movs	r0, r1
 8001394:	4770      	bx	lr
 8001396:	4a03      	ldr	r2, [pc, #12]	; (80013a4 <__aeabi_f2iz+0x3c>)
 8001398:	1898      	adds	r0, r3, r2
 800139a:	e7fb      	b.n	8001394 <__aeabi_f2iz+0x2c>
 800139c:	3a96      	subs	r2, #150	; 0x96
 800139e:	4091      	lsls	r1, r2
 80013a0:	e7f4      	b.n	800138c <__aeabi_f2iz+0x24>
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	7fffffff 	.word	0x7fffffff

080013a8 <__aeabi_i2f>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	2800      	cmp	r0, #0
 80013ac:	d03d      	beq.n	800142a <__aeabi_i2f+0x82>
 80013ae:	17c3      	asrs	r3, r0, #31
 80013b0:	18c5      	adds	r5, r0, r3
 80013b2:	405d      	eors	r5, r3
 80013b4:	0fc4      	lsrs	r4, r0, #31
 80013b6:	0028      	movs	r0, r5
 80013b8:	f001 fd9e 	bl	8002ef8 <__clzsi2>
 80013bc:	229e      	movs	r2, #158	; 0x9e
 80013be:	1a12      	subs	r2, r2, r0
 80013c0:	2a96      	cmp	r2, #150	; 0x96
 80013c2:	dc07      	bgt.n	80013d4 <__aeabi_i2f+0x2c>
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	2808      	cmp	r0, #8
 80013c8:	dd33      	ble.n	8001432 <__aeabi_i2f+0x8a>
 80013ca:	3808      	subs	r0, #8
 80013cc:	4085      	lsls	r5, r0
 80013ce:	0268      	lsls	r0, r5, #9
 80013d0:	0a40      	lsrs	r0, r0, #9
 80013d2:	e023      	b.n	800141c <__aeabi_i2f+0x74>
 80013d4:	2a99      	cmp	r2, #153	; 0x99
 80013d6:	dd0b      	ble.n	80013f0 <__aeabi_i2f+0x48>
 80013d8:	2305      	movs	r3, #5
 80013da:	0029      	movs	r1, r5
 80013dc:	1a1b      	subs	r3, r3, r0
 80013de:	40d9      	lsrs	r1, r3
 80013e0:	0003      	movs	r3, r0
 80013e2:	331b      	adds	r3, #27
 80013e4:	409d      	lsls	r5, r3
 80013e6:	002b      	movs	r3, r5
 80013e8:	1e5d      	subs	r5, r3, #1
 80013ea:	41ab      	sbcs	r3, r5
 80013ec:	4319      	orrs	r1, r3
 80013ee:	000d      	movs	r5, r1
 80013f0:	2805      	cmp	r0, #5
 80013f2:	dd01      	ble.n	80013f8 <__aeabi_i2f+0x50>
 80013f4:	1f43      	subs	r3, r0, #5
 80013f6:	409d      	lsls	r5, r3
 80013f8:	002b      	movs	r3, r5
 80013fa:	490f      	ldr	r1, [pc, #60]	; (8001438 <__aeabi_i2f+0x90>)
 80013fc:	400b      	ands	r3, r1
 80013fe:	076e      	lsls	r6, r5, #29
 8001400:	d009      	beq.n	8001416 <__aeabi_i2f+0x6e>
 8001402:	260f      	movs	r6, #15
 8001404:	4035      	ands	r5, r6
 8001406:	2d04      	cmp	r5, #4
 8001408:	d005      	beq.n	8001416 <__aeabi_i2f+0x6e>
 800140a:	3304      	adds	r3, #4
 800140c:	015d      	lsls	r5, r3, #5
 800140e:	d502      	bpl.n	8001416 <__aeabi_i2f+0x6e>
 8001410:	229f      	movs	r2, #159	; 0x9f
 8001412:	400b      	ands	r3, r1
 8001414:	1a12      	subs	r2, r2, r0
 8001416:	019b      	lsls	r3, r3, #6
 8001418:	0a58      	lsrs	r0, r3, #9
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	0240      	lsls	r0, r0, #9
 800141e:	05d2      	lsls	r2, r2, #23
 8001420:	0a40      	lsrs	r0, r0, #9
 8001422:	07e4      	lsls	r4, r4, #31
 8001424:	4310      	orrs	r0, r2
 8001426:	4320      	orrs	r0, r4
 8001428:	bd70      	pop	{r4, r5, r6, pc}
 800142a:	2400      	movs	r4, #0
 800142c:	2200      	movs	r2, #0
 800142e:	2000      	movs	r0, #0
 8001430:	e7f4      	b.n	800141c <__aeabi_i2f+0x74>
 8001432:	0268      	lsls	r0, r5, #9
 8001434:	0a40      	lsrs	r0, r0, #9
 8001436:	e7f1      	b.n	800141c <__aeabi_i2f+0x74>
 8001438:	fbffffff 	.word	0xfbffffff

0800143c <__aeabi_ui2f>:
 800143c:	b570      	push	{r4, r5, r6, lr}
 800143e:	1e04      	subs	r4, r0, #0
 8001440:	d034      	beq.n	80014ac <__aeabi_ui2f+0x70>
 8001442:	f001 fd59 	bl	8002ef8 <__clzsi2>
 8001446:	229e      	movs	r2, #158	; 0x9e
 8001448:	1a12      	subs	r2, r2, r0
 800144a:	2a96      	cmp	r2, #150	; 0x96
 800144c:	dc07      	bgt.n	800145e <__aeabi_ui2f+0x22>
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	2808      	cmp	r0, #8
 8001452:	dd2e      	ble.n	80014b2 <__aeabi_ui2f+0x76>
 8001454:	3808      	subs	r0, #8
 8001456:	4084      	lsls	r4, r0
 8001458:	0260      	lsls	r0, r4, #9
 800145a:	0a40      	lsrs	r0, r0, #9
 800145c:	e021      	b.n	80014a2 <__aeabi_ui2f+0x66>
 800145e:	2a99      	cmp	r2, #153	; 0x99
 8001460:	dd09      	ble.n	8001476 <__aeabi_ui2f+0x3a>
 8001462:	0003      	movs	r3, r0
 8001464:	0021      	movs	r1, r4
 8001466:	331b      	adds	r3, #27
 8001468:	4099      	lsls	r1, r3
 800146a:	1e4b      	subs	r3, r1, #1
 800146c:	4199      	sbcs	r1, r3
 800146e:	2305      	movs	r3, #5
 8001470:	1a1b      	subs	r3, r3, r0
 8001472:	40dc      	lsrs	r4, r3
 8001474:	430c      	orrs	r4, r1
 8001476:	2805      	cmp	r0, #5
 8001478:	dd01      	ble.n	800147e <__aeabi_ui2f+0x42>
 800147a:	1f43      	subs	r3, r0, #5
 800147c:	409c      	lsls	r4, r3
 800147e:	0023      	movs	r3, r4
 8001480:	490d      	ldr	r1, [pc, #52]	; (80014b8 <__aeabi_ui2f+0x7c>)
 8001482:	400b      	ands	r3, r1
 8001484:	0765      	lsls	r5, r4, #29
 8001486:	d009      	beq.n	800149c <__aeabi_ui2f+0x60>
 8001488:	250f      	movs	r5, #15
 800148a:	402c      	ands	r4, r5
 800148c:	2c04      	cmp	r4, #4
 800148e:	d005      	beq.n	800149c <__aeabi_ui2f+0x60>
 8001490:	3304      	adds	r3, #4
 8001492:	015c      	lsls	r4, r3, #5
 8001494:	d502      	bpl.n	800149c <__aeabi_ui2f+0x60>
 8001496:	229f      	movs	r2, #159	; 0x9f
 8001498:	400b      	ands	r3, r1
 800149a:	1a12      	subs	r2, r2, r0
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	0a58      	lsrs	r0, r3, #9
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	0240      	lsls	r0, r0, #9
 80014a4:	05d2      	lsls	r2, r2, #23
 80014a6:	0a40      	lsrs	r0, r0, #9
 80014a8:	4310      	orrs	r0, r2
 80014aa:	bd70      	pop	{r4, r5, r6, pc}
 80014ac:	2200      	movs	r2, #0
 80014ae:	2000      	movs	r0, #0
 80014b0:	e7f7      	b.n	80014a2 <__aeabi_ui2f+0x66>
 80014b2:	0260      	lsls	r0, r4, #9
 80014b4:	0a40      	lsrs	r0, r0, #9
 80014b6:	e7f4      	b.n	80014a2 <__aeabi_ui2f+0x66>
 80014b8:	fbffffff 	.word	0xfbffffff

080014bc <__aeabi_dadd>:
 80014bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014be:	464f      	mov	r7, r9
 80014c0:	4646      	mov	r6, r8
 80014c2:	46d6      	mov	lr, sl
 80014c4:	000c      	movs	r4, r1
 80014c6:	0309      	lsls	r1, r1, #12
 80014c8:	b5c0      	push	{r6, r7, lr}
 80014ca:	0a49      	lsrs	r1, r1, #9
 80014cc:	0f47      	lsrs	r7, r0, #29
 80014ce:	005e      	lsls	r6, r3, #1
 80014d0:	4339      	orrs	r1, r7
 80014d2:	031f      	lsls	r7, r3, #12
 80014d4:	0fdb      	lsrs	r3, r3, #31
 80014d6:	469c      	mov	ip, r3
 80014d8:	0065      	lsls	r5, r4, #1
 80014da:	0a7b      	lsrs	r3, r7, #9
 80014dc:	0f57      	lsrs	r7, r2, #29
 80014de:	431f      	orrs	r7, r3
 80014e0:	0d6d      	lsrs	r5, r5, #21
 80014e2:	0fe4      	lsrs	r4, r4, #31
 80014e4:	0d76      	lsrs	r6, r6, #21
 80014e6:	46a1      	mov	r9, r4
 80014e8:	00c0      	lsls	r0, r0, #3
 80014ea:	46b8      	mov	r8, r7
 80014ec:	00d2      	lsls	r2, r2, #3
 80014ee:	1bab      	subs	r3, r5, r6
 80014f0:	4564      	cmp	r4, ip
 80014f2:	d07b      	beq.n	80015ec <__aeabi_dadd+0x130>
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	dd5f      	ble.n	80015b8 <__aeabi_dadd+0xfc>
 80014f8:	2e00      	cmp	r6, #0
 80014fa:	d000      	beq.n	80014fe <__aeabi_dadd+0x42>
 80014fc:	e0a4      	b.n	8001648 <__aeabi_dadd+0x18c>
 80014fe:	003e      	movs	r6, r7
 8001500:	4316      	orrs	r6, r2
 8001502:	d100      	bne.n	8001506 <__aeabi_dadd+0x4a>
 8001504:	e112      	b.n	800172c <__aeabi_dadd+0x270>
 8001506:	1e5e      	subs	r6, r3, #1
 8001508:	2e00      	cmp	r6, #0
 800150a:	d000      	beq.n	800150e <__aeabi_dadd+0x52>
 800150c:	e19e      	b.n	800184c <__aeabi_dadd+0x390>
 800150e:	1a87      	subs	r7, r0, r2
 8001510:	4643      	mov	r3, r8
 8001512:	42b8      	cmp	r0, r7
 8001514:	4180      	sbcs	r0, r0
 8001516:	2501      	movs	r5, #1
 8001518:	1ac9      	subs	r1, r1, r3
 800151a:	4240      	negs	r0, r0
 800151c:	1a09      	subs	r1, r1, r0
 800151e:	020b      	lsls	r3, r1, #8
 8001520:	d400      	bmi.n	8001524 <__aeabi_dadd+0x68>
 8001522:	e131      	b.n	8001788 <__aeabi_dadd+0x2cc>
 8001524:	0249      	lsls	r1, r1, #9
 8001526:	0a4e      	lsrs	r6, r1, #9
 8001528:	2e00      	cmp	r6, #0
 800152a:	d100      	bne.n	800152e <__aeabi_dadd+0x72>
 800152c:	e16e      	b.n	800180c <__aeabi_dadd+0x350>
 800152e:	0030      	movs	r0, r6
 8001530:	f001 fce2 	bl	8002ef8 <__clzsi2>
 8001534:	0003      	movs	r3, r0
 8001536:	3b08      	subs	r3, #8
 8001538:	2b1f      	cmp	r3, #31
 800153a:	dd00      	ble.n	800153e <__aeabi_dadd+0x82>
 800153c:	e161      	b.n	8001802 <__aeabi_dadd+0x346>
 800153e:	2220      	movs	r2, #32
 8001540:	0039      	movs	r1, r7
 8001542:	1ad2      	subs	r2, r2, r3
 8001544:	409e      	lsls	r6, r3
 8001546:	40d1      	lsrs	r1, r2
 8001548:	409f      	lsls	r7, r3
 800154a:	430e      	orrs	r6, r1
 800154c:	429d      	cmp	r5, r3
 800154e:	dd00      	ble.n	8001552 <__aeabi_dadd+0x96>
 8001550:	e151      	b.n	80017f6 <__aeabi_dadd+0x33a>
 8001552:	1b5d      	subs	r5, r3, r5
 8001554:	1c6b      	adds	r3, r5, #1
 8001556:	2b1f      	cmp	r3, #31
 8001558:	dd00      	ble.n	800155c <__aeabi_dadd+0xa0>
 800155a:	e17c      	b.n	8001856 <__aeabi_dadd+0x39a>
 800155c:	2120      	movs	r1, #32
 800155e:	1ac9      	subs	r1, r1, r3
 8001560:	003d      	movs	r5, r7
 8001562:	0030      	movs	r0, r6
 8001564:	408f      	lsls	r7, r1
 8001566:	4088      	lsls	r0, r1
 8001568:	40dd      	lsrs	r5, r3
 800156a:	1e79      	subs	r1, r7, #1
 800156c:	418f      	sbcs	r7, r1
 800156e:	0031      	movs	r1, r6
 8001570:	2207      	movs	r2, #7
 8001572:	4328      	orrs	r0, r5
 8001574:	40d9      	lsrs	r1, r3
 8001576:	2500      	movs	r5, #0
 8001578:	4307      	orrs	r7, r0
 800157a:	403a      	ands	r2, r7
 800157c:	2a00      	cmp	r2, #0
 800157e:	d009      	beq.n	8001594 <__aeabi_dadd+0xd8>
 8001580:	230f      	movs	r3, #15
 8001582:	403b      	ands	r3, r7
 8001584:	2b04      	cmp	r3, #4
 8001586:	d005      	beq.n	8001594 <__aeabi_dadd+0xd8>
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	42bb      	cmp	r3, r7
 800158c:	41bf      	sbcs	r7, r7
 800158e:	427f      	negs	r7, r7
 8001590:	19c9      	adds	r1, r1, r7
 8001592:	001f      	movs	r7, r3
 8001594:	020b      	lsls	r3, r1, #8
 8001596:	d400      	bmi.n	800159a <__aeabi_dadd+0xde>
 8001598:	e226      	b.n	80019e8 <__aeabi_dadd+0x52c>
 800159a:	1c6a      	adds	r2, r5, #1
 800159c:	4bc6      	ldr	r3, [pc, #792]	; (80018b8 <__aeabi_dadd+0x3fc>)
 800159e:	0555      	lsls	r5, r2, #21
 80015a0:	0d6d      	lsrs	r5, r5, #21
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0xec>
 80015a6:	e106      	b.n	80017b6 <__aeabi_dadd+0x2fa>
 80015a8:	4ac4      	ldr	r2, [pc, #784]	; (80018bc <__aeabi_dadd+0x400>)
 80015aa:	08ff      	lsrs	r7, r7, #3
 80015ac:	400a      	ands	r2, r1
 80015ae:	0753      	lsls	r3, r2, #29
 80015b0:	0252      	lsls	r2, r2, #9
 80015b2:	433b      	orrs	r3, r7
 80015b4:	0b12      	lsrs	r2, r2, #12
 80015b6:	e08e      	b.n	80016d6 <__aeabi_dadd+0x21a>
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d000      	beq.n	80015be <__aeabi_dadd+0x102>
 80015bc:	e0b8      	b.n	8001730 <__aeabi_dadd+0x274>
 80015be:	1c6b      	adds	r3, r5, #1
 80015c0:	055b      	lsls	r3, r3, #21
 80015c2:	0d5b      	lsrs	r3, r3, #21
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	dc00      	bgt.n	80015ca <__aeabi_dadd+0x10e>
 80015c8:	e130      	b.n	800182c <__aeabi_dadd+0x370>
 80015ca:	1a87      	subs	r7, r0, r2
 80015cc:	4643      	mov	r3, r8
 80015ce:	42b8      	cmp	r0, r7
 80015d0:	41b6      	sbcs	r6, r6
 80015d2:	1acb      	subs	r3, r1, r3
 80015d4:	4276      	negs	r6, r6
 80015d6:	1b9e      	subs	r6, r3, r6
 80015d8:	0233      	lsls	r3, r6, #8
 80015da:	d500      	bpl.n	80015de <__aeabi_dadd+0x122>
 80015dc:	e14c      	b.n	8001878 <__aeabi_dadd+0x3bc>
 80015de:	003b      	movs	r3, r7
 80015e0:	4333      	orrs	r3, r6
 80015e2:	d1a1      	bne.n	8001528 <__aeabi_dadd+0x6c>
 80015e4:	2200      	movs	r2, #0
 80015e6:	2400      	movs	r4, #0
 80015e8:	2500      	movs	r5, #0
 80015ea:	e070      	b.n	80016ce <__aeabi_dadd+0x212>
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	dc00      	bgt.n	80015f2 <__aeabi_dadd+0x136>
 80015f0:	e0e5      	b.n	80017be <__aeabi_dadd+0x302>
 80015f2:	2e00      	cmp	r6, #0
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dadd+0x13c>
 80015f6:	e083      	b.n	8001700 <__aeabi_dadd+0x244>
 80015f8:	4eaf      	ldr	r6, [pc, #700]	; (80018b8 <__aeabi_dadd+0x3fc>)
 80015fa:	42b5      	cmp	r5, r6
 80015fc:	d060      	beq.n	80016c0 <__aeabi_dadd+0x204>
 80015fe:	2680      	movs	r6, #128	; 0x80
 8001600:	0436      	lsls	r6, r6, #16
 8001602:	4337      	orrs	r7, r6
 8001604:	46b8      	mov	r8, r7
 8001606:	2b38      	cmp	r3, #56	; 0x38
 8001608:	dc00      	bgt.n	800160c <__aeabi_dadd+0x150>
 800160a:	e13e      	b.n	800188a <__aeabi_dadd+0x3ce>
 800160c:	4643      	mov	r3, r8
 800160e:	4313      	orrs	r3, r2
 8001610:	001f      	movs	r7, r3
 8001612:	1e7a      	subs	r2, r7, #1
 8001614:	4197      	sbcs	r7, r2
 8001616:	183f      	adds	r7, r7, r0
 8001618:	4287      	cmp	r7, r0
 800161a:	4180      	sbcs	r0, r0
 800161c:	4240      	negs	r0, r0
 800161e:	1809      	adds	r1, r1, r0
 8001620:	020b      	lsls	r3, r1, #8
 8001622:	d400      	bmi.n	8001626 <__aeabi_dadd+0x16a>
 8001624:	e0b0      	b.n	8001788 <__aeabi_dadd+0x2cc>
 8001626:	4ba4      	ldr	r3, [pc, #656]	; (80018b8 <__aeabi_dadd+0x3fc>)
 8001628:	3501      	adds	r5, #1
 800162a:	429d      	cmp	r5, r3
 800162c:	d100      	bne.n	8001630 <__aeabi_dadd+0x174>
 800162e:	e0c3      	b.n	80017b8 <__aeabi_dadd+0x2fc>
 8001630:	4aa2      	ldr	r2, [pc, #648]	; (80018bc <__aeabi_dadd+0x400>)
 8001632:	087b      	lsrs	r3, r7, #1
 8001634:	400a      	ands	r2, r1
 8001636:	2101      	movs	r1, #1
 8001638:	400f      	ands	r7, r1
 800163a:	431f      	orrs	r7, r3
 800163c:	0851      	lsrs	r1, r2, #1
 800163e:	07d3      	lsls	r3, r2, #31
 8001640:	2207      	movs	r2, #7
 8001642:	431f      	orrs	r7, r3
 8001644:	403a      	ands	r2, r7
 8001646:	e799      	b.n	800157c <__aeabi_dadd+0xc0>
 8001648:	4e9b      	ldr	r6, [pc, #620]	; (80018b8 <__aeabi_dadd+0x3fc>)
 800164a:	42b5      	cmp	r5, r6
 800164c:	d038      	beq.n	80016c0 <__aeabi_dadd+0x204>
 800164e:	2680      	movs	r6, #128	; 0x80
 8001650:	0436      	lsls	r6, r6, #16
 8001652:	4337      	orrs	r7, r6
 8001654:	46b8      	mov	r8, r7
 8001656:	2b38      	cmp	r3, #56	; 0x38
 8001658:	dd00      	ble.n	800165c <__aeabi_dadd+0x1a0>
 800165a:	e0dc      	b.n	8001816 <__aeabi_dadd+0x35a>
 800165c:	2b1f      	cmp	r3, #31
 800165e:	dc00      	bgt.n	8001662 <__aeabi_dadd+0x1a6>
 8001660:	e130      	b.n	80018c4 <__aeabi_dadd+0x408>
 8001662:	001e      	movs	r6, r3
 8001664:	4647      	mov	r7, r8
 8001666:	3e20      	subs	r6, #32
 8001668:	40f7      	lsrs	r7, r6
 800166a:	46bc      	mov	ip, r7
 800166c:	2b20      	cmp	r3, #32
 800166e:	d004      	beq.n	800167a <__aeabi_dadd+0x1be>
 8001670:	2640      	movs	r6, #64	; 0x40
 8001672:	1af3      	subs	r3, r6, r3
 8001674:	4646      	mov	r6, r8
 8001676:	409e      	lsls	r6, r3
 8001678:	4332      	orrs	r2, r6
 800167a:	0017      	movs	r7, r2
 800167c:	4663      	mov	r3, ip
 800167e:	1e7a      	subs	r2, r7, #1
 8001680:	4197      	sbcs	r7, r2
 8001682:	431f      	orrs	r7, r3
 8001684:	e0cc      	b.n	8001820 <__aeabi_dadd+0x364>
 8001686:	2b00      	cmp	r3, #0
 8001688:	d100      	bne.n	800168c <__aeabi_dadd+0x1d0>
 800168a:	e204      	b.n	8001a96 <__aeabi_dadd+0x5da>
 800168c:	4643      	mov	r3, r8
 800168e:	4313      	orrs	r3, r2
 8001690:	d100      	bne.n	8001694 <__aeabi_dadd+0x1d8>
 8001692:	e159      	b.n	8001948 <__aeabi_dadd+0x48c>
 8001694:	074b      	lsls	r3, r1, #29
 8001696:	08c0      	lsrs	r0, r0, #3
 8001698:	4318      	orrs	r0, r3
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	08c9      	lsrs	r1, r1, #3
 800169e:	031b      	lsls	r3, r3, #12
 80016a0:	4219      	tst	r1, r3
 80016a2:	d008      	beq.n	80016b6 <__aeabi_dadd+0x1fa>
 80016a4:	4645      	mov	r5, r8
 80016a6:	08ed      	lsrs	r5, r5, #3
 80016a8:	421d      	tst	r5, r3
 80016aa:	d104      	bne.n	80016b6 <__aeabi_dadd+0x1fa>
 80016ac:	4643      	mov	r3, r8
 80016ae:	08d0      	lsrs	r0, r2, #3
 80016b0:	0759      	lsls	r1, r3, #29
 80016b2:	4308      	orrs	r0, r1
 80016b4:	0029      	movs	r1, r5
 80016b6:	0f42      	lsrs	r2, r0, #29
 80016b8:	00c9      	lsls	r1, r1, #3
 80016ba:	4d7f      	ldr	r5, [pc, #508]	; (80018b8 <__aeabi_dadd+0x3fc>)
 80016bc:	4311      	orrs	r1, r2
 80016be:	00c0      	lsls	r0, r0, #3
 80016c0:	074b      	lsls	r3, r1, #29
 80016c2:	08ca      	lsrs	r2, r1, #3
 80016c4:	497c      	ldr	r1, [pc, #496]	; (80018b8 <__aeabi_dadd+0x3fc>)
 80016c6:	08c0      	lsrs	r0, r0, #3
 80016c8:	4303      	orrs	r3, r0
 80016ca:	428d      	cmp	r5, r1
 80016cc:	d068      	beq.n	80017a0 <__aeabi_dadd+0x2e4>
 80016ce:	0312      	lsls	r2, r2, #12
 80016d0:	056d      	lsls	r5, r5, #21
 80016d2:	0b12      	lsrs	r2, r2, #12
 80016d4:	0d6d      	lsrs	r5, r5, #21
 80016d6:	2100      	movs	r1, #0
 80016d8:	0312      	lsls	r2, r2, #12
 80016da:	0018      	movs	r0, r3
 80016dc:	0b13      	lsrs	r3, r2, #12
 80016de:	0d0a      	lsrs	r2, r1, #20
 80016e0:	0512      	lsls	r2, r2, #20
 80016e2:	431a      	orrs	r2, r3
 80016e4:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <__aeabi_dadd+0x404>)
 80016e6:	052d      	lsls	r5, r5, #20
 80016e8:	4013      	ands	r3, r2
 80016ea:	432b      	orrs	r3, r5
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	07e4      	lsls	r4, r4, #31
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	4323      	orrs	r3, r4
 80016f4:	0019      	movs	r1, r3
 80016f6:	bc1c      	pop	{r2, r3, r4}
 80016f8:	4690      	mov	r8, r2
 80016fa:	4699      	mov	r9, r3
 80016fc:	46a2      	mov	sl, r4
 80016fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001700:	003e      	movs	r6, r7
 8001702:	4316      	orrs	r6, r2
 8001704:	d012      	beq.n	800172c <__aeabi_dadd+0x270>
 8001706:	1e5e      	subs	r6, r3, #1
 8001708:	2e00      	cmp	r6, #0
 800170a:	d000      	beq.n	800170e <__aeabi_dadd+0x252>
 800170c:	e100      	b.n	8001910 <__aeabi_dadd+0x454>
 800170e:	1887      	adds	r7, r0, r2
 8001710:	4287      	cmp	r7, r0
 8001712:	4180      	sbcs	r0, r0
 8001714:	4441      	add	r1, r8
 8001716:	4240      	negs	r0, r0
 8001718:	1809      	adds	r1, r1, r0
 800171a:	2501      	movs	r5, #1
 800171c:	020b      	lsls	r3, r1, #8
 800171e:	d533      	bpl.n	8001788 <__aeabi_dadd+0x2cc>
 8001720:	2502      	movs	r5, #2
 8001722:	e785      	b.n	8001630 <__aeabi_dadd+0x174>
 8001724:	4664      	mov	r4, ip
 8001726:	0033      	movs	r3, r6
 8001728:	4641      	mov	r1, r8
 800172a:	0010      	movs	r0, r2
 800172c:	001d      	movs	r5, r3
 800172e:	e7c7      	b.n	80016c0 <__aeabi_dadd+0x204>
 8001730:	2d00      	cmp	r5, #0
 8001732:	d000      	beq.n	8001736 <__aeabi_dadd+0x27a>
 8001734:	e0da      	b.n	80018ec <__aeabi_dadd+0x430>
 8001736:	000c      	movs	r4, r1
 8001738:	4304      	orrs	r4, r0
 800173a:	d0f3      	beq.n	8001724 <__aeabi_dadd+0x268>
 800173c:	1c5c      	adds	r4, r3, #1
 800173e:	d100      	bne.n	8001742 <__aeabi_dadd+0x286>
 8001740:	e19f      	b.n	8001a82 <__aeabi_dadd+0x5c6>
 8001742:	4c5d      	ldr	r4, [pc, #372]	; (80018b8 <__aeabi_dadd+0x3fc>)
 8001744:	42a6      	cmp	r6, r4
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x28e>
 8001748:	e12f      	b.n	80019aa <__aeabi_dadd+0x4ee>
 800174a:	43db      	mvns	r3, r3
 800174c:	2b38      	cmp	r3, #56	; 0x38
 800174e:	dd00      	ble.n	8001752 <__aeabi_dadd+0x296>
 8001750:	e166      	b.n	8001a20 <__aeabi_dadd+0x564>
 8001752:	2b1f      	cmp	r3, #31
 8001754:	dd00      	ble.n	8001758 <__aeabi_dadd+0x29c>
 8001756:	e183      	b.n	8001a60 <__aeabi_dadd+0x5a4>
 8001758:	2420      	movs	r4, #32
 800175a:	0005      	movs	r5, r0
 800175c:	1ae4      	subs	r4, r4, r3
 800175e:	000f      	movs	r7, r1
 8001760:	40dd      	lsrs	r5, r3
 8001762:	40d9      	lsrs	r1, r3
 8001764:	40a0      	lsls	r0, r4
 8001766:	4643      	mov	r3, r8
 8001768:	40a7      	lsls	r7, r4
 800176a:	1a5b      	subs	r3, r3, r1
 800176c:	1e44      	subs	r4, r0, #1
 800176e:	41a0      	sbcs	r0, r4
 8001770:	4698      	mov	r8, r3
 8001772:	432f      	orrs	r7, r5
 8001774:	4338      	orrs	r0, r7
 8001776:	1a17      	subs	r7, r2, r0
 8001778:	42ba      	cmp	r2, r7
 800177a:	4192      	sbcs	r2, r2
 800177c:	4643      	mov	r3, r8
 800177e:	4252      	negs	r2, r2
 8001780:	1a99      	subs	r1, r3, r2
 8001782:	4664      	mov	r4, ip
 8001784:	0035      	movs	r5, r6
 8001786:	e6ca      	b.n	800151e <__aeabi_dadd+0x62>
 8001788:	2207      	movs	r2, #7
 800178a:	403a      	ands	r2, r7
 800178c:	2a00      	cmp	r2, #0
 800178e:	d000      	beq.n	8001792 <__aeabi_dadd+0x2d6>
 8001790:	e6f6      	b.n	8001580 <__aeabi_dadd+0xc4>
 8001792:	074b      	lsls	r3, r1, #29
 8001794:	08ca      	lsrs	r2, r1, #3
 8001796:	4948      	ldr	r1, [pc, #288]	; (80018b8 <__aeabi_dadd+0x3fc>)
 8001798:	08ff      	lsrs	r7, r7, #3
 800179a:	433b      	orrs	r3, r7
 800179c:	428d      	cmp	r5, r1
 800179e:	d196      	bne.n	80016ce <__aeabi_dadd+0x212>
 80017a0:	0019      	movs	r1, r3
 80017a2:	4311      	orrs	r1, r2
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dadd+0x2ec>
 80017a6:	e19e      	b.n	8001ae6 <__aeabi_dadd+0x62a>
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	0309      	lsls	r1, r1, #12
 80017ac:	430a      	orrs	r2, r1
 80017ae:	0312      	lsls	r2, r2, #12
 80017b0:	0b12      	lsrs	r2, r2, #12
 80017b2:	4d41      	ldr	r5, [pc, #260]	; (80018b8 <__aeabi_dadd+0x3fc>)
 80017b4:	e78f      	b.n	80016d6 <__aeabi_dadd+0x21a>
 80017b6:	0015      	movs	r5, r2
 80017b8:	2200      	movs	r2, #0
 80017ba:	2300      	movs	r3, #0
 80017bc:	e78b      	b.n	80016d6 <__aeabi_dadd+0x21a>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d000      	beq.n	80017c4 <__aeabi_dadd+0x308>
 80017c2:	e0c7      	b.n	8001954 <__aeabi_dadd+0x498>
 80017c4:	1c6b      	adds	r3, r5, #1
 80017c6:	055f      	lsls	r7, r3, #21
 80017c8:	0d7f      	lsrs	r7, r7, #21
 80017ca:	2f01      	cmp	r7, #1
 80017cc:	dc00      	bgt.n	80017d0 <__aeabi_dadd+0x314>
 80017ce:	e0f1      	b.n	80019b4 <__aeabi_dadd+0x4f8>
 80017d0:	4d39      	ldr	r5, [pc, #228]	; (80018b8 <__aeabi_dadd+0x3fc>)
 80017d2:	42ab      	cmp	r3, r5
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dadd+0x31c>
 80017d6:	e0b9      	b.n	800194c <__aeabi_dadd+0x490>
 80017d8:	1885      	adds	r5, r0, r2
 80017da:	000a      	movs	r2, r1
 80017dc:	4285      	cmp	r5, r0
 80017de:	4189      	sbcs	r1, r1
 80017e0:	4442      	add	r2, r8
 80017e2:	4249      	negs	r1, r1
 80017e4:	1851      	adds	r1, r2, r1
 80017e6:	2207      	movs	r2, #7
 80017e8:	07cf      	lsls	r7, r1, #31
 80017ea:	086d      	lsrs	r5, r5, #1
 80017ec:	432f      	orrs	r7, r5
 80017ee:	0849      	lsrs	r1, r1, #1
 80017f0:	403a      	ands	r2, r7
 80017f2:	001d      	movs	r5, r3
 80017f4:	e6c2      	b.n	800157c <__aeabi_dadd+0xc0>
 80017f6:	2207      	movs	r2, #7
 80017f8:	4930      	ldr	r1, [pc, #192]	; (80018bc <__aeabi_dadd+0x400>)
 80017fa:	1aed      	subs	r5, r5, r3
 80017fc:	4031      	ands	r1, r6
 80017fe:	403a      	ands	r2, r7
 8001800:	e6bc      	b.n	800157c <__aeabi_dadd+0xc0>
 8001802:	003e      	movs	r6, r7
 8001804:	3828      	subs	r0, #40	; 0x28
 8001806:	4086      	lsls	r6, r0
 8001808:	2700      	movs	r7, #0
 800180a:	e69f      	b.n	800154c <__aeabi_dadd+0x90>
 800180c:	0038      	movs	r0, r7
 800180e:	f001 fb73 	bl	8002ef8 <__clzsi2>
 8001812:	3020      	adds	r0, #32
 8001814:	e68e      	b.n	8001534 <__aeabi_dadd+0x78>
 8001816:	4643      	mov	r3, r8
 8001818:	4313      	orrs	r3, r2
 800181a:	001f      	movs	r7, r3
 800181c:	1e7a      	subs	r2, r7, #1
 800181e:	4197      	sbcs	r7, r2
 8001820:	1bc7      	subs	r7, r0, r7
 8001822:	42b8      	cmp	r0, r7
 8001824:	4180      	sbcs	r0, r0
 8001826:	4240      	negs	r0, r0
 8001828:	1a09      	subs	r1, r1, r0
 800182a:	e678      	b.n	800151e <__aeabi_dadd+0x62>
 800182c:	000e      	movs	r6, r1
 800182e:	003b      	movs	r3, r7
 8001830:	4306      	orrs	r6, r0
 8001832:	4313      	orrs	r3, r2
 8001834:	2d00      	cmp	r5, #0
 8001836:	d161      	bne.n	80018fc <__aeabi_dadd+0x440>
 8001838:	2e00      	cmp	r6, #0
 800183a:	d000      	beq.n	800183e <__aeabi_dadd+0x382>
 800183c:	e0f4      	b.n	8001a28 <__aeabi_dadd+0x56c>
 800183e:	2b00      	cmp	r3, #0
 8001840:	d100      	bne.n	8001844 <__aeabi_dadd+0x388>
 8001842:	e11b      	b.n	8001a7c <__aeabi_dadd+0x5c0>
 8001844:	4664      	mov	r4, ip
 8001846:	0039      	movs	r1, r7
 8001848:	0010      	movs	r0, r2
 800184a:	e739      	b.n	80016c0 <__aeabi_dadd+0x204>
 800184c:	4f1a      	ldr	r7, [pc, #104]	; (80018b8 <__aeabi_dadd+0x3fc>)
 800184e:	42bb      	cmp	r3, r7
 8001850:	d07a      	beq.n	8001948 <__aeabi_dadd+0x48c>
 8001852:	0033      	movs	r3, r6
 8001854:	e6ff      	b.n	8001656 <__aeabi_dadd+0x19a>
 8001856:	0030      	movs	r0, r6
 8001858:	3d1f      	subs	r5, #31
 800185a:	40e8      	lsrs	r0, r5
 800185c:	2b20      	cmp	r3, #32
 800185e:	d003      	beq.n	8001868 <__aeabi_dadd+0x3ac>
 8001860:	2140      	movs	r1, #64	; 0x40
 8001862:	1acb      	subs	r3, r1, r3
 8001864:	409e      	lsls	r6, r3
 8001866:	4337      	orrs	r7, r6
 8001868:	1e7b      	subs	r3, r7, #1
 800186a:	419f      	sbcs	r7, r3
 800186c:	2207      	movs	r2, #7
 800186e:	4307      	orrs	r7, r0
 8001870:	403a      	ands	r2, r7
 8001872:	2100      	movs	r1, #0
 8001874:	2500      	movs	r5, #0
 8001876:	e789      	b.n	800178c <__aeabi_dadd+0x2d0>
 8001878:	1a17      	subs	r7, r2, r0
 800187a:	4643      	mov	r3, r8
 800187c:	42ba      	cmp	r2, r7
 800187e:	41b6      	sbcs	r6, r6
 8001880:	1a59      	subs	r1, r3, r1
 8001882:	4276      	negs	r6, r6
 8001884:	1b8e      	subs	r6, r1, r6
 8001886:	4664      	mov	r4, ip
 8001888:	e64e      	b.n	8001528 <__aeabi_dadd+0x6c>
 800188a:	2b1f      	cmp	r3, #31
 800188c:	dd00      	ble.n	8001890 <__aeabi_dadd+0x3d4>
 800188e:	e0ad      	b.n	80019ec <__aeabi_dadd+0x530>
 8001890:	2620      	movs	r6, #32
 8001892:	4647      	mov	r7, r8
 8001894:	1af6      	subs	r6, r6, r3
 8001896:	40b7      	lsls	r7, r6
 8001898:	46b9      	mov	r9, r7
 800189a:	0017      	movs	r7, r2
 800189c:	46b2      	mov	sl, r6
 800189e:	40df      	lsrs	r7, r3
 80018a0:	464e      	mov	r6, r9
 80018a2:	433e      	orrs	r6, r7
 80018a4:	0037      	movs	r7, r6
 80018a6:	4656      	mov	r6, sl
 80018a8:	40b2      	lsls	r2, r6
 80018aa:	1e56      	subs	r6, r2, #1
 80018ac:	41b2      	sbcs	r2, r6
 80018ae:	4317      	orrs	r7, r2
 80018b0:	4642      	mov	r2, r8
 80018b2:	40da      	lsrs	r2, r3
 80018b4:	1889      	adds	r1, r1, r2
 80018b6:	e6ae      	b.n	8001616 <__aeabi_dadd+0x15a>
 80018b8:	000007ff 	.word	0x000007ff
 80018bc:	ff7fffff 	.word	0xff7fffff
 80018c0:	800fffff 	.word	0x800fffff
 80018c4:	2620      	movs	r6, #32
 80018c6:	4647      	mov	r7, r8
 80018c8:	1af6      	subs	r6, r6, r3
 80018ca:	40b7      	lsls	r7, r6
 80018cc:	46b9      	mov	r9, r7
 80018ce:	0017      	movs	r7, r2
 80018d0:	46b2      	mov	sl, r6
 80018d2:	40df      	lsrs	r7, r3
 80018d4:	464e      	mov	r6, r9
 80018d6:	433e      	orrs	r6, r7
 80018d8:	0037      	movs	r7, r6
 80018da:	4656      	mov	r6, sl
 80018dc:	40b2      	lsls	r2, r6
 80018de:	1e56      	subs	r6, r2, #1
 80018e0:	41b2      	sbcs	r2, r6
 80018e2:	4317      	orrs	r7, r2
 80018e4:	4642      	mov	r2, r8
 80018e6:	40da      	lsrs	r2, r3
 80018e8:	1a89      	subs	r1, r1, r2
 80018ea:	e799      	b.n	8001820 <__aeabi_dadd+0x364>
 80018ec:	4c7f      	ldr	r4, [pc, #508]	; (8001aec <__aeabi_dadd+0x630>)
 80018ee:	42a6      	cmp	r6, r4
 80018f0:	d05b      	beq.n	80019aa <__aeabi_dadd+0x4ee>
 80018f2:	2480      	movs	r4, #128	; 0x80
 80018f4:	0424      	lsls	r4, r4, #16
 80018f6:	425b      	negs	r3, r3
 80018f8:	4321      	orrs	r1, r4
 80018fa:	e727      	b.n	800174c <__aeabi_dadd+0x290>
 80018fc:	2e00      	cmp	r6, #0
 80018fe:	d10c      	bne.n	800191a <__aeabi_dadd+0x45e>
 8001900:	2b00      	cmp	r3, #0
 8001902:	d100      	bne.n	8001906 <__aeabi_dadd+0x44a>
 8001904:	e0cb      	b.n	8001a9e <__aeabi_dadd+0x5e2>
 8001906:	4664      	mov	r4, ip
 8001908:	0039      	movs	r1, r7
 800190a:	0010      	movs	r0, r2
 800190c:	4d77      	ldr	r5, [pc, #476]	; (8001aec <__aeabi_dadd+0x630>)
 800190e:	e6d7      	b.n	80016c0 <__aeabi_dadd+0x204>
 8001910:	4f76      	ldr	r7, [pc, #472]	; (8001aec <__aeabi_dadd+0x630>)
 8001912:	42bb      	cmp	r3, r7
 8001914:	d018      	beq.n	8001948 <__aeabi_dadd+0x48c>
 8001916:	0033      	movs	r3, r6
 8001918:	e675      	b.n	8001606 <__aeabi_dadd+0x14a>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d014      	beq.n	8001948 <__aeabi_dadd+0x48c>
 800191e:	074b      	lsls	r3, r1, #29
 8001920:	08c0      	lsrs	r0, r0, #3
 8001922:	4318      	orrs	r0, r3
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	08c9      	lsrs	r1, r1, #3
 8001928:	031b      	lsls	r3, r3, #12
 800192a:	4219      	tst	r1, r3
 800192c:	d007      	beq.n	800193e <__aeabi_dadd+0x482>
 800192e:	08fc      	lsrs	r4, r7, #3
 8001930:	421c      	tst	r4, r3
 8001932:	d104      	bne.n	800193e <__aeabi_dadd+0x482>
 8001934:	0779      	lsls	r1, r7, #29
 8001936:	08d0      	lsrs	r0, r2, #3
 8001938:	4308      	orrs	r0, r1
 800193a:	46e1      	mov	r9, ip
 800193c:	0021      	movs	r1, r4
 800193e:	464c      	mov	r4, r9
 8001940:	0f42      	lsrs	r2, r0, #29
 8001942:	00c9      	lsls	r1, r1, #3
 8001944:	4311      	orrs	r1, r2
 8001946:	00c0      	lsls	r0, r0, #3
 8001948:	4d68      	ldr	r5, [pc, #416]	; (8001aec <__aeabi_dadd+0x630>)
 800194a:	e6b9      	b.n	80016c0 <__aeabi_dadd+0x204>
 800194c:	001d      	movs	r5, r3
 800194e:	2200      	movs	r2, #0
 8001950:	2300      	movs	r3, #0
 8001952:	e6c0      	b.n	80016d6 <__aeabi_dadd+0x21a>
 8001954:	2d00      	cmp	r5, #0
 8001956:	d15b      	bne.n	8001a10 <__aeabi_dadd+0x554>
 8001958:	000d      	movs	r5, r1
 800195a:	4305      	orrs	r5, r0
 800195c:	d100      	bne.n	8001960 <__aeabi_dadd+0x4a4>
 800195e:	e6e2      	b.n	8001726 <__aeabi_dadd+0x26a>
 8001960:	1c5d      	adds	r5, r3, #1
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x4aa>
 8001964:	e0b0      	b.n	8001ac8 <__aeabi_dadd+0x60c>
 8001966:	4d61      	ldr	r5, [pc, #388]	; (8001aec <__aeabi_dadd+0x630>)
 8001968:	42ae      	cmp	r6, r5
 800196a:	d01f      	beq.n	80019ac <__aeabi_dadd+0x4f0>
 800196c:	43db      	mvns	r3, r3
 800196e:	2b38      	cmp	r3, #56	; 0x38
 8001970:	dc71      	bgt.n	8001a56 <__aeabi_dadd+0x59a>
 8001972:	2b1f      	cmp	r3, #31
 8001974:	dd00      	ble.n	8001978 <__aeabi_dadd+0x4bc>
 8001976:	e096      	b.n	8001aa6 <__aeabi_dadd+0x5ea>
 8001978:	2520      	movs	r5, #32
 800197a:	000f      	movs	r7, r1
 800197c:	1aed      	subs	r5, r5, r3
 800197e:	40af      	lsls	r7, r5
 8001980:	46b9      	mov	r9, r7
 8001982:	0007      	movs	r7, r0
 8001984:	46aa      	mov	sl, r5
 8001986:	40df      	lsrs	r7, r3
 8001988:	464d      	mov	r5, r9
 800198a:	433d      	orrs	r5, r7
 800198c:	002f      	movs	r7, r5
 800198e:	4655      	mov	r5, sl
 8001990:	40a8      	lsls	r0, r5
 8001992:	40d9      	lsrs	r1, r3
 8001994:	1e45      	subs	r5, r0, #1
 8001996:	41a8      	sbcs	r0, r5
 8001998:	4488      	add	r8, r1
 800199a:	4307      	orrs	r7, r0
 800199c:	18bf      	adds	r7, r7, r2
 800199e:	4297      	cmp	r7, r2
 80019a0:	4192      	sbcs	r2, r2
 80019a2:	4251      	negs	r1, r2
 80019a4:	4441      	add	r1, r8
 80019a6:	0035      	movs	r5, r6
 80019a8:	e63a      	b.n	8001620 <__aeabi_dadd+0x164>
 80019aa:	4664      	mov	r4, ip
 80019ac:	0035      	movs	r5, r6
 80019ae:	4641      	mov	r1, r8
 80019b0:	0010      	movs	r0, r2
 80019b2:	e685      	b.n	80016c0 <__aeabi_dadd+0x204>
 80019b4:	000b      	movs	r3, r1
 80019b6:	4303      	orrs	r3, r0
 80019b8:	2d00      	cmp	r5, #0
 80019ba:	d000      	beq.n	80019be <__aeabi_dadd+0x502>
 80019bc:	e663      	b.n	8001686 <__aeabi_dadd+0x1ca>
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f5      	beq.n	80019ae <__aeabi_dadd+0x4f2>
 80019c2:	4643      	mov	r3, r8
 80019c4:	4313      	orrs	r3, r2
 80019c6:	d100      	bne.n	80019ca <__aeabi_dadd+0x50e>
 80019c8:	e67a      	b.n	80016c0 <__aeabi_dadd+0x204>
 80019ca:	1887      	adds	r7, r0, r2
 80019cc:	4287      	cmp	r7, r0
 80019ce:	4180      	sbcs	r0, r0
 80019d0:	2207      	movs	r2, #7
 80019d2:	4441      	add	r1, r8
 80019d4:	4240      	negs	r0, r0
 80019d6:	1809      	adds	r1, r1, r0
 80019d8:	403a      	ands	r2, r7
 80019da:	020b      	lsls	r3, r1, #8
 80019dc:	d400      	bmi.n	80019e0 <__aeabi_dadd+0x524>
 80019de:	e6d5      	b.n	800178c <__aeabi_dadd+0x2d0>
 80019e0:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <__aeabi_dadd+0x634>)
 80019e2:	3501      	adds	r5, #1
 80019e4:	4019      	ands	r1, r3
 80019e6:	e5c9      	b.n	800157c <__aeabi_dadd+0xc0>
 80019e8:	0038      	movs	r0, r7
 80019ea:	e669      	b.n	80016c0 <__aeabi_dadd+0x204>
 80019ec:	001e      	movs	r6, r3
 80019ee:	4647      	mov	r7, r8
 80019f0:	3e20      	subs	r6, #32
 80019f2:	40f7      	lsrs	r7, r6
 80019f4:	46bc      	mov	ip, r7
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	d004      	beq.n	8001a04 <__aeabi_dadd+0x548>
 80019fa:	2640      	movs	r6, #64	; 0x40
 80019fc:	1af3      	subs	r3, r6, r3
 80019fe:	4646      	mov	r6, r8
 8001a00:	409e      	lsls	r6, r3
 8001a02:	4332      	orrs	r2, r6
 8001a04:	0017      	movs	r7, r2
 8001a06:	4663      	mov	r3, ip
 8001a08:	1e7a      	subs	r2, r7, #1
 8001a0a:	4197      	sbcs	r7, r2
 8001a0c:	431f      	orrs	r7, r3
 8001a0e:	e602      	b.n	8001616 <__aeabi_dadd+0x15a>
 8001a10:	4d36      	ldr	r5, [pc, #216]	; (8001aec <__aeabi_dadd+0x630>)
 8001a12:	42ae      	cmp	r6, r5
 8001a14:	d0ca      	beq.n	80019ac <__aeabi_dadd+0x4f0>
 8001a16:	2580      	movs	r5, #128	; 0x80
 8001a18:	042d      	lsls	r5, r5, #16
 8001a1a:	425b      	negs	r3, r3
 8001a1c:	4329      	orrs	r1, r5
 8001a1e:	e7a6      	b.n	800196e <__aeabi_dadd+0x4b2>
 8001a20:	4308      	orrs	r0, r1
 8001a22:	1e41      	subs	r1, r0, #1
 8001a24:	4188      	sbcs	r0, r1
 8001a26:	e6a6      	b.n	8001776 <__aeabi_dadd+0x2ba>
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dadd+0x572>
 8001a2c:	e648      	b.n	80016c0 <__aeabi_dadd+0x204>
 8001a2e:	1a87      	subs	r7, r0, r2
 8001a30:	4643      	mov	r3, r8
 8001a32:	42b8      	cmp	r0, r7
 8001a34:	41b6      	sbcs	r6, r6
 8001a36:	1acb      	subs	r3, r1, r3
 8001a38:	4276      	negs	r6, r6
 8001a3a:	1b9e      	subs	r6, r3, r6
 8001a3c:	0233      	lsls	r3, r6, #8
 8001a3e:	d54b      	bpl.n	8001ad8 <__aeabi_dadd+0x61c>
 8001a40:	1a17      	subs	r7, r2, r0
 8001a42:	4643      	mov	r3, r8
 8001a44:	42ba      	cmp	r2, r7
 8001a46:	4192      	sbcs	r2, r2
 8001a48:	1a59      	subs	r1, r3, r1
 8001a4a:	4252      	negs	r2, r2
 8001a4c:	1a89      	subs	r1, r1, r2
 8001a4e:	2207      	movs	r2, #7
 8001a50:	4664      	mov	r4, ip
 8001a52:	403a      	ands	r2, r7
 8001a54:	e592      	b.n	800157c <__aeabi_dadd+0xc0>
 8001a56:	4301      	orrs	r1, r0
 8001a58:	000f      	movs	r7, r1
 8001a5a:	1e79      	subs	r1, r7, #1
 8001a5c:	418f      	sbcs	r7, r1
 8001a5e:	e79d      	b.n	800199c <__aeabi_dadd+0x4e0>
 8001a60:	001c      	movs	r4, r3
 8001a62:	000f      	movs	r7, r1
 8001a64:	3c20      	subs	r4, #32
 8001a66:	40e7      	lsrs	r7, r4
 8001a68:	2b20      	cmp	r3, #32
 8001a6a:	d003      	beq.n	8001a74 <__aeabi_dadd+0x5b8>
 8001a6c:	2440      	movs	r4, #64	; 0x40
 8001a6e:	1ae3      	subs	r3, r4, r3
 8001a70:	4099      	lsls	r1, r3
 8001a72:	4308      	orrs	r0, r1
 8001a74:	1e41      	subs	r1, r0, #1
 8001a76:	4188      	sbcs	r0, r1
 8001a78:	4338      	orrs	r0, r7
 8001a7a:	e67c      	b.n	8001776 <__aeabi_dadd+0x2ba>
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2400      	movs	r4, #0
 8001a80:	e625      	b.n	80016ce <__aeabi_dadd+0x212>
 8001a82:	1a17      	subs	r7, r2, r0
 8001a84:	4643      	mov	r3, r8
 8001a86:	42ba      	cmp	r2, r7
 8001a88:	4192      	sbcs	r2, r2
 8001a8a:	1a59      	subs	r1, r3, r1
 8001a8c:	4252      	negs	r2, r2
 8001a8e:	1a89      	subs	r1, r1, r2
 8001a90:	4664      	mov	r4, ip
 8001a92:	0035      	movs	r5, r6
 8001a94:	e543      	b.n	800151e <__aeabi_dadd+0x62>
 8001a96:	4641      	mov	r1, r8
 8001a98:	0010      	movs	r0, r2
 8001a9a:	4d14      	ldr	r5, [pc, #80]	; (8001aec <__aeabi_dadd+0x630>)
 8001a9c:	e610      	b.n	80016c0 <__aeabi_dadd+0x204>
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	2400      	movs	r4, #0
 8001aa2:	0312      	lsls	r2, r2, #12
 8001aa4:	e680      	b.n	80017a8 <__aeabi_dadd+0x2ec>
 8001aa6:	001d      	movs	r5, r3
 8001aa8:	000f      	movs	r7, r1
 8001aaa:	3d20      	subs	r5, #32
 8001aac:	40ef      	lsrs	r7, r5
 8001aae:	46bc      	mov	ip, r7
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d003      	beq.n	8001abc <__aeabi_dadd+0x600>
 8001ab4:	2540      	movs	r5, #64	; 0x40
 8001ab6:	1aeb      	subs	r3, r5, r3
 8001ab8:	4099      	lsls	r1, r3
 8001aba:	4308      	orrs	r0, r1
 8001abc:	0007      	movs	r7, r0
 8001abe:	4663      	mov	r3, ip
 8001ac0:	1e78      	subs	r0, r7, #1
 8001ac2:	4187      	sbcs	r7, r0
 8001ac4:	431f      	orrs	r7, r3
 8001ac6:	e769      	b.n	800199c <__aeabi_dadd+0x4e0>
 8001ac8:	1887      	adds	r7, r0, r2
 8001aca:	4297      	cmp	r7, r2
 8001acc:	419b      	sbcs	r3, r3
 8001ace:	4441      	add	r1, r8
 8001ad0:	425b      	negs	r3, r3
 8001ad2:	18c9      	adds	r1, r1, r3
 8001ad4:	0035      	movs	r5, r6
 8001ad6:	e5a3      	b.n	8001620 <__aeabi_dadd+0x164>
 8001ad8:	003b      	movs	r3, r7
 8001ada:	4333      	orrs	r3, r6
 8001adc:	d0ce      	beq.n	8001a7c <__aeabi_dadd+0x5c0>
 8001ade:	2207      	movs	r2, #7
 8001ae0:	0031      	movs	r1, r6
 8001ae2:	403a      	ands	r2, r7
 8001ae4:	e652      	b.n	800178c <__aeabi_dadd+0x2d0>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	001a      	movs	r2, r3
 8001aea:	e5f4      	b.n	80016d6 <__aeabi_dadd+0x21a>
 8001aec:	000007ff 	.word	0x000007ff
 8001af0:	ff7fffff 	.word	0xff7fffff

08001af4 <__aeabi_ddiv>:
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	4657      	mov	r7, sl
 8001af8:	46de      	mov	lr, fp
 8001afa:	464e      	mov	r6, r9
 8001afc:	4645      	mov	r5, r8
 8001afe:	b5e0      	push	{r5, r6, r7, lr}
 8001b00:	4683      	mov	fp, r0
 8001b02:	0007      	movs	r7, r0
 8001b04:	030e      	lsls	r6, r1, #12
 8001b06:	0048      	lsls	r0, r1, #1
 8001b08:	b085      	sub	sp, #20
 8001b0a:	4692      	mov	sl, r2
 8001b0c:	001c      	movs	r4, r3
 8001b0e:	0b36      	lsrs	r6, r6, #12
 8001b10:	0d40      	lsrs	r0, r0, #21
 8001b12:	0fcd      	lsrs	r5, r1, #31
 8001b14:	2800      	cmp	r0, #0
 8001b16:	d100      	bne.n	8001b1a <__aeabi_ddiv+0x26>
 8001b18:	e09d      	b.n	8001c56 <__aeabi_ddiv+0x162>
 8001b1a:	4b95      	ldr	r3, [pc, #596]	; (8001d70 <__aeabi_ddiv+0x27c>)
 8001b1c:	4298      	cmp	r0, r3
 8001b1e:	d039      	beq.n	8001b94 <__aeabi_ddiv+0xa0>
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	00f6      	lsls	r6, r6, #3
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	431e      	orrs	r6, r3
 8001b28:	4a92      	ldr	r2, [pc, #584]	; (8001d74 <__aeabi_ddiv+0x280>)
 8001b2a:	0f7b      	lsrs	r3, r7, #29
 8001b2c:	4333      	orrs	r3, r6
 8001b2e:	4699      	mov	r9, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	0003      	movs	r3, r0
 8001b34:	4463      	add	r3, ip
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2600      	movs	r6, #0
 8001b3c:	00ff      	lsls	r7, r7, #3
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	0323      	lsls	r3, r4, #12
 8001b42:	0b1b      	lsrs	r3, r3, #12
 8001b44:	4698      	mov	r8, r3
 8001b46:	0063      	lsls	r3, r4, #1
 8001b48:	0fe4      	lsrs	r4, r4, #31
 8001b4a:	4652      	mov	r2, sl
 8001b4c:	0d5b      	lsrs	r3, r3, #21
 8001b4e:	9401      	str	r4, [sp, #4]
 8001b50:	d100      	bne.n	8001b54 <__aeabi_ddiv+0x60>
 8001b52:	e0b3      	b.n	8001cbc <__aeabi_ddiv+0x1c8>
 8001b54:	4986      	ldr	r1, [pc, #536]	; (8001d70 <__aeabi_ddiv+0x27c>)
 8001b56:	428b      	cmp	r3, r1
 8001b58:	d100      	bne.n	8001b5c <__aeabi_ddiv+0x68>
 8001b5a:	e09e      	b.n	8001c9a <__aeabi_ddiv+0x1a6>
 8001b5c:	4642      	mov	r2, r8
 8001b5e:	00d1      	lsls	r1, r2, #3
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	0412      	lsls	r2, r2, #16
 8001b64:	430a      	orrs	r2, r1
 8001b66:	4651      	mov	r1, sl
 8001b68:	0f49      	lsrs	r1, r1, #29
 8001b6a:	4311      	orrs	r1, r2
 8001b6c:	468b      	mov	fp, r1
 8001b6e:	4981      	ldr	r1, [pc, #516]	; (8001d74 <__aeabi_ddiv+0x280>)
 8001b70:	4652      	mov	r2, sl
 8001b72:	468c      	mov	ip, r1
 8001b74:	9900      	ldr	r1, [sp, #0]
 8001b76:	4463      	add	r3, ip
 8001b78:	1acb      	subs	r3, r1, r3
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	00d2      	lsls	r2, r2, #3
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	002b      	movs	r3, r5
 8001b82:	4063      	eors	r3, r4
 8001b84:	469a      	mov	sl, r3
 8001b86:	2e0f      	cmp	r6, #15
 8001b88:	d900      	bls.n	8001b8c <__aeabi_ddiv+0x98>
 8001b8a:	e105      	b.n	8001d98 <__aeabi_ddiv+0x2a4>
 8001b8c:	4b7a      	ldr	r3, [pc, #488]	; (8001d78 <__aeabi_ddiv+0x284>)
 8001b8e:	00b6      	lsls	r6, r6, #2
 8001b90:	599b      	ldr	r3, [r3, r6]
 8001b92:	469f      	mov	pc, r3
 8001b94:	465b      	mov	r3, fp
 8001b96:	4333      	orrs	r3, r6
 8001b98:	4699      	mov	r9, r3
 8001b9a:	d000      	beq.n	8001b9e <__aeabi_ddiv+0xaa>
 8001b9c:	e0b8      	b.n	8001d10 <__aeabi_ddiv+0x21c>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	2608      	movs	r6, #8
 8001ba2:	2700      	movs	r7, #0
 8001ba4:	9000      	str	r0, [sp, #0]
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	e7ca      	b.n	8001b40 <__aeabi_ddiv+0x4c>
 8001baa:	46cb      	mov	fp, r9
 8001bac:	003a      	movs	r2, r7
 8001bae:	9902      	ldr	r1, [sp, #8]
 8001bb0:	9501      	str	r5, [sp, #4]
 8001bb2:	9b01      	ldr	r3, [sp, #4]
 8001bb4:	469a      	mov	sl, r3
 8001bb6:	2902      	cmp	r1, #2
 8001bb8:	d027      	beq.n	8001c0a <__aeabi_ddiv+0x116>
 8001bba:	2903      	cmp	r1, #3
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_ddiv+0xcc>
 8001bbe:	e280      	b.n	80020c2 <__aeabi_ddiv+0x5ce>
 8001bc0:	2901      	cmp	r1, #1
 8001bc2:	d044      	beq.n	8001c4e <__aeabi_ddiv+0x15a>
 8001bc4:	496d      	ldr	r1, [pc, #436]	; (8001d7c <__aeabi_ddiv+0x288>)
 8001bc6:	9b00      	ldr	r3, [sp, #0]
 8001bc8:	468c      	mov	ip, r1
 8001bca:	4463      	add	r3, ip
 8001bcc:	001c      	movs	r4, r3
 8001bce:	2c00      	cmp	r4, #0
 8001bd0:	dd38      	ble.n	8001c44 <__aeabi_ddiv+0x150>
 8001bd2:	0753      	lsls	r3, r2, #29
 8001bd4:	d000      	beq.n	8001bd8 <__aeabi_ddiv+0xe4>
 8001bd6:	e213      	b.n	8002000 <__aeabi_ddiv+0x50c>
 8001bd8:	08d2      	lsrs	r2, r2, #3
 8001bda:	465b      	mov	r3, fp
 8001bdc:	01db      	lsls	r3, r3, #7
 8001bde:	d509      	bpl.n	8001bf4 <__aeabi_ddiv+0x100>
 8001be0:	4659      	mov	r1, fp
 8001be2:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <__aeabi_ddiv+0x28c>)
 8001be4:	4019      	ands	r1, r3
 8001be6:	468b      	mov	fp, r1
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	00c9      	lsls	r1, r1, #3
 8001bec:	468c      	mov	ip, r1
 8001bee:	9b00      	ldr	r3, [sp, #0]
 8001bf0:	4463      	add	r3, ip
 8001bf2:	001c      	movs	r4, r3
 8001bf4:	4b63      	ldr	r3, [pc, #396]	; (8001d84 <__aeabi_ddiv+0x290>)
 8001bf6:	429c      	cmp	r4, r3
 8001bf8:	dc07      	bgt.n	8001c0a <__aeabi_ddiv+0x116>
 8001bfa:	465b      	mov	r3, fp
 8001bfc:	0564      	lsls	r4, r4, #21
 8001bfe:	075f      	lsls	r7, r3, #29
 8001c00:	025b      	lsls	r3, r3, #9
 8001c02:	4317      	orrs	r7, r2
 8001c04:	0b1b      	lsrs	r3, r3, #12
 8001c06:	0d62      	lsrs	r2, r4, #21
 8001c08:	e002      	b.n	8001c10 <__aeabi_ddiv+0x11c>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2700      	movs	r7, #0
 8001c0e:	4a58      	ldr	r2, [pc, #352]	; (8001d70 <__aeabi_ddiv+0x27c>)
 8001c10:	2100      	movs	r1, #0
 8001c12:	031b      	lsls	r3, r3, #12
 8001c14:	0b1c      	lsrs	r4, r3, #12
 8001c16:	0d0b      	lsrs	r3, r1, #20
 8001c18:	051b      	lsls	r3, r3, #20
 8001c1a:	4323      	orrs	r3, r4
 8001c1c:	0514      	lsls	r4, r2, #20
 8001c1e:	4a5a      	ldr	r2, [pc, #360]	; (8001d88 <__aeabi_ddiv+0x294>)
 8001c20:	0038      	movs	r0, r7
 8001c22:	4013      	ands	r3, r2
 8001c24:	431c      	orrs	r4, r3
 8001c26:	4653      	mov	r3, sl
 8001c28:	0064      	lsls	r4, r4, #1
 8001c2a:	07db      	lsls	r3, r3, #31
 8001c2c:	0864      	lsrs	r4, r4, #1
 8001c2e:	431c      	orrs	r4, r3
 8001c30:	0021      	movs	r1, r4
 8001c32:	b005      	add	sp, #20
 8001c34:	bc3c      	pop	{r2, r3, r4, r5}
 8001c36:	4690      	mov	r8, r2
 8001c38:	4699      	mov	r9, r3
 8001c3a:	46a2      	mov	sl, r4
 8001c3c:	46ab      	mov	fp, r5
 8001c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c40:	2201      	movs	r2, #1
 8001c42:	4252      	negs	r2, r2
 8001c44:	2301      	movs	r3, #1
 8001c46:	1b1b      	subs	r3, r3, r4
 8001c48:	2b38      	cmp	r3, #56	; 0x38
 8001c4a:	dc00      	bgt.n	8001c4e <__aeabi_ddiv+0x15a>
 8001c4c:	e1ad      	b.n	8001faa <__aeabi_ddiv+0x4b6>
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2300      	movs	r3, #0
 8001c52:	2700      	movs	r7, #0
 8001c54:	e7dc      	b.n	8001c10 <__aeabi_ddiv+0x11c>
 8001c56:	465b      	mov	r3, fp
 8001c58:	4333      	orrs	r3, r6
 8001c5a:	4699      	mov	r9, r3
 8001c5c:	d05e      	beq.n	8001d1c <__aeabi_ddiv+0x228>
 8001c5e:	2e00      	cmp	r6, #0
 8001c60:	d100      	bne.n	8001c64 <__aeabi_ddiv+0x170>
 8001c62:	e18a      	b.n	8001f7a <__aeabi_ddiv+0x486>
 8001c64:	0030      	movs	r0, r6
 8001c66:	f001 f947 	bl	8002ef8 <__clzsi2>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	3b0b      	subs	r3, #11
 8001c6e:	2b1c      	cmp	r3, #28
 8001c70:	dd00      	ble.n	8001c74 <__aeabi_ddiv+0x180>
 8001c72:	e17b      	b.n	8001f6c <__aeabi_ddiv+0x478>
 8001c74:	221d      	movs	r2, #29
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	465a      	mov	r2, fp
 8001c7a:	0001      	movs	r1, r0
 8001c7c:	40da      	lsrs	r2, r3
 8001c7e:	3908      	subs	r1, #8
 8001c80:	408e      	lsls	r6, r1
 8001c82:	0013      	movs	r3, r2
 8001c84:	465f      	mov	r7, fp
 8001c86:	4333      	orrs	r3, r6
 8001c88:	4699      	mov	r9, r3
 8001c8a:	408f      	lsls	r7, r1
 8001c8c:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <__aeabi_ddiv+0x298>)
 8001c8e:	2600      	movs	r6, #0
 8001c90:	1a1b      	subs	r3, r3, r0
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2300      	movs	r3, #0
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	e752      	b.n	8001b40 <__aeabi_ddiv+0x4c>
 8001c9a:	4641      	mov	r1, r8
 8001c9c:	4653      	mov	r3, sl
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	493b      	ldr	r1, [pc, #236]	; (8001d90 <__aeabi_ddiv+0x29c>)
 8001ca2:	469b      	mov	fp, r3
 8001ca4:	468c      	mov	ip, r1
 8001ca6:	9b00      	ldr	r3, [sp, #0]
 8001ca8:	4463      	add	r3, ip
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	465b      	mov	r3, fp
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d13b      	bne.n	8001d2a <__aeabi_ddiv+0x236>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	431e      	orrs	r6, r3
 8001cb8:	2102      	movs	r1, #2
 8001cba:	e761      	b.n	8001b80 <__aeabi_ddiv+0x8c>
 8001cbc:	4643      	mov	r3, r8
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	469b      	mov	fp, r3
 8001cc2:	d037      	beq.n	8001d34 <__aeabi_ddiv+0x240>
 8001cc4:	4643      	mov	r3, r8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_ddiv+0x1d8>
 8001cca:	e162      	b.n	8001f92 <__aeabi_ddiv+0x49e>
 8001ccc:	4640      	mov	r0, r8
 8001cce:	f001 f913 	bl	8002ef8 <__clzsi2>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	3b0b      	subs	r3, #11
 8001cd6:	2b1c      	cmp	r3, #28
 8001cd8:	dd00      	ble.n	8001cdc <__aeabi_ddiv+0x1e8>
 8001cda:	e153      	b.n	8001f84 <__aeabi_ddiv+0x490>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	4641      	mov	r1, r8
 8001ce0:	3a08      	subs	r2, #8
 8001ce2:	4091      	lsls	r1, r2
 8001ce4:	4688      	mov	r8, r1
 8001ce6:	211d      	movs	r1, #29
 8001ce8:	1acb      	subs	r3, r1, r3
 8001cea:	4651      	mov	r1, sl
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	000b      	movs	r3, r1
 8001cf0:	4641      	mov	r1, r8
 8001cf2:	430b      	orrs	r3, r1
 8001cf4:	469b      	mov	fp, r3
 8001cf6:	4653      	mov	r3, sl
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	001a      	movs	r2, r3
 8001cfc:	9b00      	ldr	r3, [sp, #0]
 8001cfe:	4925      	ldr	r1, [pc, #148]	; (8001d94 <__aeabi_ddiv+0x2a0>)
 8001d00:	469c      	mov	ip, r3
 8001d02:	4460      	add	r0, ip
 8001d04:	0003      	movs	r3, r0
 8001d06:	468c      	mov	ip, r1
 8001d08:	4463      	add	r3, ip
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	e737      	b.n	8001b80 <__aeabi_ddiv+0x8c>
 8001d10:	2303      	movs	r3, #3
 8001d12:	46b1      	mov	r9, r6
 8001d14:	9000      	str	r0, [sp, #0]
 8001d16:	260c      	movs	r6, #12
 8001d18:	9302      	str	r3, [sp, #8]
 8001d1a:	e711      	b.n	8001b40 <__aeabi_ddiv+0x4c>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	2604      	movs	r6, #4
 8001d24:	2700      	movs	r7, #0
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	e70a      	b.n	8001b40 <__aeabi_ddiv+0x4c>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	46c3      	mov	fp, r8
 8001d2e:	431e      	orrs	r6, r3
 8001d30:	2103      	movs	r1, #3
 8001d32:	e725      	b.n	8001b80 <__aeabi_ddiv+0x8c>
 8001d34:	3301      	adds	r3, #1
 8001d36:	431e      	orrs	r6, r3
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	e720      	b.n	8001b80 <__aeabi_ddiv+0x8c>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	469a      	mov	sl, r3
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	2700      	movs	r7, #0
 8001d46:	031b      	lsls	r3, r3, #12
 8001d48:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <__aeabi_ddiv+0x27c>)
 8001d4a:	e761      	b.n	8001c10 <__aeabi_ddiv+0x11c>
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	4649      	mov	r1, r9
 8001d50:	031b      	lsls	r3, r3, #12
 8001d52:	4219      	tst	r1, r3
 8001d54:	d100      	bne.n	8001d58 <__aeabi_ddiv+0x264>
 8001d56:	e0e2      	b.n	8001f1e <__aeabi_ddiv+0x42a>
 8001d58:	4659      	mov	r1, fp
 8001d5a:	4219      	tst	r1, r3
 8001d5c:	d000      	beq.n	8001d60 <__aeabi_ddiv+0x26c>
 8001d5e:	e0de      	b.n	8001f1e <__aeabi_ddiv+0x42a>
 8001d60:	430b      	orrs	r3, r1
 8001d62:	031b      	lsls	r3, r3, #12
 8001d64:	0017      	movs	r7, r2
 8001d66:	0b1b      	lsrs	r3, r3, #12
 8001d68:	46a2      	mov	sl, r4
 8001d6a:	4a01      	ldr	r2, [pc, #4]	; (8001d70 <__aeabi_ddiv+0x27c>)
 8001d6c:	e750      	b.n	8001c10 <__aeabi_ddiv+0x11c>
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	000007ff 	.word	0x000007ff
 8001d74:	fffffc01 	.word	0xfffffc01
 8001d78:	0800b338 	.word	0x0800b338
 8001d7c:	000003ff 	.word	0x000003ff
 8001d80:	feffffff 	.word	0xfeffffff
 8001d84:	000007fe 	.word	0x000007fe
 8001d88:	800fffff 	.word	0x800fffff
 8001d8c:	fffffc0d 	.word	0xfffffc0d
 8001d90:	fffff801 	.word	0xfffff801
 8001d94:	000003f3 	.word	0x000003f3
 8001d98:	45d9      	cmp	r9, fp
 8001d9a:	d900      	bls.n	8001d9e <__aeabi_ddiv+0x2aa>
 8001d9c:	e0cb      	b.n	8001f36 <__aeabi_ddiv+0x442>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0x2ae>
 8001da0:	e0c6      	b.n	8001f30 <__aeabi_ddiv+0x43c>
 8001da2:	003c      	movs	r4, r7
 8001da4:	4648      	mov	r0, r9
 8001da6:	2700      	movs	r7, #0
 8001da8:	9b00      	ldr	r3, [sp, #0]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	465b      	mov	r3, fp
 8001db0:	0e16      	lsrs	r6, r2, #24
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	431e      	orrs	r6, r3
 8001db6:	0213      	lsls	r3, r2, #8
 8001db8:	4698      	mov	r8, r3
 8001dba:	0433      	lsls	r3, r6, #16
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	4699      	mov	r9, r3
 8001dc0:	0c31      	lsrs	r1, r6, #16
 8001dc2:	9101      	str	r1, [sp, #4]
 8001dc4:	f7fe fa2e 	bl	8000224 <__aeabi_uidivmod>
 8001dc8:	464a      	mov	r2, r9
 8001dca:	4342      	muls	r2, r0
 8001dcc:	040b      	lsls	r3, r1, #16
 8001dce:	0c21      	lsrs	r1, r4, #16
 8001dd0:	0005      	movs	r5, r0
 8001dd2:	4319      	orrs	r1, r3
 8001dd4:	428a      	cmp	r2, r1
 8001dd6:	d907      	bls.n	8001de8 <__aeabi_ddiv+0x2f4>
 8001dd8:	1989      	adds	r1, r1, r6
 8001dda:	3d01      	subs	r5, #1
 8001ddc:	428e      	cmp	r6, r1
 8001dde:	d803      	bhi.n	8001de8 <__aeabi_ddiv+0x2f4>
 8001de0:	428a      	cmp	r2, r1
 8001de2:	d901      	bls.n	8001de8 <__aeabi_ddiv+0x2f4>
 8001de4:	1e85      	subs	r5, r0, #2
 8001de6:	1989      	adds	r1, r1, r6
 8001de8:	1a88      	subs	r0, r1, r2
 8001dea:	9901      	ldr	r1, [sp, #4]
 8001dec:	f7fe fa1a 	bl	8000224 <__aeabi_uidivmod>
 8001df0:	0409      	lsls	r1, r1, #16
 8001df2:	468c      	mov	ip, r1
 8001df4:	464a      	mov	r2, r9
 8001df6:	0421      	lsls	r1, r4, #16
 8001df8:	4664      	mov	r4, ip
 8001dfa:	4342      	muls	r2, r0
 8001dfc:	0c09      	lsrs	r1, r1, #16
 8001dfe:	0003      	movs	r3, r0
 8001e00:	4321      	orrs	r1, r4
 8001e02:	428a      	cmp	r2, r1
 8001e04:	d904      	bls.n	8001e10 <__aeabi_ddiv+0x31c>
 8001e06:	1989      	adds	r1, r1, r6
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	428e      	cmp	r6, r1
 8001e0c:	d800      	bhi.n	8001e10 <__aeabi_ddiv+0x31c>
 8001e0e:	e0f1      	b.n	8001ff4 <__aeabi_ddiv+0x500>
 8001e10:	042d      	lsls	r5, r5, #16
 8001e12:	431d      	orrs	r5, r3
 8001e14:	46ab      	mov	fp, r5
 8001e16:	4643      	mov	r3, r8
 8001e18:	1a89      	subs	r1, r1, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0c28      	lsrs	r0, r5, #16
 8001e1e:	0412      	lsls	r2, r2, #16
 8001e20:	0c1d      	lsrs	r5, r3, #16
 8001e22:	465b      	mov	r3, fp
 8001e24:	0c14      	lsrs	r4, r2, #16
 8001e26:	0022      	movs	r2, r4
 8001e28:	041b      	lsls	r3, r3, #16
 8001e2a:	0c1b      	lsrs	r3, r3, #16
 8001e2c:	435a      	muls	r2, r3
 8001e2e:	9403      	str	r4, [sp, #12]
 8001e30:	436b      	muls	r3, r5
 8001e32:	4344      	muls	r4, r0
 8001e34:	9502      	str	r5, [sp, #8]
 8001e36:	4368      	muls	r0, r5
 8001e38:	191b      	adds	r3, r3, r4
 8001e3a:	0c15      	lsrs	r5, r2, #16
 8001e3c:	18eb      	adds	r3, r5, r3
 8001e3e:	429c      	cmp	r4, r3
 8001e40:	d903      	bls.n	8001e4a <__aeabi_ddiv+0x356>
 8001e42:	2480      	movs	r4, #128	; 0x80
 8001e44:	0264      	lsls	r4, r4, #9
 8001e46:	46a4      	mov	ip, r4
 8001e48:	4460      	add	r0, ip
 8001e4a:	0c1c      	lsrs	r4, r3, #16
 8001e4c:	0415      	lsls	r5, r2, #16
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	0c2d      	lsrs	r5, r5, #16
 8001e52:	1820      	adds	r0, r4, r0
 8001e54:	195d      	adds	r5, r3, r5
 8001e56:	4281      	cmp	r1, r0
 8001e58:	d377      	bcc.n	8001f4a <__aeabi_ddiv+0x456>
 8001e5a:	d073      	beq.n	8001f44 <__aeabi_ddiv+0x450>
 8001e5c:	1a0c      	subs	r4, r1, r0
 8001e5e:	4aa2      	ldr	r2, [pc, #648]	; (80020e8 <__aeabi_ddiv+0x5f4>)
 8001e60:	1b7d      	subs	r5, r7, r5
 8001e62:	42af      	cmp	r7, r5
 8001e64:	41bf      	sbcs	r7, r7
 8001e66:	4694      	mov	ip, r2
 8001e68:	9b00      	ldr	r3, [sp, #0]
 8001e6a:	427f      	negs	r7, r7
 8001e6c:	4463      	add	r3, ip
 8001e6e:	1be0      	subs	r0, r4, r7
 8001e70:	001c      	movs	r4, r3
 8001e72:	4286      	cmp	r6, r0
 8001e74:	d100      	bne.n	8001e78 <__aeabi_ddiv+0x384>
 8001e76:	e0db      	b.n	8002030 <__aeabi_ddiv+0x53c>
 8001e78:	9901      	ldr	r1, [sp, #4]
 8001e7a:	f7fe f9d3 	bl	8000224 <__aeabi_uidivmod>
 8001e7e:	464a      	mov	r2, r9
 8001e80:	4342      	muls	r2, r0
 8001e82:	040b      	lsls	r3, r1, #16
 8001e84:	0c29      	lsrs	r1, r5, #16
 8001e86:	0007      	movs	r7, r0
 8001e88:	4319      	orrs	r1, r3
 8001e8a:	428a      	cmp	r2, r1
 8001e8c:	d907      	bls.n	8001e9e <__aeabi_ddiv+0x3aa>
 8001e8e:	1989      	adds	r1, r1, r6
 8001e90:	3f01      	subs	r7, #1
 8001e92:	428e      	cmp	r6, r1
 8001e94:	d803      	bhi.n	8001e9e <__aeabi_ddiv+0x3aa>
 8001e96:	428a      	cmp	r2, r1
 8001e98:	d901      	bls.n	8001e9e <__aeabi_ddiv+0x3aa>
 8001e9a:	1e87      	subs	r7, r0, #2
 8001e9c:	1989      	adds	r1, r1, r6
 8001e9e:	1a88      	subs	r0, r1, r2
 8001ea0:	9901      	ldr	r1, [sp, #4]
 8001ea2:	f7fe f9bf 	bl	8000224 <__aeabi_uidivmod>
 8001ea6:	0409      	lsls	r1, r1, #16
 8001ea8:	464a      	mov	r2, r9
 8001eaa:	4689      	mov	r9, r1
 8001eac:	0429      	lsls	r1, r5, #16
 8001eae:	464d      	mov	r5, r9
 8001eb0:	4342      	muls	r2, r0
 8001eb2:	0c09      	lsrs	r1, r1, #16
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	4329      	orrs	r1, r5
 8001eb8:	428a      	cmp	r2, r1
 8001eba:	d907      	bls.n	8001ecc <__aeabi_ddiv+0x3d8>
 8001ebc:	1989      	adds	r1, r1, r6
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	428e      	cmp	r6, r1
 8001ec2:	d803      	bhi.n	8001ecc <__aeabi_ddiv+0x3d8>
 8001ec4:	428a      	cmp	r2, r1
 8001ec6:	d901      	bls.n	8001ecc <__aeabi_ddiv+0x3d8>
 8001ec8:	1e83      	subs	r3, r0, #2
 8001eca:	1989      	adds	r1, r1, r6
 8001ecc:	043f      	lsls	r7, r7, #16
 8001ece:	1a89      	subs	r1, r1, r2
 8001ed0:	003a      	movs	r2, r7
 8001ed2:	9f03      	ldr	r7, [sp, #12]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	0038      	movs	r0, r7
 8001ed8:	0413      	lsls	r3, r2, #16
 8001eda:	0c1b      	lsrs	r3, r3, #16
 8001edc:	4358      	muls	r0, r3
 8001ede:	4681      	mov	r9, r0
 8001ee0:	9802      	ldr	r0, [sp, #8]
 8001ee2:	0c15      	lsrs	r5, r2, #16
 8001ee4:	436f      	muls	r7, r5
 8001ee6:	4343      	muls	r3, r0
 8001ee8:	4345      	muls	r5, r0
 8001eea:	4648      	mov	r0, r9
 8001eec:	0c00      	lsrs	r0, r0, #16
 8001eee:	4684      	mov	ip, r0
 8001ef0:	19db      	adds	r3, r3, r7
 8001ef2:	4463      	add	r3, ip
 8001ef4:	429f      	cmp	r7, r3
 8001ef6:	d903      	bls.n	8001f00 <__aeabi_ddiv+0x40c>
 8001ef8:	2080      	movs	r0, #128	; 0x80
 8001efa:	0240      	lsls	r0, r0, #9
 8001efc:	4684      	mov	ip, r0
 8001efe:	4465      	add	r5, ip
 8001f00:	4648      	mov	r0, r9
 8001f02:	0c1f      	lsrs	r7, r3, #16
 8001f04:	0400      	lsls	r0, r0, #16
 8001f06:	041b      	lsls	r3, r3, #16
 8001f08:	0c00      	lsrs	r0, r0, #16
 8001f0a:	197d      	adds	r5, r7, r5
 8001f0c:	1818      	adds	r0, r3, r0
 8001f0e:	42a9      	cmp	r1, r5
 8001f10:	d200      	bcs.n	8001f14 <__aeabi_ddiv+0x420>
 8001f12:	e084      	b.n	800201e <__aeabi_ddiv+0x52a>
 8001f14:	d100      	bne.n	8001f18 <__aeabi_ddiv+0x424>
 8001f16:	e07f      	b.n	8002018 <__aeabi_ddiv+0x524>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	e657      	b.n	8001bce <__aeabi_ddiv+0xda>
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	464a      	mov	r2, r9
 8001f22:	031b      	lsls	r3, r3, #12
 8001f24:	4313      	orrs	r3, r2
 8001f26:	031b      	lsls	r3, r3, #12
 8001f28:	0b1b      	lsrs	r3, r3, #12
 8001f2a:	46aa      	mov	sl, r5
 8001f2c:	4a6f      	ldr	r2, [pc, #444]	; (80020ec <__aeabi_ddiv+0x5f8>)
 8001f2e:	e66f      	b.n	8001c10 <__aeabi_ddiv+0x11c>
 8001f30:	42ba      	cmp	r2, r7
 8001f32:	d900      	bls.n	8001f36 <__aeabi_ddiv+0x442>
 8001f34:	e735      	b.n	8001da2 <__aeabi_ddiv+0x2ae>
 8001f36:	464b      	mov	r3, r9
 8001f38:	07dc      	lsls	r4, r3, #31
 8001f3a:	0858      	lsrs	r0, r3, #1
 8001f3c:	087b      	lsrs	r3, r7, #1
 8001f3e:	431c      	orrs	r4, r3
 8001f40:	07ff      	lsls	r7, r7, #31
 8001f42:	e734      	b.n	8001dae <__aeabi_ddiv+0x2ba>
 8001f44:	2400      	movs	r4, #0
 8001f46:	42af      	cmp	r7, r5
 8001f48:	d289      	bcs.n	8001e5e <__aeabi_ddiv+0x36a>
 8001f4a:	4447      	add	r7, r8
 8001f4c:	4547      	cmp	r7, r8
 8001f4e:	41a4      	sbcs	r4, r4
 8001f50:	465b      	mov	r3, fp
 8001f52:	4264      	negs	r4, r4
 8001f54:	19a4      	adds	r4, r4, r6
 8001f56:	1864      	adds	r4, r4, r1
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	42a6      	cmp	r6, r4
 8001f5c:	d21e      	bcs.n	8001f9c <__aeabi_ddiv+0x4a8>
 8001f5e:	42a0      	cmp	r0, r4
 8001f60:	d86d      	bhi.n	800203e <__aeabi_ddiv+0x54a>
 8001f62:	d100      	bne.n	8001f66 <__aeabi_ddiv+0x472>
 8001f64:	e0b6      	b.n	80020d4 <__aeabi_ddiv+0x5e0>
 8001f66:	1a24      	subs	r4, r4, r0
 8001f68:	469b      	mov	fp, r3
 8001f6a:	e778      	b.n	8001e5e <__aeabi_ddiv+0x36a>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	465a      	mov	r2, fp
 8001f70:	3b28      	subs	r3, #40	; 0x28
 8001f72:	409a      	lsls	r2, r3
 8001f74:	2700      	movs	r7, #0
 8001f76:	4691      	mov	r9, r2
 8001f78:	e688      	b.n	8001c8c <__aeabi_ddiv+0x198>
 8001f7a:	4658      	mov	r0, fp
 8001f7c:	f000 ffbc 	bl	8002ef8 <__clzsi2>
 8001f80:	3020      	adds	r0, #32
 8001f82:	e672      	b.n	8001c6a <__aeabi_ddiv+0x176>
 8001f84:	0003      	movs	r3, r0
 8001f86:	4652      	mov	r2, sl
 8001f88:	3b28      	subs	r3, #40	; 0x28
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	4693      	mov	fp, r2
 8001f8e:	2200      	movs	r2, #0
 8001f90:	e6b4      	b.n	8001cfc <__aeabi_ddiv+0x208>
 8001f92:	4650      	mov	r0, sl
 8001f94:	f000 ffb0 	bl	8002ef8 <__clzsi2>
 8001f98:	3020      	adds	r0, #32
 8001f9a:	e69a      	b.n	8001cd2 <__aeabi_ddiv+0x1de>
 8001f9c:	42a6      	cmp	r6, r4
 8001f9e:	d1e2      	bne.n	8001f66 <__aeabi_ddiv+0x472>
 8001fa0:	45b8      	cmp	r8, r7
 8001fa2:	d9dc      	bls.n	8001f5e <__aeabi_ddiv+0x46a>
 8001fa4:	1a34      	subs	r4, r6, r0
 8001fa6:	469b      	mov	fp, r3
 8001fa8:	e759      	b.n	8001e5e <__aeabi_ddiv+0x36a>
 8001faa:	2b1f      	cmp	r3, #31
 8001fac:	dc65      	bgt.n	800207a <__aeabi_ddiv+0x586>
 8001fae:	4c50      	ldr	r4, [pc, #320]	; (80020f0 <__aeabi_ddiv+0x5fc>)
 8001fb0:	9900      	ldr	r1, [sp, #0]
 8001fb2:	46a4      	mov	ip, r4
 8001fb4:	465c      	mov	r4, fp
 8001fb6:	4461      	add	r1, ip
 8001fb8:	0008      	movs	r0, r1
 8001fba:	408c      	lsls	r4, r1
 8001fbc:	0011      	movs	r1, r2
 8001fbe:	4082      	lsls	r2, r0
 8001fc0:	40d9      	lsrs	r1, r3
 8001fc2:	1e50      	subs	r0, r2, #1
 8001fc4:	4182      	sbcs	r2, r0
 8001fc6:	430c      	orrs	r4, r1
 8001fc8:	4314      	orrs	r4, r2
 8001fca:	465a      	mov	r2, fp
 8001fcc:	40da      	lsrs	r2, r3
 8001fce:	0013      	movs	r3, r2
 8001fd0:	0762      	lsls	r2, r4, #29
 8001fd2:	d009      	beq.n	8001fe8 <__aeabi_ddiv+0x4f4>
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	4022      	ands	r2, r4
 8001fd8:	2a04      	cmp	r2, #4
 8001fda:	d005      	beq.n	8001fe8 <__aeabi_ddiv+0x4f4>
 8001fdc:	0022      	movs	r2, r4
 8001fde:	1d14      	adds	r4, r2, #4
 8001fe0:	4294      	cmp	r4, r2
 8001fe2:	4189      	sbcs	r1, r1
 8001fe4:	4249      	negs	r1, r1
 8001fe6:	185b      	adds	r3, r3, r1
 8001fe8:	021a      	lsls	r2, r3, #8
 8001fea:	d562      	bpl.n	80020b2 <__aeabi_ddiv+0x5be>
 8001fec:	2201      	movs	r2, #1
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2700      	movs	r7, #0
 8001ff2:	e60d      	b.n	8001c10 <__aeabi_ddiv+0x11c>
 8001ff4:	428a      	cmp	r2, r1
 8001ff6:	d800      	bhi.n	8001ffa <__aeabi_ddiv+0x506>
 8001ff8:	e70a      	b.n	8001e10 <__aeabi_ddiv+0x31c>
 8001ffa:	1e83      	subs	r3, r0, #2
 8001ffc:	1989      	adds	r1, r1, r6
 8001ffe:	e707      	b.n	8001e10 <__aeabi_ddiv+0x31c>
 8002000:	230f      	movs	r3, #15
 8002002:	4013      	ands	r3, r2
 8002004:	2b04      	cmp	r3, #4
 8002006:	d100      	bne.n	800200a <__aeabi_ddiv+0x516>
 8002008:	e5e6      	b.n	8001bd8 <__aeabi_ddiv+0xe4>
 800200a:	1d17      	adds	r7, r2, #4
 800200c:	4297      	cmp	r7, r2
 800200e:	4192      	sbcs	r2, r2
 8002010:	4253      	negs	r3, r2
 8002012:	449b      	add	fp, r3
 8002014:	08fa      	lsrs	r2, r7, #3
 8002016:	e5e0      	b.n	8001bda <__aeabi_ddiv+0xe6>
 8002018:	2800      	cmp	r0, #0
 800201a:	d100      	bne.n	800201e <__aeabi_ddiv+0x52a>
 800201c:	e5d7      	b.n	8001bce <__aeabi_ddiv+0xda>
 800201e:	1871      	adds	r1, r6, r1
 8002020:	1e53      	subs	r3, r2, #1
 8002022:	42b1      	cmp	r1, r6
 8002024:	d327      	bcc.n	8002076 <__aeabi_ddiv+0x582>
 8002026:	42a9      	cmp	r1, r5
 8002028:	d315      	bcc.n	8002056 <__aeabi_ddiv+0x562>
 800202a:	d058      	beq.n	80020de <__aeabi_ddiv+0x5ea>
 800202c:	001a      	movs	r2, r3
 800202e:	e773      	b.n	8001f18 <__aeabi_ddiv+0x424>
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x542>
 8002034:	e604      	b.n	8001c40 <__aeabi_ddiv+0x14c>
 8002036:	2301      	movs	r3, #1
 8002038:	2200      	movs	r2, #0
 800203a:	449b      	add	fp, r3
 800203c:	e5cd      	b.n	8001bda <__aeabi_ddiv+0xe6>
 800203e:	2302      	movs	r3, #2
 8002040:	4447      	add	r7, r8
 8002042:	4547      	cmp	r7, r8
 8002044:	4189      	sbcs	r1, r1
 8002046:	425b      	negs	r3, r3
 8002048:	469c      	mov	ip, r3
 800204a:	4249      	negs	r1, r1
 800204c:	1989      	adds	r1, r1, r6
 800204e:	190c      	adds	r4, r1, r4
 8002050:	44e3      	add	fp, ip
 8002052:	1a24      	subs	r4, r4, r0
 8002054:	e703      	b.n	8001e5e <__aeabi_ddiv+0x36a>
 8002056:	4643      	mov	r3, r8
 8002058:	005f      	lsls	r7, r3, #1
 800205a:	4547      	cmp	r7, r8
 800205c:	419b      	sbcs	r3, r3
 800205e:	46b8      	mov	r8, r7
 8002060:	425b      	negs	r3, r3
 8002062:	199e      	adds	r6, r3, r6
 8002064:	3a02      	subs	r2, #2
 8002066:	1989      	adds	r1, r1, r6
 8002068:	42a9      	cmp	r1, r5
 800206a:	d000      	beq.n	800206e <__aeabi_ddiv+0x57a>
 800206c:	e754      	b.n	8001f18 <__aeabi_ddiv+0x424>
 800206e:	4540      	cmp	r0, r8
 8002070:	d000      	beq.n	8002074 <__aeabi_ddiv+0x580>
 8002072:	e751      	b.n	8001f18 <__aeabi_ddiv+0x424>
 8002074:	e5ab      	b.n	8001bce <__aeabi_ddiv+0xda>
 8002076:	001a      	movs	r2, r3
 8002078:	e7f6      	b.n	8002068 <__aeabi_ddiv+0x574>
 800207a:	211f      	movs	r1, #31
 800207c:	465f      	mov	r7, fp
 800207e:	4249      	negs	r1, r1
 8002080:	1b0c      	subs	r4, r1, r4
 8002082:	40e7      	lsrs	r7, r4
 8002084:	2b20      	cmp	r3, #32
 8002086:	d007      	beq.n	8002098 <__aeabi_ddiv+0x5a4>
 8002088:	491a      	ldr	r1, [pc, #104]	; (80020f4 <__aeabi_ddiv+0x600>)
 800208a:	9b00      	ldr	r3, [sp, #0]
 800208c:	468c      	mov	ip, r1
 800208e:	4463      	add	r3, ip
 8002090:	0018      	movs	r0, r3
 8002092:	465b      	mov	r3, fp
 8002094:	4083      	lsls	r3, r0
 8002096:	431a      	orrs	r2, r3
 8002098:	1e50      	subs	r0, r2, #1
 800209a:	4182      	sbcs	r2, r0
 800209c:	433a      	orrs	r2, r7
 800209e:	2707      	movs	r7, #7
 80020a0:	2300      	movs	r3, #0
 80020a2:	4017      	ands	r7, r2
 80020a4:	d009      	beq.n	80020ba <__aeabi_ddiv+0x5c6>
 80020a6:	210f      	movs	r1, #15
 80020a8:	2300      	movs	r3, #0
 80020aa:	4011      	ands	r1, r2
 80020ac:	0014      	movs	r4, r2
 80020ae:	2904      	cmp	r1, #4
 80020b0:	d195      	bne.n	8001fde <__aeabi_ddiv+0x4ea>
 80020b2:	0022      	movs	r2, r4
 80020b4:	075f      	lsls	r7, r3, #29
 80020b6:	025b      	lsls	r3, r3, #9
 80020b8:	0b1b      	lsrs	r3, r3, #12
 80020ba:	08d2      	lsrs	r2, r2, #3
 80020bc:	4317      	orrs	r7, r2
 80020be:	2200      	movs	r2, #0
 80020c0:	e5a6      	b.n	8001c10 <__aeabi_ddiv+0x11c>
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	4659      	mov	r1, fp
 80020c6:	031b      	lsls	r3, r3, #12
 80020c8:	430b      	orrs	r3, r1
 80020ca:	031b      	lsls	r3, r3, #12
 80020cc:	0017      	movs	r7, r2
 80020ce:	0b1b      	lsrs	r3, r3, #12
 80020d0:	4a06      	ldr	r2, [pc, #24]	; (80020ec <__aeabi_ddiv+0x5f8>)
 80020d2:	e59d      	b.n	8001c10 <__aeabi_ddiv+0x11c>
 80020d4:	42bd      	cmp	r5, r7
 80020d6:	d8b2      	bhi.n	800203e <__aeabi_ddiv+0x54a>
 80020d8:	469b      	mov	fp, r3
 80020da:	2400      	movs	r4, #0
 80020dc:	e6bf      	b.n	8001e5e <__aeabi_ddiv+0x36a>
 80020de:	4580      	cmp	r8, r0
 80020e0:	d3b9      	bcc.n	8002056 <__aeabi_ddiv+0x562>
 80020e2:	001a      	movs	r2, r3
 80020e4:	e7c3      	b.n	800206e <__aeabi_ddiv+0x57a>
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	000003ff 	.word	0x000003ff
 80020ec:	000007ff 	.word	0x000007ff
 80020f0:	0000041e 	.word	0x0000041e
 80020f4:	0000043e 	.word	0x0000043e

080020f8 <__aeabi_dmul>:
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fa:	4657      	mov	r7, sl
 80020fc:	46de      	mov	lr, fp
 80020fe:	464e      	mov	r6, r9
 8002100:	4645      	mov	r5, r8
 8002102:	b5e0      	push	{r5, r6, r7, lr}
 8002104:	4683      	mov	fp, r0
 8002106:	0006      	movs	r6, r0
 8002108:	030f      	lsls	r7, r1, #12
 800210a:	0048      	lsls	r0, r1, #1
 800210c:	b087      	sub	sp, #28
 800210e:	4692      	mov	sl, r2
 8002110:	001d      	movs	r5, r3
 8002112:	0b3f      	lsrs	r7, r7, #12
 8002114:	0d40      	lsrs	r0, r0, #21
 8002116:	0fcc      	lsrs	r4, r1, #31
 8002118:	2800      	cmp	r0, #0
 800211a:	d100      	bne.n	800211e <__aeabi_dmul+0x26>
 800211c:	e06f      	b.n	80021fe <__aeabi_dmul+0x106>
 800211e:	4bde      	ldr	r3, [pc, #888]	; (8002498 <__aeabi_dmul+0x3a0>)
 8002120:	4298      	cmp	r0, r3
 8002122:	d038      	beq.n	8002196 <__aeabi_dmul+0x9e>
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	00ff      	lsls	r7, r7, #3
 8002128:	041b      	lsls	r3, r3, #16
 800212a:	431f      	orrs	r7, r3
 800212c:	0f73      	lsrs	r3, r6, #29
 800212e:	433b      	orrs	r3, r7
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	4bda      	ldr	r3, [pc, #872]	; (800249c <__aeabi_dmul+0x3a4>)
 8002134:	2700      	movs	r7, #0
 8002136:	4699      	mov	r9, r3
 8002138:	2300      	movs	r3, #0
 800213a:	469b      	mov	fp, r3
 800213c:	00f6      	lsls	r6, r6, #3
 800213e:	4481      	add	r9, r0
 8002140:	032b      	lsls	r3, r5, #12
 8002142:	0069      	lsls	r1, r5, #1
 8002144:	0b1b      	lsrs	r3, r3, #12
 8002146:	4652      	mov	r2, sl
 8002148:	4698      	mov	r8, r3
 800214a:	0d49      	lsrs	r1, r1, #21
 800214c:	0fed      	lsrs	r5, r5, #31
 800214e:	2900      	cmp	r1, #0
 8002150:	d100      	bne.n	8002154 <__aeabi_dmul+0x5c>
 8002152:	e085      	b.n	8002260 <__aeabi_dmul+0x168>
 8002154:	4bd0      	ldr	r3, [pc, #832]	; (8002498 <__aeabi_dmul+0x3a0>)
 8002156:	4299      	cmp	r1, r3
 8002158:	d100      	bne.n	800215c <__aeabi_dmul+0x64>
 800215a:	e073      	b.n	8002244 <__aeabi_dmul+0x14c>
 800215c:	4643      	mov	r3, r8
 800215e:	00da      	lsls	r2, r3, #3
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	041b      	lsls	r3, r3, #16
 8002164:	4313      	orrs	r3, r2
 8002166:	4652      	mov	r2, sl
 8002168:	48cc      	ldr	r0, [pc, #816]	; (800249c <__aeabi_dmul+0x3a4>)
 800216a:	0f52      	lsrs	r2, r2, #29
 800216c:	4684      	mov	ip, r0
 800216e:	4313      	orrs	r3, r2
 8002170:	4652      	mov	r2, sl
 8002172:	2000      	movs	r0, #0
 8002174:	4461      	add	r1, ip
 8002176:	00d2      	lsls	r2, r2, #3
 8002178:	4489      	add	r9, r1
 800217a:	0021      	movs	r1, r4
 800217c:	4069      	eors	r1, r5
 800217e:	9100      	str	r1, [sp, #0]
 8002180:	468c      	mov	ip, r1
 8002182:	2101      	movs	r1, #1
 8002184:	4449      	add	r1, r9
 8002186:	468a      	mov	sl, r1
 8002188:	2f0f      	cmp	r7, #15
 800218a:	d900      	bls.n	800218e <__aeabi_dmul+0x96>
 800218c:	e090      	b.n	80022b0 <__aeabi_dmul+0x1b8>
 800218e:	49c4      	ldr	r1, [pc, #784]	; (80024a0 <__aeabi_dmul+0x3a8>)
 8002190:	00bf      	lsls	r7, r7, #2
 8002192:	59cf      	ldr	r7, [r1, r7]
 8002194:	46bf      	mov	pc, r7
 8002196:	465b      	mov	r3, fp
 8002198:	433b      	orrs	r3, r7
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	d000      	beq.n	80021a0 <__aeabi_dmul+0xa8>
 800219e:	e16a      	b.n	8002476 <__aeabi_dmul+0x37e>
 80021a0:	2302      	movs	r3, #2
 80021a2:	2708      	movs	r7, #8
 80021a4:	2600      	movs	r6, #0
 80021a6:	4681      	mov	r9, r0
 80021a8:	469b      	mov	fp, r3
 80021aa:	e7c9      	b.n	8002140 <__aeabi_dmul+0x48>
 80021ac:	0032      	movs	r2, r6
 80021ae:	4658      	mov	r0, fp
 80021b0:	9b01      	ldr	r3, [sp, #4]
 80021b2:	4661      	mov	r1, ip
 80021b4:	9100      	str	r1, [sp, #0]
 80021b6:	2802      	cmp	r0, #2
 80021b8:	d100      	bne.n	80021bc <__aeabi_dmul+0xc4>
 80021ba:	e075      	b.n	80022a8 <__aeabi_dmul+0x1b0>
 80021bc:	2803      	cmp	r0, #3
 80021be:	d100      	bne.n	80021c2 <__aeabi_dmul+0xca>
 80021c0:	e1fe      	b.n	80025c0 <__aeabi_dmul+0x4c8>
 80021c2:	2801      	cmp	r0, #1
 80021c4:	d000      	beq.n	80021c8 <__aeabi_dmul+0xd0>
 80021c6:	e12c      	b.n	8002422 <__aeabi_dmul+0x32a>
 80021c8:	2300      	movs	r3, #0
 80021ca:	2700      	movs	r7, #0
 80021cc:	2600      	movs	r6, #0
 80021ce:	2500      	movs	r5, #0
 80021d0:	033f      	lsls	r7, r7, #12
 80021d2:	0d2a      	lsrs	r2, r5, #20
 80021d4:	0b3f      	lsrs	r7, r7, #12
 80021d6:	48b3      	ldr	r0, [pc, #716]	; (80024a4 <__aeabi_dmul+0x3ac>)
 80021d8:	0512      	lsls	r2, r2, #20
 80021da:	433a      	orrs	r2, r7
 80021dc:	4002      	ands	r2, r0
 80021de:	051b      	lsls	r3, r3, #20
 80021e0:	4313      	orrs	r3, r2
 80021e2:	9a00      	ldr	r2, [sp, #0]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	07d1      	lsls	r1, r2, #31
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	430b      	orrs	r3, r1
 80021ec:	0030      	movs	r0, r6
 80021ee:	0019      	movs	r1, r3
 80021f0:	b007      	add	sp, #28
 80021f2:	bc3c      	pop	{r2, r3, r4, r5}
 80021f4:	4690      	mov	r8, r2
 80021f6:	4699      	mov	r9, r3
 80021f8:	46a2      	mov	sl, r4
 80021fa:	46ab      	mov	fp, r5
 80021fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fe:	465b      	mov	r3, fp
 8002200:	433b      	orrs	r3, r7
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	d100      	bne.n	8002208 <__aeabi_dmul+0x110>
 8002206:	e12f      	b.n	8002468 <__aeabi_dmul+0x370>
 8002208:	2f00      	cmp	r7, #0
 800220a:	d100      	bne.n	800220e <__aeabi_dmul+0x116>
 800220c:	e1a5      	b.n	800255a <__aeabi_dmul+0x462>
 800220e:	0038      	movs	r0, r7
 8002210:	f000 fe72 	bl	8002ef8 <__clzsi2>
 8002214:	0003      	movs	r3, r0
 8002216:	3b0b      	subs	r3, #11
 8002218:	2b1c      	cmp	r3, #28
 800221a:	dd00      	ble.n	800221e <__aeabi_dmul+0x126>
 800221c:	e196      	b.n	800254c <__aeabi_dmul+0x454>
 800221e:	221d      	movs	r2, #29
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	465a      	mov	r2, fp
 8002224:	0001      	movs	r1, r0
 8002226:	40da      	lsrs	r2, r3
 8002228:	465e      	mov	r6, fp
 800222a:	3908      	subs	r1, #8
 800222c:	408f      	lsls	r7, r1
 800222e:	0013      	movs	r3, r2
 8002230:	408e      	lsls	r6, r1
 8002232:	433b      	orrs	r3, r7
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	4b9c      	ldr	r3, [pc, #624]	; (80024a8 <__aeabi_dmul+0x3b0>)
 8002238:	2700      	movs	r7, #0
 800223a:	1a1b      	subs	r3, r3, r0
 800223c:	4699      	mov	r9, r3
 800223e:	2300      	movs	r3, #0
 8002240:	469b      	mov	fp, r3
 8002242:	e77d      	b.n	8002140 <__aeabi_dmul+0x48>
 8002244:	4641      	mov	r1, r8
 8002246:	4653      	mov	r3, sl
 8002248:	430b      	orrs	r3, r1
 800224a:	4993      	ldr	r1, [pc, #588]	; (8002498 <__aeabi_dmul+0x3a0>)
 800224c:	468c      	mov	ip, r1
 800224e:	44e1      	add	r9, ip
 8002250:	2b00      	cmp	r3, #0
 8002252:	d000      	beq.n	8002256 <__aeabi_dmul+0x15e>
 8002254:	e11a      	b.n	800248c <__aeabi_dmul+0x394>
 8002256:	2202      	movs	r2, #2
 8002258:	2002      	movs	r0, #2
 800225a:	4317      	orrs	r7, r2
 800225c:	2200      	movs	r2, #0
 800225e:	e78c      	b.n	800217a <__aeabi_dmul+0x82>
 8002260:	4313      	orrs	r3, r2
 8002262:	d100      	bne.n	8002266 <__aeabi_dmul+0x16e>
 8002264:	e10d      	b.n	8002482 <__aeabi_dmul+0x38a>
 8002266:	4643      	mov	r3, r8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d100      	bne.n	800226e <__aeabi_dmul+0x176>
 800226c:	e181      	b.n	8002572 <__aeabi_dmul+0x47a>
 800226e:	4640      	mov	r0, r8
 8002270:	f000 fe42 	bl	8002ef8 <__clzsi2>
 8002274:	0002      	movs	r2, r0
 8002276:	3a0b      	subs	r2, #11
 8002278:	2a1c      	cmp	r2, #28
 800227a:	dd00      	ble.n	800227e <__aeabi_dmul+0x186>
 800227c:	e172      	b.n	8002564 <__aeabi_dmul+0x46c>
 800227e:	0001      	movs	r1, r0
 8002280:	4643      	mov	r3, r8
 8002282:	3908      	subs	r1, #8
 8002284:	408b      	lsls	r3, r1
 8002286:	4698      	mov	r8, r3
 8002288:	231d      	movs	r3, #29
 800228a:	1a9a      	subs	r2, r3, r2
 800228c:	4653      	mov	r3, sl
 800228e:	40d3      	lsrs	r3, r2
 8002290:	001a      	movs	r2, r3
 8002292:	4643      	mov	r3, r8
 8002294:	4313      	orrs	r3, r2
 8002296:	4652      	mov	r2, sl
 8002298:	408a      	lsls	r2, r1
 800229a:	4649      	mov	r1, r9
 800229c:	1a08      	subs	r0, r1, r0
 800229e:	4982      	ldr	r1, [pc, #520]	; (80024a8 <__aeabi_dmul+0x3b0>)
 80022a0:	4689      	mov	r9, r1
 80022a2:	4481      	add	r9, r0
 80022a4:	2000      	movs	r0, #0
 80022a6:	e768      	b.n	800217a <__aeabi_dmul+0x82>
 80022a8:	4b7b      	ldr	r3, [pc, #492]	; (8002498 <__aeabi_dmul+0x3a0>)
 80022aa:	2700      	movs	r7, #0
 80022ac:	2600      	movs	r6, #0
 80022ae:	e78e      	b.n	80021ce <__aeabi_dmul+0xd6>
 80022b0:	0c14      	lsrs	r4, r2, #16
 80022b2:	0412      	lsls	r2, r2, #16
 80022b4:	0c12      	lsrs	r2, r2, #16
 80022b6:	0011      	movs	r1, r2
 80022b8:	0c37      	lsrs	r7, r6, #16
 80022ba:	0436      	lsls	r6, r6, #16
 80022bc:	0c35      	lsrs	r5, r6, #16
 80022be:	4379      	muls	r1, r7
 80022c0:	0028      	movs	r0, r5
 80022c2:	468c      	mov	ip, r1
 80022c4:	002e      	movs	r6, r5
 80022c6:	4360      	muls	r0, r4
 80022c8:	4460      	add	r0, ip
 80022ca:	4683      	mov	fp, r0
 80022cc:	4356      	muls	r6, r2
 80022ce:	0021      	movs	r1, r4
 80022d0:	0c30      	lsrs	r0, r6, #16
 80022d2:	4680      	mov	r8, r0
 80022d4:	4658      	mov	r0, fp
 80022d6:	4379      	muls	r1, r7
 80022d8:	4440      	add	r0, r8
 80022da:	9102      	str	r1, [sp, #8]
 80022dc:	4584      	cmp	ip, r0
 80022de:	d906      	bls.n	80022ee <__aeabi_dmul+0x1f6>
 80022e0:	4688      	mov	r8, r1
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	0249      	lsls	r1, r1, #9
 80022e6:	468c      	mov	ip, r1
 80022e8:	44e0      	add	r8, ip
 80022ea:	4641      	mov	r1, r8
 80022ec:	9102      	str	r1, [sp, #8]
 80022ee:	0436      	lsls	r6, r6, #16
 80022f0:	0c01      	lsrs	r1, r0, #16
 80022f2:	0c36      	lsrs	r6, r6, #16
 80022f4:	0400      	lsls	r0, r0, #16
 80022f6:	468b      	mov	fp, r1
 80022f8:	1981      	adds	r1, r0, r6
 80022fa:	0c1e      	lsrs	r6, r3, #16
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	0c1b      	lsrs	r3, r3, #16
 8002300:	9103      	str	r1, [sp, #12]
 8002302:	0019      	movs	r1, r3
 8002304:	4379      	muls	r1, r7
 8002306:	468c      	mov	ip, r1
 8002308:	0028      	movs	r0, r5
 800230a:	4375      	muls	r5, r6
 800230c:	4465      	add	r5, ip
 800230e:	46a8      	mov	r8, r5
 8002310:	4358      	muls	r0, r3
 8002312:	0c05      	lsrs	r5, r0, #16
 8002314:	4445      	add	r5, r8
 8002316:	4377      	muls	r7, r6
 8002318:	42a9      	cmp	r1, r5
 800231a:	d903      	bls.n	8002324 <__aeabi_dmul+0x22c>
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	0249      	lsls	r1, r1, #9
 8002320:	468c      	mov	ip, r1
 8002322:	4467      	add	r7, ip
 8002324:	0c29      	lsrs	r1, r5, #16
 8002326:	468c      	mov	ip, r1
 8002328:	0039      	movs	r1, r7
 800232a:	0400      	lsls	r0, r0, #16
 800232c:	0c00      	lsrs	r0, r0, #16
 800232e:	042d      	lsls	r5, r5, #16
 8002330:	182d      	adds	r5, r5, r0
 8002332:	4461      	add	r1, ip
 8002334:	44ab      	add	fp, r5
 8002336:	9105      	str	r1, [sp, #20]
 8002338:	4659      	mov	r1, fp
 800233a:	9104      	str	r1, [sp, #16]
 800233c:	9901      	ldr	r1, [sp, #4]
 800233e:	040f      	lsls	r7, r1, #16
 8002340:	0c3f      	lsrs	r7, r7, #16
 8002342:	0c08      	lsrs	r0, r1, #16
 8002344:	0039      	movs	r1, r7
 8002346:	4351      	muls	r1, r2
 8002348:	4342      	muls	r2, r0
 800234a:	4690      	mov	r8, r2
 800234c:	0002      	movs	r2, r0
 800234e:	468c      	mov	ip, r1
 8002350:	0c09      	lsrs	r1, r1, #16
 8002352:	468b      	mov	fp, r1
 8002354:	4362      	muls	r2, r4
 8002356:	437c      	muls	r4, r7
 8002358:	4444      	add	r4, r8
 800235a:	445c      	add	r4, fp
 800235c:	45a0      	cmp	r8, r4
 800235e:	d903      	bls.n	8002368 <__aeabi_dmul+0x270>
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	0249      	lsls	r1, r1, #9
 8002364:	4688      	mov	r8, r1
 8002366:	4442      	add	r2, r8
 8002368:	0c21      	lsrs	r1, r4, #16
 800236a:	4688      	mov	r8, r1
 800236c:	4661      	mov	r1, ip
 800236e:	0409      	lsls	r1, r1, #16
 8002370:	0c09      	lsrs	r1, r1, #16
 8002372:	468c      	mov	ip, r1
 8002374:	0039      	movs	r1, r7
 8002376:	4359      	muls	r1, r3
 8002378:	4343      	muls	r3, r0
 800237a:	4370      	muls	r0, r6
 800237c:	437e      	muls	r6, r7
 800237e:	0c0f      	lsrs	r7, r1, #16
 8002380:	18f6      	adds	r6, r6, r3
 8002382:	0424      	lsls	r4, r4, #16
 8002384:	19be      	adds	r6, r7, r6
 8002386:	4464      	add	r4, ip
 8002388:	4442      	add	r2, r8
 800238a:	468c      	mov	ip, r1
 800238c:	42b3      	cmp	r3, r6
 800238e:	d903      	bls.n	8002398 <__aeabi_dmul+0x2a0>
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	025b      	lsls	r3, r3, #9
 8002394:	4698      	mov	r8, r3
 8002396:	4440      	add	r0, r8
 8002398:	9b02      	ldr	r3, [sp, #8]
 800239a:	4661      	mov	r1, ip
 800239c:	4698      	mov	r8, r3
 800239e:	9b04      	ldr	r3, [sp, #16]
 80023a0:	0437      	lsls	r7, r6, #16
 80023a2:	4443      	add	r3, r8
 80023a4:	469b      	mov	fp, r3
 80023a6:	45ab      	cmp	fp, r5
 80023a8:	41ad      	sbcs	r5, r5
 80023aa:	426b      	negs	r3, r5
 80023ac:	040d      	lsls	r5, r1, #16
 80023ae:	9905      	ldr	r1, [sp, #20]
 80023b0:	0c2d      	lsrs	r5, r5, #16
 80023b2:	468c      	mov	ip, r1
 80023b4:	197f      	adds	r7, r7, r5
 80023b6:	4467      	add	r7, ip
 80023b8:	18fd      	adds	r5, r7, r3
 80023ba:	46a8      	mov	r8, r5
 80023bc:	465d      	mov	r5, fp
 80023be:	192d      	adds	r5, r5, r4
 80023c0:	42a5      	cmp	r5, r4
 80023c2:	41a4      	sbcs	r4, r4
 80023c4:	4693      	mov	fp, r2
 80023c6:	4264      	negs	r4, r4
 80023c8:	46a4      	mov	ip, r4
 80023ca:	44c3      	add	fp, r8
 80023cc:	44dc      	add	ip, fp
 80023ce:	428f      	cmp	r7, r1
 80023d0:	41bf      	sbcs	r7, r7
 80023d2:	4598      	cmp	r8, r3
 80023d4:	419b      	sbcs	r3, r3
 80023d6:	4593      	cmp	fp, r2
 80023d8:	4192      	sbcs	r2, r2
 80023da:	45a4      	cmp	ip, r4
 80023dc:	41a4      	sbcs	r4, r4
 80023de:	425b      	negs	r3, r3
 80023e0:	427f      	negs	r7, r7
 80023e2:	431f      	orrs	r7, r3
 80023e4:	0c36      	lsrs	r6, r6, #16
 80023e6:	4252      	negs	r2, r2
 80023e8:	4264      	negs	r4, r4
 80023ea:	19bf      	adds	r7, r7, r6
 80023ec:	4322      	orrs	r2, r4
 80023ee:	18bf      	adds	r7, r7, r2
 80023f0:	4662      	mov	r2, ip
 80023f2:	1838      	adds	r0, r7, r0
 80023f4:	0243      	lsls	r3, r0, #9
 80023f6:	0dd2      	lsrs	r2, r2, #23
 80023f8:	9903      	ldr	r1, [sp, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	026a      	lsls	r2, r5, #9
 80023fe:	430a      	orrs	r2, r1
 8002400:	1e50      	subs	r0, r2, #1
 8002402:	4182      	sbcs	r2, r0
 8002404:	4661      	mov	r1, ip
 8002406:	0ded      	lsrs	r5, r5, #23
 8002408:	432a      	orrs	r2, r5
 800240a:	024e      	lsls	r6, r1, #9
 800240c:	4332      	orrs	r2, r6
 800240e:	01d9      	lsls	r1, r3, #7
 8002410:	d400      	bmi.n	8002414 <__aeabi_dmul+0x31c>
 8002412:	e0b3      	b.n	800257c <__aeabi_dmul+0x484>
 8002414:	2601      	movs	r6, #1
 8002416:	0850      	lsrs	r0, r2, #1
 8002418:	4032      	ands	r2, r6
 800241a:	4302      	orrs	r2, r0
 800241c:	07de      	lsls	r6, r3, #31
 800241e:	4332      	orrs	r2, r6
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	4c22      	ldr	r4, [pc, #136]	; (80024ac <__aeabi_dmul+0x3b4>)
 8002424:	4454      	add	r4, sl
 8002426:	2c00      	cmp	r4, #0
 8002428:	dd62      	ble.n	80024f0 <__aeabi_dmul+0x3f8>
 800242a:	0751      	lsls	r1, r2, #29
 800242c:	d009      	beq.n	8002442 <__aeabi_dmul+0x34a>
 800242e:	200f      	movs	r0, #15
 8002430:	4010      	ands	r0, r2
 8002432:	2804      	cmp	r0, #4
 8002434:	d005      	beq.n	8002442 <__aeabi_dmul+0x34a>
 8002436:	1d10      	adds	r0, r2, #4
 8002438:	4290      	cmp	r0, r2
 800243a:	4192      	sbcs	r2, r2
 800243c:	4252      	negs	r2, r2
 800243e:	189b      	adds	r3, r3, r2
 8002440:	0002      	movs	r2, r0
 8002442:	01d9      	lsls	r1, r3, #7
 8002444:	d504      	bpl.n	8002450 <__aeabi_dmul+0x358>
 8002446:	2480      	movs	r4, #128	; 0x80
 8002448:	4819      	ldr	r0, [pc, #100]	; (80024b0 <__aeabi_dmul+0x3b8>)
 800244a:	00e4      	lsls	r4, r4, #3
 800244c:	4003      	ands	r3, r0
 800244e:	4454      	add	r4, sl
 8002450:	4818      	ldr	r0, [pc, #96]	; (80024b4 <__aeabi_dmul+0x3bc>)
 8002452:	4284      	cmp	r4, r0
 8002454:	dd00      	ble.n	8002458 <__aeabi_dmul+0x360>
 8002456:	e727      	b.n	80022a8 <__aeabi_dmul+0x1b0>
 8002458:	075e      	lsls	r6, r3, #29
 800245a:	025b      	lsls	r3, r3, #9
 800245c:	08d2      	lsrs	r2, r2, #3
 800245e:	0b1f      	lsrs	r7, r3, #12
 8002460:	0563      	lsls	r3, r4, #21
 8002462:	4316      	orrs	r6, r2
 8002464:	0d5b      	lsrs	r3, r3, #21
 8002466:	e6b2      	b.n	80021ce <__aeabi_dmul+0xd6>
 8002468:	2300      	movs	r3, #0
 800246a:	4699      	mov	r9, r3
 800246c:	3301      	adds	r3, #1
 800246e:	2704      	movs	r7, #4
 8002470:	2600      	movs	r6, #0
 8002472:	469b      	mov	fp, r3
 8002474:	e664      	b.n	8002140 <__aeabi_dmul+0x48>
 8002476:	2303      	movs	r3, #3
 8002478:	9701      	str	r7, [sp, #4]
 800247a:	4681      	mov	r9, r0
 800247c:	270c      	movs	r7, #12
 800247e:	469b      	mov	fp, r3
 8002480:	e65e      	b.n	8002140 <__aeabi_dmul+0x48>
 8002482:	2201      	movs	r2, #1
 8002484:	2001      	movs	r0, #1
 8002486:	4317      	orrs	r7, r2
 8002488:	2200      	movs	r2, #0
 800248a:	e676      	b.n	800217a <__aeabi_dmul+0x82>
 800248c:	2303      	movs	r3, #3
 800248e:	2003      	movs	r0, #3
 8002490:	431f      	orrs	r7, r3
 8002492:	4643      	mov	r3, r8
 8002494:	e671      	b.n	800217a <__aeabi_dmul+0x82>
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	000007ff 	.word	0x000007ff
 800249c:	fffffc01 	.word	0xfffffc01
 80024a0:	0800b378 	.word	0x0800b378
 80024a4:	800fffff 	.word	0x800fffff
 80024a8:	fffffc0d 	.word	0xfffffc0d
 80024ac:	000003ff 	.word	0x000003ff
 80024b0:	feffffff 	.word	0xfeffffff
 80024b4:	000007fe 	.word	0x000007fe
 80024b8:	2300      	movs	r3, #0
 80024ba:	2780      	movs	r7, #128	; 0x80
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	033f      	lsls	r7, r7, #12
 80024c0:	2600      	movs	r6, #0
 80024c2:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <__aeabi_dmul+0x4d8>)
 80024c4:	e683      	b.n	80021ce <__aeabi_dmul+0xd6>
 80024c6:	9b01      	ldr	r3, [sp, #4]
 80024c8:	0032      	movs	r2, r6
 80024ca:	46a4      	mov	ip, r4
 80024cc:	4658      	mov	r0, fp
 80024ce:	e670      	b.n	80021b2 <__aeabi_dmul+0xba>
 80024d0:	46ac      	mov	ip, r5
 80024d2:	e66e      	b.n	80021b2 <__aeabi_dmul+0xba>
 80024d4:	2780      	movs	r7, #128	; 0x80
 80024d6:	9901      	ldr	r1, [sp, #4]
 80024d8:	033f      	lsls	r7, r7, #12
 80024da:	4239      	tst	r1, r7
 80024dc:	d02d      	beq.n	800253a <__aeabi_dmul+0x442>
 80024de:	423b      	tst	r3, r7
 80024e0:	d12b      	bne.n	800253a <__aeabi_dmul+0x442>
 80024e2:	431f      	orrs	r7, r3
 80024e4:	033f      	lsls	r7, r7, #12
 80024e6:	0b3f      	lsrs	r7, r7, #12
 80024e8:	9500      	str	r5, [sp, #0]
 80024ea:	0016      	movs	r6, r2
 80024ec:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <__aeabi_dmul+0x4d8>)
 80024ee:	e66e      	b.n	80021ce <__aeabi_dmul+0xd6>
 80024f0:	2501      	movs	r5, #1
 80024f2:	1b2d      	subs	r5, r5, r4
 80024f4:	2d38      	cmp	r5, #56	; 0x38
 80024f6:	dd00      	ble.n	80024fa <__aeabi_dmul+0x402>
 80024f8:	e666      	b.n	80021c8 <__aeabi_dmul+0xd0>
 80024fa:	2d1f      	cmp	r5, #31
 80024fc:	dc40      	bgt.n	8002580 <__aeabi_dmul+0x488>
 80024fe:	4835      	ldr	r0, [pc, #212]	; (80025d4 <__aeabi_dmul+0x4dc>)
 8002500:	001c      	movs	r4, r3
 8002502:	4450      	add	r0, sl
 8002504:	0016      	movs	r6, r2
 8002506:	4082      	lsls	r2, r0
 8002508:	4084      	lsls	r4, r0
 800250a:	40ee      	lsrs	r6, r5
 800250c:	1e50      	subs	r0, r2, #1
 800250e:	4182      	sbcs	r2, r0
 8002510:	4334      	orrs	r4, r6
 8002512:	4314      	orrs	r4, r2
 8002514:	40eb      	lsrs	r3, r5
 8002516:	0762      	lsls	r2, r4, #29
 8002518:	d009      	beq.n	800252e <__aeabi_dmul+0x436>
 800251a:	220f      	movs	r2, #15
 800251c:	4022      	ands	r2, r4
 800251e:	2a04      	cmp	r2, #4
 8002520:	d005      	beq.n	800252e <__aeabi_dmul+0x436>
 8002522:	0022      	movs	r2, r4
 8002524:	1d14      	adds	r4, r2, #4
 8002526:	4294      	cmp	r4, r2
 8002528:	4180      	sbcs	r0, r0
 800252a:	4240      	negs	r0, r0
 800252c:	181b      	adds	r3, r3, r0
 800252e:	021a      	lsls	r2, r3, #8
 8002530:	d53e      	bpl.n	80025b0 <__aeabi_dmul+0x4b8>
 8002532:	2301      	movs	r3, #1
 8002534:	2700      	movs	r7, #0
 8002536:	2600      	movs	r6, #0
 8002538:	e649      	b.n	80021ce <__aeabi_dmul+0xd6>
 800253a:	2780      	movs	r7, #128	; 0x80
 800253c:	9b01      	ldr	r3, [sp, #4]
 800253e:	033f      	lsls	r7, r7, #12
 8002540:	431f      	orrs	r7, r3
 8002542:	033f      	lsls	r7, r7, #12
 8002544:	0b3f      	lsrs	r7, r7, #12
 8002546:	9400      	str	r4, [sp, #0]
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <__aeabi_dmul+0x4d8>)
 800254a:	e640      	b.n	80021ce <__aeabi_dmul+0xd6>
 800254c:	0003      	movs	r3, r0
 800254e:	465a      	mov	r2, fp
 8002550:	3b28      	subs	r3, #40	; 0x28
 8002552:	409a      	lsls	r2, r3
 8002554:	2600      	movs	r6, #0
 8002556:	9201      	str	r2, [sp, #4]
 8002558:	e66d      	b.n	8002236 <__aeabi_dmul+0x13e>
 800255a:	4658      	mov	r0, fp
 800255c:	f000 fccc 	bl	8002ef8 <__clzsi2>
 8002560:	3020      	adds	r0, #32
 8002562:	e657      	b.n	8002214 <__aeabi_dmul+0x11c>
 8002564:	0003      	movs	r3, r0
 8002566:	4652      	mov	r2, sl
 8002568:	3b28      	subs	r3, #40	; 0x28
 800256a:	409a      	lsls	r2, r3
 800256c:	0013      	movs	r3, r2
 800256e:	2200      	movs	r2, #0
 8002570:	e693      	b.n	800229a <__aeabi_dmul+0x1a2>
 8002572:	4650      	mov	r0, sl
 8002574:	f000 fcc0 	bl	8002ef8 <__clzsi2>
 8002578:	3020      	adds	r0, #32
 800257a:	e67b      	b.n	8002274 <__aeabi_dmul+0x17c>
 800257c:	46ca      	mov	sl, r9
 800257e:	e750      	b.n	8002422 <__aeabi_dmul+0x32a>
 8002580:	201f      	movs	r0, #31
 8002582:	001e      	movs	r6, r3
 8002584:	4240      	negs	r0, r0
 8002586:	1b04      	subs	r4, r0, r4
 8002588:	40e6      	lsrs	r6, r4
 800258a:	2d20      	cmp	r5, #32
 800258c:	d003      	beq.n	8002596 <__aeabi_dmul+0x49e>
 800258e:	4c12      	ldr	r4, [pc, #72]	; (80025d8 <__aeabi_dmul+0x4e0>)
 8002590:	4454      	add	r4, sl
 8002592:	40a3      	lsls	r3, r4
 8002594:	431a      	orrs	r2, r3
 8002596:	1e50      	subs	r0, r2, #1
 8002598:	4182      	sbcs	r2, r0
 800259a:	4332      	orrs	r2, r6
 800259c:	2607      	movs	r6, #7
 800259e:	2700      	movs	r7, #0
 80025a0:	4016      	ands	r6, r2
 80025a2:	d009      	beq.n	80025b8 <__aeabi_dmul+0x4c0>
 80025a4:	200f      	movs	r0, #15
 80025a6:	2300      	movs	r3, #0
 80025a8:	4010      	ands	r0, r2
 80025aa:	0014      	movs	r4, r2
 80025ac:	2804      	cmp	r0, #4
 80025ae:	d1b9      	bne.n	8002524 <__aeabi_dmul+0x42c>
 80025b0:	0022      	movs	r2, r4
 80025b2:	075e      	lsls	r6, r3, #29
 80025b4:	025b      	lsls	r3, r3, #9
 80025b6:	0b1f      	lsrs	r7, r3, #12
 80025b8:	08d2      	lsrs	r2, r2, #3
 80025ba:	4316      	orrs	r6, r2
 80025bc:	2300      	movs	r3, #0
 80025be:	e606      	b.n	80021ce <__aeabi_dmul+0xd6>
 80025c0:	2780      	movs	r7, #128	; 0x80
 80025c2:	033f      	lsls	r7, r7, #12
 80025c4:	431f      	orrs	r7, r3
 80025c6:	033f      	lsls	r7, r7, #12
 80025c8:	0b3f      	lsrs	r7, r7, #12
 80025ca:	0016      	movs	r6, r2
 80025cc:	4b00      	ldr	r3, [pc, #0]	; (80025d0 <__aeabi_dmul+0x4d8>)
 80025ce:	e5fe      	b.n	80021ce <__aeabi_dmul+0xd6>
 80025d0:	000007ff 	.word	0x000007ff
 80025d4:	0000041e 	.word	0x0000041e
 80025d8:	0000043e 	.word	0x0000043e

080025dc <__aeabi_dsub>:
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	4657      	mov	r7, sl
 80025e0:	464e      	mov	r6, r9
 80025e2:	4645      	mov	r5, r8
 80025e4:	46de      	mov	lr, fp
 80025e6:	000c      	movs	r4, r1
 80025e8:	0309      	lsls	r1, r1, #12
 80025ea:	b5e0      	push	{r5, r6, r7, lr}
 80025ec:	0a49      	lsrs	r1, r1, #9
 80025ee:	0f46      	lsrs	r6, r0, #29
 80025f0:	005f      	lsls	r7, r3, #1
 80025f2:	4331      	orrs	r1, r6
 80025f4:	031e      	lsls	r6, r3, #12
 80025f6:	0fdb      	lsrs	r3, r3, #31
 80025f8:	0a76      	lsrs	r6, r6, #9
 80025fa:	469b      	mov	fp, r3
 80025fc:	0f53      	lsrs	r3, r2, #29
 80025fe:	4333      	orrs	r3, r6
 8002600:	4ec8      	ldr	r6, [pc, #800]	; (8002924 <__aeabi_dsub+0x348>)
 8002602:	0065      	lsls	r5, r4, #1
 8002604:	00c0      	lsls	r0, r0, #3
 8002606:	0fe4      	lsrs	r4, r4, #31
 8002608:	00d2      	lsls	r2, r2, #3
 800260a:	0d6d      	lsrs	r5, r5, #21
 800260c:	46a2      	mov	sl, r4
 800260e:	4681      	mov	r9, r0
 8002610:	0d7f      	lsrs	r7, r7, #21
 8002612:	469c      	mov	ip, r3
 8002614:	4690      	mov	r8, r2
 8002616:	42b7      	cmp	r7, r6
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x40>
 800261a:	e0b9      	b.n	8002790 <__aeabi_dsub+0x1b4>
 800261c:	465b      	mov	r3, fp
 800261e:	2601      	movs	r6, #1
 8002620:	4073      	eors	r3, r6
 8002622:	469b      	mov	fp, r3
 8002624:	1bee      	subs	r6, r5, r7
 8002626:	45a3      	cmp	fp, r4
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x50>
 800262a:	e083      	b.n	8002734 <__aeabi_dsub+0x158>
 800262c:	2e00      	cmp	r6, #0
 800262e:	dd63      	ble.n	80026f8 <__aeabi_dsub+0x11c>
 8002630:	2f00      	cmp	r7, #0
 8002632:	d000      	beq.n	8002636 <__aeabi_dsub+0x5a>
 8002634:	e0b1      	b.n	800279a <__aeabi_dsub+0x1be>
 8002636:	4663      	mov	r3, ip
 8002638:	4313      	orrs	r3, r2
 800263a:	d100      	bne.n	800263e <__aeabi_dsub+0x62>
 800263c:	e123      	b.n	8002886 <__aeabi_dsub+0x2aa>
 800263e:	1e73      	subs	r3, r6, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d000      	beq.n	8002646 <__aeabi_dsub+0x6a>
 8002644:	e1ba      	b.n	80029bc <__aeabi_dsub+0x3e0>
 8002646:	1a86      	subs	r6, r0, r2
 8002648:	4663      	mov	r3, ip
 800264a:	42b0      	cmp	r0, r6
 800264c:	4180      	sbcs	r0, r0
 800264e:	2501      	movs	r5, #1
 8002650:	1ac9      	subs	r1, r1, r3
 8002652:	4240      	negs	r0, r0
 8002654:	1a09      	subs	r1, r1, r0
 8002656:	020b      	lsls	r3, r1, #8
 8002658:	d400      	bmi.n	800265c <__aeabi_dsub+0x80>
 800265a:	e147      	b.n	80028ec <__aeabi_dsub+0x310>
 800265c:	0249      	lsls	r1, r1, #9
 800265e:	0a4b      	lsrs	r3, r1, #9
 8002660:	4698      	mov	r8, r3
 8002662:	4643      	mov	r3, r8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0x8e>
 8002668:	e189      	b.n	800297e <__aeabi_dsub+0x3a2>
 800266a:	4640      	mov	r0, r8
 800266c:	f000 fc44 	bl	8002ef8 <__clzsi2>
 8002670:	0003      	movs	r3, r0
 8002672:	3b08      	subs	r3, #8
 8002674:	2b1f      	cmp	r3, #31
 8002676:	dd00      	ble.n	800267a <__aeabi_dsub+0x9e>
 8002678:	e17c      	b.n	8002974 <__aeabi_dsub+0x398>
 800267a:	2220      	movs	r2, #32
 800267c:	0030      	movs	r0, r6
 800267e:	1ad2      	subs	r2, r2, r3
 8002680:	4641      	mov	r1, r8
 8002682:	40d0      	lsrs	r0, r2
 8002684:	4099      	lsls	r1, r3
 8002686:	0002      	movs	r2, r0
 8002688:	409e      	lsls	r6, r3
 800268a:	430a      	orrs	r2, r1
 800268c:	429d      	cmp	r5, r3
 800268e:	dd00      	ble.n	8002692 <__aeabi_dsub+0xb6>
 8002690:	e16a      	b.n	8002968 <__aeabi_dsub+0x38c>
 8002692:	1b5d      	subs	r5, r3, r5
 8002694:	1c6b      	adds	r3, r5, #1
 8002696:	2b1f      	cmp	r3, #31
 8002698:	dd00      	ble.n	800269c <__aeabi_dsub+0xc0>
 800269a:	e194      	b.n	80029c6 <__aeabi_dsub+0x3ea>
 800269c:	2120      	movs	r1, #32
 800269e:	0010      	movs	r0, r2
 80026a0:	0035      	movs	r5, r6
 80026a2:	1ac9      	subs	r1, r1, r3
 80026a4:	408e      	lsls	r6, r1
 80026a6:	40da      	lsrs	r2, r3
 80026a8:	4088      	lsls	r0, r1
 80026aa:	40dd      	lsrs	r5, r3
 80026ac:	1e71      	subs	r1, r6, #1
 80026ae:	418e      	sbcs	r6, r1
 80026b0:	0011      	movs	r1, r2
 80026b2:	2207      	movs	r2, #7
 80026b4:	4328      	orrs	r0, r5
 80026b6:	2500      	movs	r5, #0
 80026b8:	4306      	orrs	r6, r0
 80026ba:	4032      	ands	r2, r6
 80026bc:	2a00      	cmp	r2, #0
 80026be:	d009      	beq.n	80026d4 <__aeabi_dsub+0xf8>
 80026c0:	230f      	movs	r3, #15
 80026c2:	4033      	ands	r3, r6
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d005      	beq.n	80026d4 <__aeabi_dsub+0xf8>
 80026c8:	1d33      	adds	r3, r6, #4
 80026ca:	42b3      	cmp	r3, r6
 80026cc:	41b6      	sbcs	r6, r6
 80026ce:	4276      	negs	r6, r6
 80026d0:	1989      	adds	r1, r1, r6
 80026d2:	001e      	movs	r6, r3
 80026d4:	020b      	lsls	r3, r1, #8
 80026d6:	d400      	bmi.n	80026da <__aeabi_dsub+0xfe>
 80026d8:	e23d      	b.n	8002b56 <__aeabi_dsub+0x57a>
 80026da:	1c6a      	adds	r2, r5, #1
 80026dc:	4b91      	ldr	r3, [pc, #580]	; (8002924 <__aeabi_dsub+0x348>)
 80026de:	0555      	lsls	r5, r2, #21
 80026e0:	0d6d      	lsrs	r5, r5, #21
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x10c>
 80026e6:	e119      	b.n	800291c <__aeabi_dsub+0x340>
 80026e8:	4a8f      	ldr	r2, [pc, #572]	; (8002928 <__aeabi_dsub+0x34c>)
 80026ea:	08f6      	lsrs	r6, r6, #3
 80026ec:	400a      	ands	r2, r1
 80026ee:	0757      	lsls	r7, r2, #29
 80026f0:	0252      	lsls	r2, r2, #9
 80026f2:	4337      	orrs	r7, r6
 80026f4:	0b12      	lsrs	r2, r2, #12
 80026f6:	e09b      	b.n	8002830 <__aeabi_dsub+0x254>
 80026f8:	2e00      	cmp	r6, #0
 80026fa:	d000      	beq.n	80026fe <__aeabi_dsub+0x122>
 80026fc:	e0c5      	b.n	800288a <__aeabi_dsub+0x2ae>
 80026fe:	1c6e      	adds	r6, r5, #1
 8002700:	0576      	lsls	r6, r6, #21
 8002702:	0d76      	lsrs	r6, r6, #21
 8002704:	2e01      	cmp	r6, #1
 8002706:	dc00      	bgt.n	800270a <__aeabi_dsub+0x12e>
 8002708:	e148      	b.n	800299c <__aeabi_dsub+0x3c0>
 800270a:	4667      	mov	r7, ip
 800270c:	1a86      	subs	r6, r0, r2
 800270e:	1bcb      	subs	r3, r1, r7
 8002710:	42b0      	cmp	r0, r6
 8002712:	41bf      	sbcs	r7, r7
 8002714:	427f      	negs	r7, r7
 8002716:	46b8      	mov	r8, r7
 8002718:	001f      	movs	r7, r3
 800271a:	4643      	mov	r3, r8
 800271c:	1aff      	subs	r7, r7, r3
 800271e:	003b      	movs	r3, r7
 8002720:	46b8      	mov	r8, r7
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	d500      	bpl.n	8002728 <__aeabi_dsub+0x14c>
 8002726:	e15f      	b.n	80029e8 <__aeabi_dsub+0x40c>
 8002728:	4337      	orrs	r7, r6
 800272a:	d19a      	bne.n	8002662 <__aeabi_dsub+0x86>
 800272c:	2200      	movs	r2, #0
 800272e:	2400      	movs	r4, #0
 8002730:	2500      	movs	r5, #0
 8002732:	e079      	b.n	8002828 <__aeabi_dsub+0x24c>
 8002734:	2e00      	cmp	r6, #0
 8002736:	dc00      	bgt.n	800273a <__aeabi_dsub+0x15e>
 8002738:	e0fa      	b.n	8002930 <__aeabi_dsub+0x354>
 800273a:	2f00      	cmp	r7, #0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x164>
 800273e:	e08d      	b.n	800285c <__aeabi_dsub+0x280>
 8002740:	4b78      	ldr	r3, [pc, #480]	; (8002924 <__aeabi_dsub+0x348>)
 8002742:	429d      	cmp	r5, r3
 8002744:	d067      	beq.n	8002816 <__aeabi_dsub+0x23a>
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	4667      	mov	r7, ip
 800274a:	041b      	lsls	r3, r3, #16
 800274c:	431f      	orrs	r7, r3
 800274e:	46bc      	mov	ip, r7
 8002750:	2e38      	cmp	r6, #56	; 0x38
 8002752:	dc00      	bgt.n	8002756 <__aeabi_dsub+0x17a>
 8002754:	e152      	b.n	80029fc <__aeabi_dsub+0x420>
 8002756:	4663      	mov	r3, ip
 8002758:	4313      	orrs	r3, r2
 800275a:	1e5a      	subs	r2, r3, #1
 800275c:	4193      	sbcs	r3, r2
 800275e:	181e      	adds	r6, r3, r0
 8002760:	4286      	cmp	r6, r0
 8002762:	4180      	sbcs	r0, r0
 8002764:	4240      	negs	r0, r0
 8002766:	1809      	adds	r1, r1, r0
 8002768:	020b      	lsls	r3, r1, #8
 800276a:	d400      	bmi.n	800276e <__aeabi_dsub+0x192>
 800276c:	e0be      	b.n	80028ec <__aeabi_dsub+0x310>
 800276e:	4b6d      	ldr	r3, [pc, #436]	; (8002924 <__aeabi_dsub+0x348>)
 8002770:	3501      	adds	r5, #1
 8002772:	429d      	cmp	r5, r3
 8002774:	d100      	bne.n	8002778 <__aeabi_dsub+0x19c>
 8002776:	e0d2      	b.n	800291e <__aeabi_dsub+0x342>
 8002778:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <__aeabi_dsub+0x34c>)
 800277a:	0873      	lsrs	r3, r6, #1
 800277c:	400a      	ands	r2, r1
 800277e:	2101      	movs	r1, #1
 8002780:	400e      	ands	r6, r1
 8002782:	431e      	orrs	r6, r3
 8002784:	0851      	lsrs	r1, r2, #1
 8002786:	07d3      	lsls	r3, r2, #31
 8002788:	2207      	movs	r2, #7
 800278a:	431e      	orrs	r6, r3
 800278c:	4032      	ands	r2, r6
 800278e:	e795      	b.n	80026bc <__aeabi_dsub+0xe0>
 8002790:	001e      	movs	r6, r3
 8002792:	4316      	orrs	r6, r2
 8002794:	d000      	beq.n	8002798 <__aeabi_dsub+0x1bc>
 8002796:	e745      	b.n	8002624 <__aeabi_dsub+0x48>
 8002798:	e740      	b.n	800261c <__aeabi_dsub+0x40>
 800279a:	4b62      	ldr	r3, [pc, #392]	; (8002924 <__aeabi_dsub+0x348>)
 800279c:	429d      	cmp	r5, r3
 800279e:	d03a      	beq.n	8002816 <__aeabi_dsub+0x23a>
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	4667      	mov	r7, ip
 80027a4:	041b      	lsls	r3, r3, #16
 80027a6:	431f      	orrs	r7, r3
 80027a8:	46bc      	mov	ip, r7
 80027aa:	2e38      	cmp	r6, #56	; 0x38
 80027ac:	dd00      	ble.n	80027b0 <__aeabi_dsub+0x1d4>
 80027ae:	e0eb      	b.n	8002988 <__aeabi_dsub+0x3ac>
 80027b0:	2e1f      	cmp	r6, #31
 80027b2:	dc00      	bgt.n	80027b6 <__aeabi_dsub+0x1da>
 80027b4:	e13a      	b.n	8002a2c <__aeabi_dsub+0x450>
 80027b6:	0033      	movs	r3, r6
 80027b8:	4667      	mov	r7, ip
 80027ba:	3b20      	subs	r3, #32
 80027bc:	40df      	lsrs	r7, r3
 80027be:	003b      	movs	r3, r7
 80027c0:	2e20      	cmp	r6, #32
 80027c2:	d005      	beq.n	80027d0 <__aeabi_dsub+0x1f4>
 80027c4:	2740      	movs	r7, #64	; 0x40
 80027c6:	1bbf      	subs	r7, r7, r6
 80027c8:	4666      	mov	r6, ip
 80027ca:	40be      	lsls	r6, r7
 80027cc:	4332      	orrs	r2, r6
 80027ce:	4690      	mov	r8, r2
 80027d0:	4646      	mov	r6, r8
 80027d2:	1e72      	subs	r2, r6, #1
 80027d4:	4196      	sbcs	r6, r2
 80027d6:	4333      	orrs	r3, r6
 80027d8:	e0da      	b.n	8002990 <__aeabi_dsub+0x3b4>
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d100      	bne.n	80027e0 <__aeabi_dsub+0x204>
 80027de:	e214      	b.n	8002c0a <__aeabi_dsub+0x62e>
 80027e0:	4663      	mov	r3, ip
 80027e2:	4313      	orrs	r3, r2
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x20c>
 80027e6:	e168      	b.n	8002aba <__aeabi_dsub+0x4de>
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	074e      	lsls	r6, r1, #29
 80027ec:	08c0      	lsrs	r0, r0, #3
 80027ee:	08c9      	lsrs	r1, r1, #3
 80027f0:	031b      	lsls	r3, r3, #12
 80027f2:	4306      	orrs	r6, r0
 80027f4:	4219      	tst	r1, r3
 80027f6:	d008      	beq.n	800280a <__aeabi_dsub+0x22e>
 80027f8:	4660      	mov	r0, ip
 80027fa:	08c0      	lsrs	r0, r0, #3
 80027fc:	4218      	tst	r0, r3
 80027fe:	d104      	bne.n	800280a <__aeabi_dsub+0x22e>
 8002800:	4663      	mov	r3, ip
 8002802:	0001      	movs	r1, r0
 8002804:	08d2      	lsrs	r2, r2, #3
 8002806:	075e      	lsls	r6, r3, #29
 8002808:	4316      	orrs	r6, r2
 800280a:	00f3      	lsls	r3, r6, #3
 800280c:	4699      	mov	r9, r3
 800280e:	00c9      	lsls	r1, r1, #3
 8002810:	0f72      	lsrs	r2, r6, #29
 8002812:	4d44      	ldr	r5, [pc, #272]	; (8002924 <__aeabi_dsub+0x348>)
 8002814:	4311      	orrs	r1, r2
 8002816:	464b      	mov	r3, r9
 8002818:	08de      	lsrs	r6, r3, #3
 800281a:	4b42      	ldr	r3, [pc, #264]	; (8002924 <__aeabi_dsub+0x348>)
 800281c:	074f      	lsls	r7, r1, #29
 800281e:	4337      	orrs	r7, r6
 8002820:	08ca      	lsrs	r2, r1, #3
 8002822:	429d      	cmp	r5, r3
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x24c>
 8002826:	e06e      	b.n	8002906 <__aeabi_dsub+0x32a>
 8002828:	0312      	lsls	r2, r2, #12
 800282a:	056d      	lsls	r5, r5, #21
 800282c:	0b12      	lsrs	r2, r2, #12
 800282e:	0d6d      	lsrs	r5, r5, #21
 8002830:	2100      	movs	r1, #0
 8002832:	0312      	lsls	r2, r2, #12
 8002834:	0b13      	lsrs	r3, r2, #12
 8002836:	0d0a      	lsrs	r2, r1, #20
 8002838:	0512      	lsls	r2, r2, #20
 800283a:	431a      	orrs	r2, r3
 800283c:	4b3b      	ldr	r3, [pc, #236]	; (800292c <__aeabi_dsub+0x350>)
 800283e:	052d      	lsls	r5, r5, #20
 8002840:	4013      	ands	r3, r2
 8002842:	432b      	orrs	r3, r5
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	07e4      	lsls	r4, r4, #31
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	4323      	orrs	r3, r4
 800284c:	0038      	movs	r0, r7
 800284e:	0019      	movs	r1, r3
 8002850:	bc3c      	pop	{r2, r3, r4, r5}
 8002852:	4690      	mov	r8, r2
 8002854:	4699      	mov	r9, r3
 8002856:	46a2      	mov	sl, r4
 8002858:	46ab      	mov	fp, r5
 800285a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800285c:	4663      	mov	r3, ip
 800285e:	4313      	orrs	r3, r2
 8002860:	d011      	beq.n	8002886 <__aeabi_dsub+0x2aa>
 8002862:	1e73      	subs	r3, r6, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x28e>
 8002868:	e107      	b.n	8002a7a <__aeabi_dsub+0x49e>
 800286a:	1886      	adds	r6, r0, r2
 800286c:	4286      	cmp	r6, r0
 800286e:	4180      	sbcs	r0, r0
 8002870:	4461      	add	r1, ip
 8002872:	4240      	negs	r0, r0
 8002874:	1809      	adds	r1, r1, r0
 8002876:	2501      	movs	r5, #1
 8002878:	020b      	lsls	r3, r1, #8
 800287a:	d537      	bpl.n	80028ec <__aeabi_dsub+0x310>
 800287c:	2502      	movs	r5, #2
 800287e:	e77b      	b.n	8002778 <__aeabi_dsub+0x19c>
 8002880:	003e      	movs	r6, r7
 8002882:	4661      	mov	r1, ip
 8002884:	4691      	mov	r9, r2
 8002886:	0035      	movs	r5, r6
 8002888:	e7c5      	b.n	8002816 <__aeabi_dsub+0x23a>
 800288a:	465c      	mov	r4, fp
 800288c:	2d00      	cmp	r5, #0
 800288e:	d000      	beq.n	8002892 <__aeabi_dsub+0x2b6>
 8002890:	e0e1      	b.n	8002a56 <__aeabi_dsub+0x47a>
 8002892:	000b      	movs	r3, r1
 8002894:	4303      	orrs	r3, r0
 8002896:	d0f3      	beq.n	8002880 <__aeabi_dsub+0x2a4>
 8002898:	1c73      	adds	r3, r6, #1
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x2c2>
 800289c:	e1ac      	b.n	8002bf8 <__aeabi_dsub+0x61c>
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <__aeabi_dsub+0x348>)
 80028a0:	429f      	cmp	r7, r3
 80028a2:	d100      	bne.n	80028a6 <__aeabi_dsub+0x2ca>
 80028a4:	e13a      	b.n	8002b1c <__aeabi_dsub+0x540>
 80028a6:	43f3      	mvns	r3, r6
 80028a8:	2b38      	cmp	r3, #56	; 0x38
 80028aa:	dd00      	ble.n	80028ae <__aeabi_dsub+0x2d2>
 80028ac:	e16f      	b.n	8002b8e <__aeabi_dsub+0x5b2>
 80028ae:	2b1f      	cmp	r3, #31
 80028b0:	dd00      	ble.n	80028b4 <__aeabi_dsub+0x2d8>
 80028b2:	e18c      	b.n	8002bce <__aeabi_dsub+0x5f2>
 80028b4:	2520      	movs	r5, #32
 80028b6:	000e      	movs	r6, r1
 80028b8:	1aed      	subs	r5, r5, r3
 80028ba:	40ae      	lsls	r6, r5
 80028bc:	46b0      	mov	r8, r6
 80028be:	0006      	movs	r6, r0
 80028c0:	46aa      	mov	sl, r5
 80028c2:	40de      	lsrs	r6, r3
 80028c4:	4645      	mov	r5, r8
 80028c6:	4335      	orrs	r5, r6
 80028c8:	002e      	movs	r6, r5
 80028ca:	4655      	mov	r5, sl
 80028cc:	40d9      	lsrs	r1, r3
 80028ce:	40a8      	lsls	r0, r5
 80028d0:	4663      	mov	r3, ip
 80028d2:	1e45      	subs	r5, r0, #1
 80028d4:	41a8      	sbcs	r0, r5
 80028d6:	1a5b      	subs	r3, r3, r1
 80028d8:	469c      	mov	ip, r3
 80028da:	4330      	orrs	r0, r6
 80028dc:	1a16      	subs	r6, r2, r0
 80028de:	42b2      	cmp	r2, r6
 80028e0:	4192      	sbcs	r2, r2
 80028e2:	4663      	mov	r3, ip
 80028e4:	4252      	negs	r2, r2
 80028e6:	1a99      	subs	r1, r3, r2
 80028e8:	003d      	movs	r5, r7
 80028ea:	e6b4      	b.n	8002656 <__aeabi_dsub+0x7a>
 80028ec:	2207      	movs	r2, #7
 80028ee:	4032      	ands	r2, r6
 80028f0:	2a00      	cmp	r2, #0
 80028f2:	d000      	beq.n	80028f6 <__aeabi_dsub+0x31a>
 80028f4:	e6e4      	b.n	80026c0 <__aeabi_dsub+0xe4>
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <__aeabi_dsub+0x348>)
 80028f8:	08f6      	lsrs	r6, r6, #3
 80028fa:	074f      	lsls	r7, r1, #29
 80028fc:	4337      	orrs	r7, r6
 80028fe:	08ca      	lsrs	r2, r1, #3
 8002900:	429d      	cmp	r5, r3
 8002902:	d000      	beq.n	8002906 <__aeabi_dsub+0x32a>
 8002904:	e790      	b.n	8002828 <__aeabi_dsub+0x24c>
 8002906:	003b      	movs	r3, r7
 8002908:	4313      	orrs	r3, r2
 800290a:	d100      	bne.n	800290e <__aeabi_dsub+0x332>
 800290c:	e1a6      	b.n	8002c5c <__aeabi_dsub+0x680>
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	031b      	lsls	r3, r3, #12
 8002912:	431a      	orrs	r2, r3
 8002914:	0312      	lsls	r2, r2, #12
 8002916:	0b12      	lsrs	r2, r2, #12
 8002918:	4d02      	ldr	r5, [pc, #8]	; (8002924 <__aeabi_dsub+0x348>)
 800291a:	e789      	b.n	8002830 <__aeabi_dsub+0x254>
 800291c:	0015      	movs	r5, r2
 800291e:	2200      	movs	r2, #0
 8002920:	2700      	movs	r7, #0
 8002922:	e785      	b.n	8002830 <__aeabi_dsub+0x254>
 8002924:	000007ff 	.word	0x000007ff
 8002928:	ff7fffff 	.word	0xff7fffff
 800292c:	800fffff 	.word	0x800fffff
 8002930:	2e00      	cmp	r6, #0
 8002932:	d000      	beq.n	8002936 <__aeabi_dsub+0x35a>
 8002934:	e0c7      	b.n	8002ac6 <__aeabi_dsub+0x4ea>
 8002936:	1c6b      	adds	r3, r5, #1
 8002938:	055e      	lsls	r6, r3, #21
 800293a:	0d76      	lsrs	r6, r6, #21
 800293c:	2e01      	cmp	r6, #1
 800293e:	dc00      	bgt.n	8002942 <__aeabi_dsub+0x366>
 8002940:	e0f0      	b.n	8002b24 <__aeabi_dsub+0x548>
 8002942:	4dc8      	ldr	r5, [pc, #800]	; (8002c64 <__aeabi_dsub+0x688>)
 8002944:	42ab      	cmp	r3, r5
 8002946:	d100      	bne.n	800294a <__aeabi_dsub+0x36e>
 8002948:	e0b9      	b.n	8002abe <__aeabi_dsub+0x4e2>
 800294a:	1885      	adds	r5, r0, r2
 800294c:	000a      	movs	r2, r1
 800294e:	4285      	cmp	r5, r0
 8002950:	4189      	sbcs	r1, r1
 8002952:	4462      	add	r2, ip
 8002954:	4249      	negs	r1, r1
 8002956:	1851      	adds	r1, r2, r1
 8002958:	2207      	movs	r2, #7
 800295a:	07ce      	lsls	r6, r1, #31
 800295c:	086d      	lsrs	r5, r5, #1
 800295e:	432e      	orrs	r6, r5
 8002960:	0849      	lsrs	r1, r1, #1
 8002962:	4032      	ands	r2, r6
 8002964:	001d      	movs	r5, r3
 8002966:	e6a9      	b.n	80026bc <__aeabi_dsub+0xe0>
 8002968:	49bf      	ldr	r1, [pc, #764]	; (8002c68 <__aeabi_dsub+0x68c>)
 800296a:	1aed      	subs	r5, r5, r3
 800296c:	4011      	ands	r1, r2
 800296e:	2207      	movs	r2, #7
 8002970:	4032      	ands	r2, r6
 8002972:	e6a3      	b.n	80026bc <__aeabi_dsub+0xe0>
 8002974:	0032      	movs	r2, r6
 8002976:	3828      	subs	r0, #40	; 0x28
 8002978:	4082      	lsls	r2, r0
 800297a:	2600      	movs	r6, #0
 800297c:	e686      	b.n	800268c <__aeabi_dsub+0xb0>
 800297e:	0030      	movs	r0, r6
 8002980:	f000 faba 	bl	8002ef8 <__clzsi2>
 8002984:	3020      	adds	r0, #32
 8002986:	e673      	b.n	8002670 <__aeabi_dsub+0x94>
 8002988:	4663      	mov	r3, ip
 800298a:	4313      	orrs	r3, r2
 800298c:	1e5a      	subs	r2, r3, #1
 800298e:	4193      	sbcs	r3, r2
 8002990:	1ac6      	subs	r6, r0, r3
 8002992:	42b0      	cmp	r0, r6
 8002994:	4180      	sbcs	r0, r0
 8002996:	4240      	negs	r0, r0
 8002998:	1a09      	subs	r1, r1, r0
 800299a:	e65c      	b.n	8002656 <__aeabi_dsub+0x7a>
 800299c:	000e      	movs	r6, r1
 800299e:	4667      	mov	r7, ip
 80029a0:	4306      	orrs	r6, r0
 80029a2:	4317      	orrs	r7, r2
 80029a4:	2d00      	cmp	r5, #0
 80029a6:	d15e      	bne.n	8002a66 <__aeabi_dsub+0x48a>
 80029a8:	2e00      	cmp	r6, #0
 80029aa:	d000      	beq.n	80029ae <__aeabi_dsub+0x3d2>
 80029ac:	e0f3      	b.n	8002b96 <__aeabi_dsub+0x5ba>
 80029ae:	2f00      	cmp	r7, #0
 80029b0:	d100      	bne.n	80029b4 <__aeabi_dsub+0x3d8>
 80029b2:	e11e      	b.n	8002bf2 <__aeabi_dsub+0x616>
 80029b4:	465c      	mov	r4, fp
 80029b6:	4661      	mov	r1, ip
 80029b8:	4691      	mov	r9, r2
 80029ba:	e72c      	b.n	8002816 <__aeabi_dsub+0x23a>
 80029bc:	4fa9      	ldr	r7, [pc, #676]	; (8002c64 <__aeabi_dsub+0x688>)
 80029be:	42be      	cmp	r6, r7
 80029c0:	d07b      	beq.n	8002aba <__aeabi_dsub+0x4de>
 80029c2:	001e      	movs	r6, r3
 80029c4:	e6f1      	b.n	80027aa <__aeabi_dsub+0x1ce>
 80029c6:	0010      	movs	r0, r2
 80029c8:	3d1f      	subs	r5, #31
 80029ca:	40e8      	lsrs	r0, r5
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d003      	beq.n	80029d8 <__aeabi_dsub+0x3fc>
 80029d0:	2140      	movs	r1, #64	; 0x40
 80029d2:	1acb      	subs	r3, r1, r3
 80029d4:	409a      	lsls	r2, r3
 80029d6:	4316      	orrs	r6, r2
 80029d8:	1e73      	subs	r3, r6, #1
 80029da:	419e      	sbcs	r6, r3
 80029dc:	2207      	movs	r2, #7
 80029de:	4306      	orrs	r6, r0
 80029e0:	4032      	ands	r2, r6
 80029e2:	2100      	movs	r1, #0
 80029e4:	2500      	movs	r5, #0
 80029e6:	e783      	b.n	80028f0 <__aeabi_dsub+0x314>
 80029e8:	1a16      	subs	r6, r2, r0
 80029ea:	4663      	mov	r3, ip
 80029ec:	42b2      	cmp	r2, r6
 80029ee:	4180      	sbcs	r0, r0
 80029f0:	1a59      	subs	r1, r3, r1
 80029f2:	4240      	negs	r0, r0
 80029f4:	1a0b      	subs	r3, r1, r0
 80029f6:	4698      	mov	r8, r3
 80029f8:	465c      	mov	r4, fp
 80029fa:	e632      	b.n	8002662 <__aeabi_dsub+0x86>
 80029fc:	2e1f      	cmp	r6, #31
 80029fe:	dd00      	ble.n	8002a02 <__aeabi_dsub+0x426>
 8002a00:	e0ab      	b.n	8002b5a <__aeabi_dsub+0x57e>
 8002a02:	2720      	movs	r7, #32
 8002a04:	1bbb      	subs	r3, r7, r6
 8002a06:	469a      	mov	sl, r3
 8002a08:	4663      	mov	r3, ip
 8002a0a:	4657      	mov	r7, sl
 8002a0c:	40bb      	lsls	r3, r7
 8002a0e:	4699      	mov	r9, r3
 8002a10:	0013      	movs	r3, r2
 8002a12:	464f      	mov	r7, r9
 8002a14:	40f3      	lsrs	r3, r6
 8002a16:	431f      	orrs	r7, r3
 8002a18:	003b      	movs	r3, r7
 8002a1a:	4657      	mov	r7, sl
 8002a1c:	40ba      	lsls	r2, r7
 8002a1e:	1e57      	subs	r7, r2, #1
 8002a20:	41ba      	sbcs	r2, r7
 8002a22:	4313      	orrs	r3, r2
 8002a24:	4662      	mov	r2, ip
 8002a26:	40f2      	lsrs	r2, r6
 8002a28:	1889      	adds	r1, r1, r2
 8002a2a:	e698      	b.n	800275e <__aeabi_dsub+0x182>
 8002a2c:	2720      	movs	r7, #32
 8002a2e:	1bbb      	subs	r3, r7, r6
 8002a30:	469a      	mov	sl, r3
 8002a32:	4663      	mov	r3, ip
 8002a34:	4657      	mov	r7, sl
 8002a36:	40bb      	lsls	r3, r7
 8002a38:	4699      	mov	r9, r3
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	464f      	mov	r7, r9
 8002a3e:	40f3      	lsrs	r3, r6
 8002a40:	431f      	orrs	r7, r3
 8002a42:	003b      	movs	r3, r7
 8002a44:	4657      	mov	r7, sl
 8002a46:	40ba      	lsls	r2, r7
 8002a48:	1e57      	subs	r7, r2, #1
 8002a4a:	41ba      	sbcs	r2, r7
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	4662      	mov	r2, ip
 8002a50:	40f2      	lsrs	r2, r6
 8002a52:	1a89      	subs	r1, r1, r2
 8002a54:	e79c      	b.n	8002990 <__aeabi_dsub+0x3b4>
 8002a56:	4b83      	ldr	r3, [pc, #524]	; (8002c64 <__aeabi_dsub+0x688>)
 8002a58:	429f      	cmp	r7, r3
 8002a5a:	d05f      	beq.n	8002b1c <__aeabi_dsub+0x540>
 8002a5c:	2580      	movs	r5, #128	; 0x80
 8002a5e:	042d      	lsls	r5, r5, #16
 8002a60:	4273      	negs	r3, r6
 8002a62:	4329      	orrs	r1, r5
 8002a64:	e720      	b.n	80028a8 <__aeabi_dsub+0x2cc>
 8002a66:	2e00      	cmp	r6, #0
 8002a68:	d10c      	bne.n	8002a84 <__aeabi_dsub+0x4a8>
 8002a6a:	2f00      	cmp	r7, #0
 8002a6c:	d100      	bne.n	8002a70 <__aeabi_dsub+0x494>
 8002a6e:	e0d0      	b.n	8002c12 <__aeabi_dsub+0x636>
 8002a70:	465c      	mov	r4, fp
 8002a72:	4661      	mov	r1, ip
 8002a74:	4691      	mov	r9, r2
 8002a76:	4d7b      	ldr	r5, [pc, #492]	; (8002c64 <__aeabi_dsub+0x688>)
 8002a78:	e6cd      	b.n	8002816 <__aeabi_dsub+0x23a>
 8002a7a:	4f7a      	ldr	r7, [pc, #488]	; (8002c64 <__aeabi_dsub+0x688>)
 8002a7c:	42be      	cmp	r6, r7
 8002a7e:	d01c      	beq.n	8002aba <__aeabi_dsub+0x4de>
 8002a80:	001e      	movs	r6, r3
 8002a82:	e665      	b.n	8002750 <__aeabi_dsub+0x174>
 8002a84:	2f00      	cmp	r7, #0
 8002a86:	d018      	beq.n	8002aba <__aeabi_dsub+0x4de>
 8002a88:	08c0      	lsrs	r0, r0, #3
 8002a8a:	074e      	lsls	r6, r1, #29
 8002a8c:	4306      	orrs	r6, r0
 8002a8e:	2080      	movs	r0, #128	; 0x80
 8002a90:	08c9      	lsrs	r1, r1, #3
 8002a92:	0300      	lsls	r0, r0, #12
 8002a94:	4201      	tst	r1, r0
 8002a96:	d008      	beq.n	8002aaa <__aeabi_dsub+0x4ce>
 8002a98:	4663      	mov	r3, ip
 8002a9a:	08dc      	lsrs	r4, r3, #3
 8002a9c:	4204      	tst	r4, r0
 8002a9e:	d104      	bne.n	8002aaa <__aeabi_dsub+0x4ce>
 8002aa0:	0021      	movs	r1, r4
 8002aa2:	46da      	mov	sl, fp
 8002aa4:	08d2      	lsrs	r2, r2, #3
 8002aa6:	075e      	lsls	r6, r3, #29
 8002aa8:	4316      	orrs	r6, r2
 8002aaa:	00f3      	lsls	r3, r6, #3
 8002aac:	4699      	mov	r9, r3
 8002aae:	2401      	movs	r4, #1
 8002ab0:	4653      	mov	r3, sl
 8002ab2:	00c9      	lsls	r1, r1, #3
 8002ab4:	0f72      	lsrs	r2, r6, #29
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	401c      	ands	r4, r3
 8002aba:	4d6a      	ldr	r5, [pc, #424]	; (8002c64 <__aeabi_dsub+0x688>)
 8002abc:	e6ab      	b.n	8002816 <__aeabi_dsub+0x23a>
 8002abe:	001d      	movs	r5, r3
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2700      	movs	r7, #0
 8002ac4:	e6b4      	b.n	8002830 <__aeabi_dsub+0x254>
 8002ac6:	2d00      	cmp	r5, #0
 8002ac8:	d159      	bne.n	8002b7e <__aeabi_dsub+0x5a2>
 8002aca:	000b      	movs	r3, r1
 8002acc:	4303      	orrs	r3, r0
 8002ace:	d100      	bne.n	8002ad2 <__aeabi_dsub+0x4f6>
 8002ad0:	e6d6      	b.n	8002880 <__aeabi_dsub+0x2a4>
 8002ad2:	1c73      	adds	r3, r6, #1
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x4fc>
 8002ad6:	e0b2      	b.n	8002c3e <__aeabi_dsub+0x662>
 8002ad8:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <__aeabi_dsub+0x688>)
 8002ada:	429f      	cmp	r7, r3
 8002adc:	d01e      	beq.n	8002b1c <__aeabi_dsub+0x540>
 8002ade:	43f3      	mvns	r3, r6
 8002ae0:	2b38      	cmp	r3, #56	; 0x38
 8002ae2:	dc6f      	bgt.n	8002bc4 <__aeabi_dsub+0x5e8>
 8002ae4:	2b1f      	cmp	r3, #31
 8002ae6:	dd00      	ble.n	8002aea <__aeabi_dsub+0x50e>
 8002ae8:	e097      	b.n	8002c1a <__aeabi_dsub+0x63e>
 8002aea:	2520      	movs	r5, #32
 8002aec:	000e      	movs	r6, r1
 8002aee:	1aed      	subs	r5, r5, r3
 8002af0:	40ae      	lsls	r6, r5
 8002af2:	46b0      	mov	r8, r6
 8002af4:	0006      	movs	r6, r0
 8002af6:	46aa      	mov	sl, r5
 8002af8:	40de      	lsrs	r6, r3
 8002afa:	4645      	mov	r5, r8
 8002afc:	4335      	orrs	r5, r6
 8002afe:	002e      	movs	r6, r5
 8002b00:	4655      	mov	r5, sl
 8002b02:	40a8      	lsls	r0, r5
 8002b04:	40d9      	lsrs	r1, r3
 8002b06:	1e45      	subs	r5, r0, #1
 8002b08:	41a8      	sbcs	r0, r5
 8002b0a:	448c      	add	ip, r1
 8002b0c:	4306      	orrs	r6, r0
 8002b0e:	18b6      	adds	r6, r6, r2
 8002b10:	4296      	cmp	r6, r2
 8002b12:	4192      	sbcs	r2, r2
 8002b14:	4251      	negs	r1, r2
 8002b16:	4461      	add	r1, ip
 8002b18:	003d      	movs	r5, r7
 8002b1a:	e625      	b.n	8002768 <__aeabi_dsub+0x18c>
 8002b1c:	003d      	movs	r5, r7
 8002b1e:	4661      	mov	r1, ip
 8002b20:	4691      	mov	r9, r2
 8002b22:	e678      	b.n	8002816 <__aeabi_dsub+0x23a>
 8002b24:	000b      	movs	r3, r1
 8002b26:	4303      	orrs	r3, r0
 8002b28:	2d00      	cmp	r5, #0
 8002b2a:	d000      	beq.n	8002b2e <__aeabi_dsub+0x552>
 8002b2c:	e655      	b.n	80027da <__aeabi_dsub+0x1fe>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f5      	beq.n	8002b1e <__aeabi_dsub+0x542>
 8002b32:	4663      	mov	r3, ip
 8002b34:	4313      	orrs	r3, r2
 8002b36:	d100      	bne.n	8002b3a <__aeabi_dsub+0x55e>
 8002b38:	e66d      	b.n	8002816 <__aeabi_dsub+0x23a>
 8002b3a:	1886      	adds	r6, r0, r2
 8002b3c:	4286      	cmp	r6, r0
 8002b3e:	4180      	sbcs	r0, r0
 8002b40:	4461      	add	r1, ip
 8002b42:	4240      	negs	r0, r0
 8002b44:	1809      	adds	r1, r1, r0
 8002b46:	2200      	movs	r2, #0
 8002b48:	020b      	lsls	r3, r1, #8
 8002b4a:	d400      	bmi.n	8002b4e <__aeabi_dsub+0x572>
 8002b4c:	e6d0      	b.n	80028f0 <__aeabi_dsub+0x314>
 8002b4e:	4b46      	ldr	r3, [pc, #280]	; (8002c68 <__aeabi_dsub+0x68c>)
 8002b50:	3501      	adds	r5, #1
 8002b52:	4019      	ands	r1, r3
 8002b54:	e5b2      	b.n	80026bc <__aeabi_dsub+0xe0>
 8002b56:	46b1      	mov	r9, r6
 8002b58:	e65d      	b.n	8002816 <__aeabi_dsub+0x23a>
 8002b5a:	0033      	movs	r3, r6
 8002b5c:	4667      	mov	r7, ip
 8002b5e:	3b20      	subs	r3, #32
 8002b60:	40df      	lsrs	r7, r3
 8002b62:	003b      	movs	r3, r7
 8002b64:	2e20      	cmp	r6, #32
 8002b66:	d005      	beq.n	8002b74 <__aeabi_dsub+0x598>
 8002b68:	2740      	movs	r7, #64	; 0x40
 8002b6a:	1bbf      	subs	r7, r7, r6
 8002b6c:	4666      	mov	r6, ip
 8002b6e:	40be      	lsls	r6, r7
 8002b70:	4332      	orrs	r2, r6
 8002b72:	4690      	mov	r8, r2
 8002b74:	4646      	mov	r6, r8
 8002b76:	1e72      	subs	r2, r6, #1
 8002b78:	4196      	sbcs	r6, r2
 8002b7a:	4333      	orrs	r3, r6
 8002b7c:	e5ef      	b.n	800275e <__aeabi_dsub+0x182>
 8002b7e:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <__aeabi_dsub+0x688>)
 8002b80:	429f      	cmp	r7, r3
 8002b82:	d0cb      	beq.n	8002b1c <__aeabi_dsub+0x540>
 8002b84:	2580      	movs	r5, #128	; 0x80
 8002b86:	042d      	lsls	r5, r5, #16
 8002b88:	4273      	negs	r3, r6
 8002b8a:	4329      	orrs	r1, r5
 8002b8c:	e7a8      	b.n	8002ae0 <__aeabi_dsub+0x504>
 8002b8e:	4308      	orrs	r0, r1
 8002b90:	1e41      	subs	r1, r0, #1
 8002b92:	4188      	sbcs	r0, r1
 8002b94:	e6a2      	b.n	80028dc <__aeabi_dsub+0x300>
 8002b96:	2f00      	cmp	r7, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0x5c0>
 8002b9a:	e63c      	b.n	8002816 <__aeabi_dsub+0x23a>
 8002b9c:	4663      	mov	r3, ip
 8002b9e:	1a86      	subs	r6, r0, r2
 8002ba0:	1acf      	subs	r7, r1, r3
 8002ba2:	42b0      	cmp	r0, r6
 8002ba4:	419b      	sbcs	r3, r3
 8002ba6:	425b      	negs	r3, r3
 8002ba8:	1afb      	subs	r3, r7, r3
 8002baa:	4698      	mov	r8, r3
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	d54e      	bpl.n	8002c4e <__aeabi_dsub+0x672>
 8002bb0:	1a16      	subs	r6, r2, r0
 8002bb2:	4663      	mov	r3, ip
 8002bb4:	42b2      	cmp	r2, r6
 8002bb6:	4192      	sbcs	r2, r2
 8002bb8:	1a59      	subs	r1, r3, r1
 8002bba:	4252      	negs	r2, r2
 8002bbc:	1a89      	subs	r1, r1, r2
 8002bbe:	465c      	mov	r4, fp
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	e57b      	b.n	80026bc <__aeabi_dsub+0xe0>
 8002bc4:	4301      	orrs	r1, r0
 8002bc6:	000e      	movs	r6, r1
 8002bc8:	1e71      	subs	r1, r6, #1
 8002bca:	418e      	sbcs	r6, r1
 8002bcc:	e79f      	b.n	8002b0e <__aeabi_dsub+0x532>
 8002bce:	001d      	movs	r5, r3
 8002bd0:	000e      	movs	r6, r1
 8002bd2:	3d20      	subs	r5, #32
 8002bd4:	40ee      	lsrs	r6, r5
 8002bd6:	46b0      	mov	r8, r6
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d004      	beq.n	8002be6 <__aeabi_dsub+0x60a>
 8002bdc:	2540      	movs	r5, #64	; 0x40
 8002bde:	1aeb      	subs	r3, r5, r3
 8002be0:	4099      	lsls	r1, r3
 8002be2:	4308      	orrs	r0, r1
 8002be4:	4681      	mov	r9, r0
 8002be6:	4648      	mov	r0, r9
 8002be8:	4643      	mov	r3, r8
 8002bea:	1e41      	subs	r1, r0, #1
 8002bec:	4188      	sbcs	r0, r1
 8002bee:	4318      	orrs	r0, r3
 8002bf0:	e674      	b.n	80028dc <__aeabi_dsub+0x300>
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2400      	movs	r4, #0
 8002bf6:	e617      	b.n	8002828 <__aeabi_dsub+0x24c>
 8002bf8:	1a16      	subs	r6, r2, r0
 8002bfa:	4663      	mov	r3, ip
 8002bfc:	42b2      	cmp	r2, r6
 8002bfe:	4192      	sbcs	r2, r2
 8002c00:	1a59      	subs	r1, r3, r1
 8002c02:	4252      	negs	r2, r2
 8002c04:	1a89      	subs	r1, r1, r2
 8002c06:	003d      	movs	r5, r7
 8002c08:	e525      	b.n	8002656 <__aeabi_dsub+0x7a>
 8002c0a:	4661      	mov	r1, ip
 8002c0c:	4691      	mov	r9, r2
 8002c0e:	4d15      	ldr	r5, [pc, #84]	; (8002c64 <__aeabi_dsub+0x688>)
 8002c10:	e601      	b.n	8002816 <__aeabi_dsub+0x23a>
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	2400      	movs	r4, #0
 8002c16:	0312      	lsls	r2, r2, #12
 8002c18:	e679      	b.n	800290e <__aeabi_dsub+0x332>
 8002c1a:	001d      	movs	r5, r3
 8002c1c:	000e      	movs	r6, r1
 8002c1e:	3d20      	subs	r5, #32
 8002c20:	40ee      	lsrs	r6, r5
 8002c22:	46b0      	mov	r8, r6
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d004      	beq.n	8002c32 <__aeabi_dsub+0x656>
 8002c28:	2540      	movs	r5, #64	; 0x40
 8002c2a:	1aeb      	subs	r3, r5, r3
 8002c2c:	4099      	lsls	r1, r3
 8002c2e:	4308      	orrs	r0, r1
 8002c30:	4681      	mov	r9, r0
 8002c32:	464e      	mov	r6, r9
 8002c34:	4643      	mov	r3, r8
 8002c36:	1e71      	subs	r1, r6, #1
 8002c38:	418e      	sbcs	r6, r1
 8002c3a:	431e      	orrs	r6, r3
 8002c3c:	e767      	b.n	8002b0e <__aeabi_dsub+0x532>
 8002c3e:	1886      	adds	r6, r0, r2
 8002c40:	4296      	cmp	r6, r2
 8002c42:	419b      	sbcs	r3, r3
 8002c44:	4461      	add	r1, ip
 8002c46:	425b      	negs	r3, r3
 8002c48:	18c9      	adds	r1, r1, r3
 8002c4a:	003d      	movs	r5, r7
 8002c4c:	e58c      	b.n	8002768 <__aeabi_dsub+0x18c>
 8002c4e:	4647      	mov	r7, r8
 8002c50:	4337      	orrs	r7, r6
 8002c52:	d0ce      	beq.n	8002bf2 <__aeabi_dsub+0x616>
 8002c54:	2207      	movs	r2, #7
 8002c56:	4641      	mov	r1, r8
 8002c58:	4032      	ands	r2, r6
 8002c5a:	e649      	b.n	80028f0 <__aeabi_dsub+0x314>
 8002c5c:	2700      	movs	r7, #0
 8002c5e:	003a      	movs	r2, r7
 8002c60:	e5e6      	b.n	8002830 <__aeabi_dsub+0x254>
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	000007ff 	.word	0x000007ff
 8002c68:	ff7fffff 	.word	0xff7fffff

08002c6c <__aeabi_d2iz>:
 8002c6c:	b530      	push	{r4, r5, lr}
 8002c6e:	4d14      	ldr	r5, [pc, #80]	; (8002cc0 <__aeabi_d2iz+0x54>)
 8002c70:	030a      	lsls	r2, r1, #12
 8002c72:	004b      	lsls	r3, r1, #1
 8002c74:	0b12      	lsrs	r2, r2, #12
 8002c76:	0d5b      	lsrs	r3, r3, #21
 8002c78:	0fc9      	lsrs	r1, r1, #31
 8002c7a:	2400      	movs	r4, #0
 8002c7c:	42ab      	cmp	r3, r5
 8002c7e:	dd11      	ble.n	8002ca4 <__aeabi_d2iz+0x38>
 8002c80:	4c10      	ldr	r4, [pc, #64]	; (8002cc4 <__aeabi_d2iz+0x58>)
 8002c82:	42a3      	cmp	r3, r4
 8002c84:	dc10      	bgt.n	8002ca8 <__aeabi_d2iz+0x3c>
 8002c86:	2480      	movs	r4, #128	; 0x80
 8002c88:	0364      	lsls	r4, r4, #13
 8002c8a:	4322      	orrs	r2, r4
 8002c8c:	4c0e      	ldr	r4, [pc, #56]	; (8002cc8 <__aeabi_d2iz+0x5c>)
 8002c8e:	1ae4      	subs	r4, r4, r3
 8002c90:	2c1f      	cmp	r4, #31
 8002c92:	dd0c      	ble.n	8002cae <__aeabi_d2iz+0x42>
 8002c94:	480d      	ldr	r0, [pc, #52]	; (8002ccc <__aeabi_d2iz+0x60>)
 8002c96:	1ac3      	subs	r3, r0, r3
 8002c98:	40da      	lsrs	r2, r3
 8002c9a:	0013      	movs	r3, r2
 8002c9c:	425c      	negs	r4, r3
 8002c9e:	2900      	cmp	r1, #0
 8002ca0:	d100      	bne.n	8002ca4 <__aeabi_d2iz+0x38>
 8002ca2:	001c      	movs	r4, r3
 8002ca4:	0020      	movs	r0, r4
 8002ca6:	bd30      	pop	{r4, r5, pc}
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <__aeabi_d2iz+0x64>)
 8002caa:	18cc      	adds	r4, r1, r3
 8002cac:	e7fa      	b.n	8002ca4 <__aeabi_d2iz+0x38>
 8002cae:	4d09      	ldr	r5, [pc, #36]	; (8002cd4 <__aeabi_d2iz+0x68>)
 8002cb0:	40e0      	lsrs	r0, r4
 8002cb2:	46ac      	mov	ip, r5
 8002cb4:	4463      	add	r3, ip
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	0013      	movs	r3, r2
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	e7ee      	b.n	8002c9c <__aeabi_d2iz+0x30>
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	000003fe 	.word	0x000003fe
 8002cc4:	0000041d 	.word	0x0000041d
 8002cc8:	00000433 	.word	0x00000433
 8002ccc:	00000413 	.word	0x00000413
 8002cd0:	7fffffff 	.word	0x7fffffff
 8002cd4:	fffffbed 	.word	0xfffffbed

08002cd8 <__aeabi_i2d>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d02d      	beq.n	8002d3a <__aeabi_i2d+0x62>
 8002cde:	17c3      	asrs	r3, r0, #31
 8002ce0:	18c5      	adds	r5, r0, r3
 8002ce2:	405d      	eors	r5, r3
 8002ce4:	0fc4      	lsrs	r4, r0, #31
 8002ce6:	0028      	movs	r0, r5
 8002ce8:	f000 f906 	bl	8002ef8 <__clzsi2>
 8002cec:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <__aeabi_i2d+0x6c>)
 8002cee:	1a1b      	subs	r3, r3, r0
 8002cf0:	055b      	lsls	r3, r3, #21
 8002cf2:	0d5b      	lsrs	r3, r3, #21
 8002cf4:	280a      	cmp	r0, #10
 8002cf6:	dd15      	ble.n	8002d24 <__aeabi_i2d+0x4c>
 8002cf8:	380b      	subs	r0, #11
 8002cfa:	4085      	lsls	r5, r0
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	032d      	lsls	r5, r5, #12
 8002d00:	0b2d      	lsrs	r5, r5, #12
 8002d02:	2100      	movs	r1, #0
 8002d04:	0010      	movs	r0, r2
 8002d06:	032d      	lsls	r5, r5, #12
 8002d08:	0d0a      	lsrs	r2, r1, #20
 8002d0a:	0b2d      	lsrs	r5, r5, #12
 8002d0c:	0512      	lsls	r2, r2, #20
 8002d0e:	432a      	orrs	r2, r5
 8002d10:	4d0d      	ldr	r5, [pc, #52]	; (8002d48 <__aeabi_i2d+0x70>)
 8002d12:	051b      	lsls	r3, r3, #20
 8002d14:	402a      	ands	r2, r5
 8002d16:	4313      	orrs	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	07e4      	lsls	r4, r4, #31
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	4323      	orrs	r3, r4
 8002d20:	0019      	movs	r1, r3
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	0002      	movs	r2, r0
 8002d26:	0029      	movs	r1, r5
 8002d28:	3215      	adds	r2, #21
 8002d2a:	4091      	lsls	r1, r2
 8002d2c:	000a      	movs	r2, r1
 8002d2e:	210b      	movs	r1, #11
 8002d30:	1a08      	subs	r0, r1, r0
 8002d32:	40c5      	lsrs	r5, r0
 8002d34:	032d      	lsls	r5, r5, #12
 8002d36:	0b2d      	lsrs	r5, r5, #12
 8002d38:	e7e3      	b.n	8002d02 <__aeabi_i2d+0x2a>
 8002d3a:	2400      	movs	r4, #0
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	2500      	movs	r5, #0
 8002d40:	2200      	movs	r2, #0
 8002d42:	e7de      	b.n	8002d02 <__aeabi_i2d+0x2a>
 8002d44:	0000041e 	.word	0x0000041e
 8002d48:	800fffff 	.word	0x800fffff

08002d4c <__aeabi_f2d>:
 8002d4c:	0041      	lsls	r1, r0, #1
 8002d4e:	0e09      	lsrs	r1, r1, #24
 8002d50:	1c4b      	adds	r3, r1, #1
 8002d52:	b570      	push	{r4, r5, r6, lr}
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	0246      	lsls	r6, r0, #9
 8002d58:	0a75      	lsrs	r5, r6, #9
 8002d5a:	0fc4      	lsrs	r4, r0, #31
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	dd14      	ble.n	8002d8a <__aeabi_f2d+0x3e>
 8002d60:	23e0      	movs	r3, #224	; 0xe0
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	076d      	lsls	r5, r5, #29
 8002d66:	0b36      	lsrs	r6, r6, #12
 8002d68:	18cb      	adds	r3, r1, r3
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	0d0a      	lsrs	r2, r1, #20
 8002d6e:	0028      	movs	r0, r5
 8002d70:	0512      	lsls	r2, r2, #20
 8002d72:	4d1c      	ldr	r5, [pc, #112]	; (8002de4 <__aeabi_f2d+0x98>)
 8002d74:	4332      	orrs	r2, r6
 8002d76:	055b      	lsls	r3, r3, #21
 8002d78:	402a      	ands	r2, r5
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	07e4      	lsls	r4, r4, #31
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	4323      	orrs	r3, r4
 8002d86:	0019      	movs	r1, r3
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
 8002d8a:	2900      	cmp	r1, #0
 8002d8c:	d114      	bne.n	8002db8 <__aeabi_f2d+0x6c>
 8002d8e:	2d00      	cmp	r5, #0
 8002d90:	d01e      	beq.n	8002dd0 <__aeabi_f2d+0x84>
 8002d92:	0028      	movs	r0, r5
 8002d94:	f000 f8b0 	bl	8002ef8 <__clzsi2>
 8002d98:	280a      	cmp	r0, #10
 8002d9a:	dc1c      	bgt.n	8002dd6 <__aeabi_f2d+0x8a>
 8002d9c:	230b      	movs	r3, #11
 8002d9e:	002a      	movs	r2, r5
 8002da0:	1a1b      	subs	r3, r3, r0
 8002da2:	40da      	lsrs	r2, r3
 8002da4:	0003      	movs	r3, r0
 8002da6:	3315      	adds	r3, #21
 8002da8:	409d      	lsls	r5, r3
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <__aeabi_f2d+0x9c>)
 8002dac:	0312      	lsls	r2, r2, #12
 8002dae:	1a1b      	subs	r3, r3, r0
 8002db0:	055b      	lsls	r3, r3, #21
 8002db2:	0b16      	lsrs	r6, r2, #12
 8002db4:	0d5b      	lsrs	r3, r3, #21
 8002db6:	e7d8      	b.n	8002d6a <__aeabi_f2d+0x1e>
 8002db8:	2d00      	cmp	r5, #0
 8002dba:	d006      	beq.n	8002dca <__aeabi_f2d+0x7e>
 8002dbc:	0b32      	lsrs	r2, r6, #12
 8002dbe:	2680      	movs	r6, #128	; 0x80
 8002dc0:	0336      	lsls	r6, r6, #12
 8002dc2:	076d      	lsls	r5, r5, #29
 8002dc4:	4316      	orrs	r6, r2
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <__aeabi_f2d+0xa0>)
 8002dc8:	e7cf      	b.n	8002d6a <__aeabi_f2d+0x1e>
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <__aeabi_f2d+0xa0>)
 8002dcc:	2600      	movs	r6, #0
 8002dce:	e7cc      	b.n	8002d6a <__aeabi_f2d+0x1e>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2600      	movs	r6, #0
 8002dd4:	e7c9      	b.n	8002d6a <__aeabi_f2d+0x1e>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	002a      	movs	r2, r5
 8002dda:	3b0b      	subs	r3, #11
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	2500      	movs	r5, #0
 8002de0:	e7e3      	b.n	8002daa <__aeabi_f2d+0x5e>
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	800fffff 	.word	0x800fffff
 8002de8:	00000389 	.word	0x00000389
 8002dec:	000007ff 	.word	0x000007ff

08002df0 <__aeabi_d2f>:
 8002df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df2:	004c      	lsls	r4, r1, #1
 8002df4:	0d64      	lsrs	r4, r4, #21
 8002df6:	030b      	lsls	r3, r1, #12
 8002df8:	1c62      	adds	r2, r4, #1
 8002dfa:	0a5b      	lsrs	r3, r3, #9
 8002dfc:	0f46      	lsrs	r6, r0, #29
 8002dfe:	0552      	lsls	r2, r2, #21
 8002e00:	0fc9      	lsrs	r1, r1, #31
 8002e02:	431e      	orrs	r6, r3
 8002e04:	00c5      	lsls	r5, r0, #3
 8002e06:	0d52      	lsrs	r2, r2, #21
 8002e08:	2a01      	cmp	r2, #1
 8002e0a:	dd29      	ble.n	8002e60 <__aeabi_d2f+0x70>
 8002e0c:	4b37      	ldr	r3, [pc, #220]	; (8002eec <__aeabi_d2f+0xfc>)
 8002e0e:	18e7      	adds	r7, r4, r3
 8002e10:	2ffe      	cmp	r7, #254	; 0xfe
 8002e12:	dc1c      	bgt.n	8002e4e <__aeabi_d2f+0x5e>
 8002e14:	2f00      	cmp	r7, #0
 8002e16:	dd3b      	ble.n	8002e90 <__aeabi_d2f+0xa0>
 8002e18:	0180      	lsls	r0, r0, #6
 8002e1a:	1e43      	subs	r3, r0, #1
 8002e1c:	4198      	sbcs	r0, r3
 8002e1e:	2207      	movs	r2, #7
 8002e20:	00f3      	lsls	r3, r6, #3
 8002e22:	0f6d      	lsrs	r5, r5, #29
 8002e24:	4303      	orrs	r3, r0
 8002e26:	432b      	orrs	r3, r5
 8002e28:	401a      	ands	r2, r3
 8002e2a:	2a00      	cmp	r2, #0
 8002e2c:	d004      	beq.n	8002e38 <__aeabi_d2f+0x48>
 8002e2e:	220f      	movs	r2, #15
 8002e30:	401a      	ands	r2, r3
 8002e32:	2a04      	cmp	r2, #4
 8002e34:	d000      	beq.n	8002e38 <__aeabi_d2f+0x48>
 8002e36:	3304      	adds	r3, #4
 8002e38:	2280      	movs	r2, #128	; 0x80
 8002e3a:	04d2      	lsls	r2, r2, #19
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	d024      	beq.n	8002e8a <__aeabi_d2f+0x9a>
 8002e40:	3701      	adds	r7, #1
 8002e42:	b2fa      	uxtb	r2, r7
 8002e44:	2fff      	cmp	r7, #255	; 0xff
 8002e46:	d002      	beq.n	8002e4e <__aeabi_d2f+0x5e>
 8002e48:	019b      	lsls	r3, r3, #6
 8002e4a:	0a58      	lsrs	r0, r3, #9
 8002e4c:	e001      	b.n	8002e52 <__aeabi_d2f+0x62>
 8002e4e:	22ff      	movs	r2, #255	; 0xff
 8002e50:	2000      	movs	r0, #0
 8002e52:	0240      	lsls	r0, r0, #9
 8002e54:	05d2      	lsls	r2, r2, #23
 8002e56:	0a40      	lsrs	r0, r0, #9
 8002e58:	07c9      	lsls	r1, r1, #31
 8002e5a:	4310      	orrs	r0, r2
 8002e5c:	4308      	orrs	r0, r1
 8002e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e60:	4335      	orrs	r5, r6
 8002e62:	2c00      	cmp	r4, #0
 8002e64:	d104      	bne.n	8002e70 <__aeabi_d2f+0x80>
 8002e66:	2d00      	cmp	r5, #0
 8002e68:	d10a      	bne.n	8002e80 <__aeabi_d2f+0x90>
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e7f0      	b.n	8002e52 <__aeabi_d2f+0x62>
 8002e70:	2d00      	cmp	r5, #0
 8002e72:	d0ec      	beq.n	8002e4e <__aeabi_d2f+0x5e>
 8002e74:	2080      	movs	r0, #128	; 0x80
 8002e76:	03c0      	lsls	r0, r0, #15
 8002e78:	4330      	orrs	r0, r6
 8002e7a:	22ff      	movs	r2, #255	; 0xff
 8002e7c:	e7e9      	b.n	8002e52 <__aeabi_d2f+0x62>
 8002e7e:	2400      	movs	r4, #0
 8002e80:	2300      	movs	r3, #0
 8002e82:	025b      	lsls	r3, r3, #9
 8002e84:	0a58      	lsrs	r0, r3, #9
 8002e86:	b2e2      	uxtb	r2, r4
 8002e88:	e7e3      	b.n	8002e52 <__aeabi_d2f+0x62>
 8002e8a:	08db      	lsrs	r3, r3, #3
 8002e8c:	003c      	movs	r4, r7
 8002e8e:	e7f8      	b.n	8002e82 <__aeabi_d2f+0x92>
 8002e90:	003b      	movs	r3, r7
 8002e92:	3317      	adds	r3, #23
 8002e94:	dbf3      	blt.n	8002e7e <__aeabi_d2f+0x8e>
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	4333      	orrs	r3, r6
 8002e9c:	261e      	movs	r6, #30
 8002e9e:	1bf6      	subs	r6, r6, r7
 8002ea0:	2e1f      	cmp	r6, #31
 8002ea2:	dd14      	ble.n	8002ece <__aeabi_d2f+0xde>
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	4252      	negs	r2, r2
 8002ea8:	1bd7      	subs	r7, r2, r7
 8002eaa:	001a      	movs	r2, r3
 8002eac:	40fa      	lsrs	r2, r7
 8002eae:	0017      	movs	r7, r2
 8002eb0:	2e20      	cmp	r6, #32
 8002eb2:	d004      	beq.n	8002ebe <__aeabi_d2f+0xce>
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <__aeabi_d2f+0x100>)
 8002eb6:	4694      	mov	ip, r2
 8002eb8:	4464      	add	r4, ip
 8002eba:	40a3      	lsls	r3, r4
 8002ebc:	431d      	orrs	r5, r3
 8002ebe:	002b      	movs	r3, r5
 8002ec0:	1e5d      	subs	r5, r3, #1
 8002ec2:	41ab      	sbcs	r3, r5
 8002ec4:	2207      	movs	r2, #7
 8002ec6:	433b      	orrs	r3, r7
 8002ec8:	401a      	ands	r2, r3
 8002eca:	2700      	movs	r7, #0
 8002ecc:	e7ad      	b.n	8002e2a <__aeabi_d2f+0x3a>
 8002ece:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <__aeabi_d2f+0x104>)
 8002ed0:	0028      	movs	r0, r5
 8002ed2:	18a2      	adds	r2, r4, r2
 8002ed4:	4095      	lsls	r5, r2
 8002ed6:	4093      	lsls	r3, r2
 8002ed8:	1e6c      	subs	r4, r5, #1
 8002eda:	41a5      	sbcs	r5, r4
 8002edc:	40f0      	lsrs	r0, r6
 8002ede:	2207      	movs	r2, #7
 8002ee0:	432b      	orrs	r3, r5
 8002ee2:	4303      	orrs	r3, r0
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	2700      	movs	r7, #0
 8002ee8:	e79f      	b.n	8002e2a <__aeabi_d2f+0x3a>
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	fffffc80 	.word	0xfffffc80
 8002ef0:	fffffca2 	.word	0xfffffca2
 8002ef4:	fffffc82 	.word	0xfffffc82

08002ef8 <__clzsi2>:
 8002ef8:	211c      	movs	r1, #28
 8002efa:	2301      	movs	r3, #1
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	4298      	cmp	r0, r3
 8002f00:	d301      	bcc.n	8002f06 <__clzsi2+0xe>
 8002f02:	0c00      	lsrs	r0, r0, #16
 8002f04:	3910      	subs	r1, #16
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	4298      	cmp	r0, r3
 8002f0a:	d301      	bcc.n	8002f10 <__clzsi2+0x18>
 8002f0c:	0a00      	lsrs	r0, r0, #8
 8002f0e:	3908      	subs	r1, #8
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	4298      	cmp	r0, r3
 8002f14:	d301      	bcc.n	8002f1a <__clzsi2+0x22>
 8002f16:	0900      	lsrs	r0, r0, #4
 8002f18:	3904      	subs	r1, #4
 8002f1a:	a202      	add	r2, pc, #8	; (adr r2, 8002f24 <__clzsi2+0x2c>)
 8002f1c:	5c10      	ldrb	r0, [r2, r0]
 8002f1e:	1840      	adds	r0, r0, r1
 8002f20:	4770      	bx	lr
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	02020304 	.word	0x02020304
 8002f28:	01010101 	.word	0x01010101
	...

08002f34 <__clzdi2>:
 8002f34:	b510      	push	{r4, lr}
 8002f36:	2900      	cmp	r1, #0
 8002f38:	d103      	bne.n	8002f42 <__clzdi2+0xe>
 8002f3a:	f7ff ffdd 	bl	8002ef8 <__clzsi2>
 8002f3e:	3020      	adds	r0, #32
 8002f40:	e002      	b.n	8002f48 <__clzdi2+0x14>
 8002f42:	1c08      	adds	r0, r1, #0
 8002f44:	f7ff ffd8 	bl	8002ef8 <__clzsi2>
 8002f48:	bd10      	pop	{r4, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)

08002f4c <Power>:
const uint16_t wSquare   = 0b0000000000101000;

uint16_t waveType;

// ham 10^y
uint32_t Power(uint16_t y) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	0002      	movs	r2, r0
 8002f54:	1dbb      	adds	r3, r7, #6
 8002f56:	801a      	strh	r2, [r3, #0]
	uint32_t t = 1;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < y; i++)
 8002f5c:	230b      	movs	r3, #11
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e00b      	b.n	8002f7e <Power+0x32>
    t = t * 10;
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	0013      	movs	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	189b      	adds	r3, r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < y; i++)
 8002f72:	210b      	movs	r1, #11
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	781a      	ldrb	r2, [r3, #0]
 8002f78:	187b      	adds	r3, r7, r1
 8002f7a:	3201      	adds	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	230b      	movs	r3, #11
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	1dba      	adds	r2, r7, #6
 8002f88:	8812      	ldrh	r2, [r2, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d8eb      	bhi.n	8002f66 <Power+0x1a>
  return t;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b004      	add	sp, #16
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <calcFreq>:
// tinh toan tan so cho mang
uint32_t calcFreq(uint8_t* freqSG) {
 8002f98:	b5b0      	push	{r4, r5, r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  for (uint8_t x = 0; x < numberOfDigits; x++)
 8002fa4:	230b      	movs	r3, #11
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	e016      	b.n	8002fdc <calcFreq+0x44>
    i = i + freqSG[x] * Power(x);
 8002fae:	250b      	movs	r5, #11
 8002fb0:	197b      	adds	r3, r7, r5
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	18d3      	adds	r3, r2, r3
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	001c      	movs	r4, r3
 8002fbc:	197b      	adds	r3, r7, r5
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7ff ffc2 	bl	8002f4c <Power>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	4363      	muls	r3, r4
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	18d3      	adds	r3, r2, r3
 8002fd0:	60fb      	str	r3, [r7, #12]
  for (uint8_t x = 0; x < numberOfDigits; x++)
 8002fd2:	197b      	adds	r3, r7, r5
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	197b      	adds	r3, r7, r5
 8002fd8:	3201      	adds	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	2206      	movs	r2, #6
 8002fde:	230b      	movs	r3, #11
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d3e2      	bcc.n	8002fae <calcFreq+0x16>
  return i;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b004      	add	sp, #16
 8002ff0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ff4 <SG_WriteRegister>:

//-----------------------------------------------------------------------------
// SG_WriteRegister
//-----------------------------------------------------------------------------
void SG_WriteRegister(uint16_t dat) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	1dbb      	adds	r3, r7, #6
 8002ffe:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, Clk_Pin, GPIO_PIN_RESET);
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	01db      	lsls	r3, r3, #7
 8003004:	482d      	ldr	r0, [pc, #180]	; (80030bc <SG_WriteRegister+0xc8>)
 8003006:	2200      	movs	r2, #0
 8003008:	0019      	movs	r1, r3
 800300a:	f003 fda6 	bl	8006b5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Clk_Pin, GPIO_PIN_SET);
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	01db      	lsls	r3, r3, #7
 8003012:	482a      	ldr	r0, [pc, #168]	; (80030bc <SG_WriteRegister+0xc8>)
 8003014:	2201      	movs	r2, #1
 8003016:	0019      	movs	r1, r3
 8003018:	f003 fd9f 	bl	8006b5a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, FSync_Pin, GPIO_PIN_RESET);
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <SG_WriteRegister+0xc8>)
 800301e:	2200      	movs	r2, #0
 8003020:	2110      	movs	r1, #16
 8003022:	0018      	movs	r0, r3
 8003024:	f003 fd99 	bl	8006b5a <HAL_GPIO_WritePin>

  for (uint8_t i = 0; i < 16; i++) {
 8003028:	230f      	movs	r3, #15
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e02e      	b.n	8003090 <SG_WriteRegister+0x9c>
    if (dat & 0x8000)
 8003032:	1dbb      	adds	r3, r7, #6
 8003034:	2200      	movs	r2, #0
 8003036:	5e9b      	ldrsh	r3, [r3, r2]
 8003038:	2b00      	cmp	r3, #0
 800303a:	da08      	bge.n	800304e <SG_WriteRegister+0x5a>
    	HAL_GPIO_WritePin(Data_GPIO_Port, Data_Pin, GPIO_PIN_SET);
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	0059      	lsls	r1, r3, #1
 8003040:	23a0      	movs	r3, #160	; 0xa0
 8003042:	05db      	lsls	r3, r3, #23
 8003044:	2201      	movs	r2, #1
 8003046:	0018      	movs	r0, r3
 8003048:	f003 fd87 	bl	8006b5a <HAL_GPIO_WritePin>
 800304c:	e007      	b.n	800305e <SG_WriteRegister+0x6a>
    else
    	HAL_GPIO_WritePin(Data_GPIO_Port, Data_Pin, GPIO_PIN_RESET);
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	0059      	lsls	r1, r3, #1
 8003052:	23a0      	movs	r3, #160	; 0xa0
 8003054:	05db      	lsls	r3, r3, #23
 8003056:	2200      	movs	r2, #0
 8003058:	0018      	movs	r0, r3
 800305a:	f003 fd7e 	bl	8006b5a <HAL_GPIO_WritePin>
    dat = dat << 1;
 800305e:	1dba      	adds	r2, r7, #6
 8003060:	1dbb      	adds	r3, r7, #6
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	18db      	adds	r3, r3, r3
 8003066:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(GPIOB, Clk_Pin, GPIO_PIN_SET);
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	01db      	lsls	r3, r3, #7
 800306c:	4813      	ldr	r0, [pc, #76]	; (80030bc <SG_WriteRegister+0xc8>)
 800306e:	2201      	movs	r2, #1
 8003070:	0019      	movs	r1, r3
 8003072:	f003 fd72 	bl	8006b5a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Clk_Pin, GPIO_PIN_RESET);
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	01db      	lsls	r3, r3, #7
 800307a:	4810      	ldr	r0, [pc, #64]	; (80030bc <SG_WriteRegister+0xc8>)
 800307c:	2200      	movs	r2, #0
 800307e:	0019      	movs	r1, r3
 8003080:	f003 fd6b 	bl	8006b5a <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 16; i++) {
 8003084:	210f      	movs	r1, #15
 8003086:	187b      	adds	r3, r7, r1
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	187b      	adds	r3, r7, r1
 800308c:	3201      	adds	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	230f      	movs	r3, #15
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b0f      	cmp	r3, #15
 8003098:	d9cb      	bls.n	8003032 <SG_WriteRegister+0x3e>
  }
  HAL_GPIO_WritePin(GPIOB, Clk_Pin, GPIO_PIN_SET);
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	01db      	lsls	r3, r3, #7
 800309e:	4807      	ldr	r0, [pc, #28]	; (80030bc <SG_WriteRegister+0xc8>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	0019      	movs	r1, r3
 80030a4:	f003 fd59 	bl	8006b5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, FSync_Pin, GPIO_PIN_SET);
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <SG_WriteRegister+0xc8>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	2110      	movs	r1, #16
 80030ae:	0018      	movs	r0, r3
 80030b0:	f003 fd53 	bl	8006b5a <HAL_GPIO_WritePin>
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b004      	add	sp, #16
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	50000400 	.word	0x50000400

080030c0 <SG_Reset>:
//-----------------------------------------------------------------------------
// SG_Reset
//-----------------------------------------------------------------------------
void SG_Reset() {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80030c4:	2064      	movs	r0, #100	; 0x64
 80030c6:	f001 fdcd 	bl	8004c64 <HAL_Delay>
  SG_WriteRegister(0x100);
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7ff ff90 	bl	8002ff4 <SG_WriteRegister>
  HAL_Delay(100);
 80030d4:	2064      	movs	r0, #100	; 0x64
 80030d6:	f001 fdc5 	bl	8004c64 <HAL_Delay>
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <InitSigGen>:
  SG_WriteRegister((int)((fl & 0xFFFC000) >> 14) | 0x4000);
}
//-----------------------------------------------------------------------------
// InitSigGen
//-----------------------------------------------------------------------------
void InitSigGen(void) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, FSync_Pin, GPIO_PIN_SET);
 80030e4:	4b10      	ldr	r3, [pc, #64]	; (8003128 <InitSigGen+0x48>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	2110      	movs	r1, #16
 80030ea:	0018      	movs	r0, r3
 80030ec:	f003 fd35 	bl	8006b5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Clk_Pin, GPIO_PIN_SET);
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	01db      	lsls	r3, r3, #7
 80030f4:	480c      	ldr	r0, [pc, #48]	; (8003128 <InitSigGen+0x48>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	0019      	movs	r1, r3
 80030fa:	f003 fd2e 	bl	8006b5a <HAL_GPIO_WritePin>
  SG_Reset();
 80030fe:	f7ff ffdf 	bl	80030c0 <SG_Reset>
  waveType = wSine;
 8003102:	2200      	movs	r2, #0
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <InitSigGen+0x4c>)
 8003106:	801a      	strh	r2, [r3, #0]
  SG_freqReset(calcFreq(freqSG), waveType);
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <InitSigGen+0x50>)
 800310a:	0018      	movs	r0, r3
 800310c:	f7ff ff44 	bl	8002f98 <calcFreq>
 8003110:	0003      	movs	r3, r0
 8003112:	001a      	movs	r2, r3
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <InitSigGen+0x4c>)
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	0019      	movs	r1, r3
 800311a:	0010      	movs	r0, r2
 800311c:	f000 f888 	bl	8003230 <SG_freqReset>
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	50000400 	.word	0x50000400
 800312c:	20000430 	.word	0x20000430
 8003130:	20000000 	.word	0x20000000

08003134 <SerialCommand>:
//   if a byte is available in teh seril input buffer
//   execute it as a command
//-----------------------------------------------------------------------------


void SerialCommand(void) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
	for(int i=0; i < 7; i++)
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	e06b      	b.n	8003218 <SerialCommand+0xe4>
	{
		if ((rxBufferUart2[i] >= '0') && (rxBufferUart2[i] <= '9')){
 8003140:	4a38      	ldr	r2, [pc, #224]	; (8003224 <SerialCommand+0xf0>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	18d3      	adds	r3, r2, r3
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b2f      	cmp	r3, #47	; 0x2f
 800314a:	d920      	bls.n	800318e <SerialCommand+0x5a>
 800314c:	4a35      	ldr	r2, [pc, #212]	; (8003224 <SerialCommand+0xf0>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	18d3      	adds	r3, r2, r3
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b39      	cmp	r3, #57	; 0x39
 8003156:	d81a      	bhi.n	800318e <SerialCommand+0x5a>
			for (int j=5; j>0; j--) freqSG[j] = freqSG[j-1];
 8003158:	2305      	movs	r3, #5
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	e00b      	b.n	8003176 <SerialCommand+0x42>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	3b01      	subs	r3, #1
 8003162:	4a31      	ldr	r2, [pc, #196]	; (8003228 <SerialCommand+0xf4>)
 8003164:	5cd1      	ldrb	r1, [r2, r3]
 8003166:	4a30      	ldr	r2, [pc, #192]	; (8003228 <SerialCommand+0xf4>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	18d3      	adds	r3, r2, r3
 800316c:	1c0a      	adds	r2, r1, #0
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	3b01      	subs	r3, #1
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	dcf0      	bgt.n	800315e <SerialCommand+0x2a>
			      freqSG[0] = rxBufferUart2[i] - '0';
 800317c:	4a29      	ldr	r2, [pc, #164]	; (8003224 <SerialCommand+0xf0>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	18d3      	adds	r3, r2, r3
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	3b30      	subs	r3, #48	; 0x30
 8003186:	b2da      	uxtb	r2, r3
 8003188:	4b27      	ldr	r3, [pc, #156]	; (8003228 <SerialCommand+0xf4>)
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	e041      	b.n	8003212 <SerialCommand+0xde>
		}else {
		      switch (rxBufferUart2[i]) {
 800318e:	4a25      	ldr	r2, [pc, #148]	; (8003224 <SerialCommand+0xf0>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	18d3      	adds	r3, r2, r3
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b52      	cmp	r3, #82	; 0x52
 8003198:	d038      	beq.n	800320c <SerialCommand+0xd8>
 800319a:	dc02      	bgt.n	80031a2 <SerialCommand+0x6e>
 800319c:	2b51      	cmp	r3, #81	; 0x51
 800319e:	d025      	beq.n	80031ec <SerialCommand+0xb8>
		        case 'S': waveType = wSine; SG_freqReset(calcFreq(freqSG), waveType); break;   // SigGen wave is sine
		        case 'T': waveType = wTriangle; SG_freqReset(calcFreq(freqSG), waveType); break;   // SigGen wave is triangle
		        case 'Q': waveType = wSquare; SG_freqReset(calcFreq(freqSG), waveType); break;   // SigGen wave is square
		        case 'R': SG_Reset();  break;   // SigGen reset
		        default: return;
 80031a0:	e03d      	b.n	800321e <SerialCommand+0xea>
		      switch (rxBufferUart2[i]) {
 80031a2:	2b53      	cmp	r3, #83	; 0x53
 80031a4:	d002      	beq.n	80031ac <SerialCommand+0x78>
 80031a6:	2b54      	cmp	r3, #84	; 0x54
 80031a8:	d010      	beq.n	80031cc <SerialCommand+0x98>
		        default: return;
 80031aa:	e038      	b.n	800321e <SerialCommand+0xea>
		        case 'S': waveType = wSine; SG_freqReset(calcFreq(freqSG), waveType); break;   // SigGen wave is sine
 80031ac:	2200      	movs	r2, #0
 80031ae:	4b1f      	ldr	r3, [pc, #124]	; (800322c <SerialCommand+0xf8>)
 80031b0:	801a      	strh	r2, [r3, #0]
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <SerialCommand+0xf4>)
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7ff feef 	bl	8002f98 <calcFreq>
 80031ba:	0003      	movs	r3, r0
 80031bc:	001a      	movs	r2, r3
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <SerialCommand+0xf8>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	0019      	movs	r1, r3
 80031c4:	0010      	movs	r0, r2
 80031c6:	f000 f833 	bl	8003230 <SG_freqReset>
 80031ca:	e022      	b.n	8003212 <SerialCommand+0xde>
		        case 'T': waveType = wTriangle; SG_freqReset(calcFreq(freqSG), waveType); break;   // SigGen wave is triangle
 80031cc:	2202      	movs	r2, #2
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <SerialCommand+0xf8>)
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <SerialCommand+0xf4>)
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7ff fedf 	bl	8002f98 <calcFreq>
 80031da:	0003      	movs	r3, r0
 80031dc:	001a      	movs	r2, r3
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <SerialCommand+0xf8>)
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	0019      	movs	r1, r3
 80031e4:	0010      	movs	r0, r2
 80031e6:	f000 f823 	bl	8003230 <SG_freqReset>
 80031ea:	e012      	b.n	8003212 <SerialCommand+0xde>
		        case 'Q': waveType = wSquare; SG_freqReset(calcFreq(freqSG), waveType); break;   // SigGen wave is square
 80031ec:	2228      	movs	r2, #40	; 0x28
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <SerialCommand+0xf8>)
 80031f0:	801a      	strh	r2, [r3, #0]
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <SerialCommand+0xf4>)
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7ff fecf 	bl	8002f98 <calcFreq>
 80031fa:	0003      	movs	r3, r0
 80031fc:	001a      	movs	r2, r3
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <SerialCommand+0xf8>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	0019      	movs	r1, r3
 8003204:	0010      	movs	r0, r2
 8003206:	f000 f813 	bl	8003230 <SG_freqReset>
 800320a:	e002      	b.n	8003212 <SerialCommand+0xde>
		        case 'R': SG_Reset();  break;   // SigGen reset
 800320c:	f7ff ff58 	bl	80030c0 <SG_Reset>
 8003210:	46c0      	nop			; (mov r8, r8)
	for(int i=0; i < 7; i++)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3301      	adds	r3, #1
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b06      	cmp	r3, #6
 800321c:	dd90      	ble.n	8003140 <SerialCommand+0xc>
		      }
		}
	}
}
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000130 	.word	0x20000130
 8003228:	20000000 	.word	0x20000000
 800322c:	20000430 	.word	0x20000430

08003230 <SG_freqReset>:
//-----------------------------------------------------------------------------
// SG_freqReset
//    reset the SG regs then set the frequency and wave type
//-----------------------------------------------------------------------------
void SG_freqReset(long frequency, int wave) {
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  long fl = frequency * (0x10000000 / 25000000.0);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff fd4c 	bl	8002cd8 <__aeabi_i2d>
 8003240:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <SG_freqReset+0x8c>)
 8003242:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <SG_freqReset+0x90>)
 8003244:	f7fe ff58 	bl	80020f8 <__aeabi_dmul>
 8003248:	0003      	movs	r3, r0
 800324a:	000c      	movs	r4, r1
 800324c:	0018      	movs	r0, r3
 800324e:	0021      	movs	r1, r4
 8003250:	f7ff fd0c 	bl	8002c6c <__aeabi_d2iz>
 8003254:	0003      	movs	r3, r0
 8003256:	60fb      	str	r3, [r7, #12]
  SG_WriteRegister(0x2100);
 8003258:	2384      	movs	r3, #132	; 0x84
 800325a:	019b      	lsls	r3, r3, #6
 800325c:	0018      	movs	r0, r3
 800325e:	f7ff fec9 	bl	8002ff4 <SG_WriteRegister>
  SG_WriteRegister((int)(fl & 0x3FFF) | 0x4000);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	b21b      	sxth	r3, r3
 8003266:	049b      	lsls	r3, r3, #18
 8003268:	0c9b      	lsrs	r3, r3, #18
 800326a:	b21b      	sxth	r3, r3
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	01d2      	lsls	r2, r2, #7
 8003270:	4313      	orrs	r3, r2
 8003272:	b21b      	sxth	r3, r3
 8003274:	b29b      	uxth	r3, r3
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff febc 	bl	8002ff4 <SG_WriteRegister>
  SG_WriteRegister((int)((fl & 0xFFFC000) >> 14) | 0x4000);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	139b      	asrs	r3, r3, #14
 8003280:	b21b      	sxth	r3, r3
 8003282:	049b      	lsls	r3, r3, #18
 8003284:	0c9b      	lsrs	r3, r3, #18
 8003286:	b21b      	sxth	r3, r3
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	01d2      	lsls	r2, r2, #7
 800328c:	4313      	orrs	r3, r2
 800328e:	b21b      	sxth	r3, r3
 8003290:	b29b      	uxth	r3, r3
 8003292:	0018      	movs	r0, r3
 8003294:	f7ff feae 	bl	8002ff4 <SG_WriteRegister>
  SG_WriteRegister(0xC000);
 8003298:	23c0      	movs	r3, #192	; 0xc0
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	0018      	movs	r0, r3
 800329e:	f7ff fea9 	bl	8002ff4 <SG_WriteRegister>
  SG_WriteRegister(wave);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7ff fea4 	bl	8002ff4 <SG_WriteRegister>
  waveType = wave;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <SG_freqReset+0x94>)
 80032b2:	801a      	strh	r2, [r3, #0]
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b005      	add	sp, #20
 80032ba:	bd90      	pop	{r4, r7, pc}
 80032bc:	e2308c3a 	.word	0xe2308c3a
 80032c0:	4025798e 	.word	0x4025798e
 80032c4:	20000430 	.word	0x20000430

080032c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032cc:	f001 fc46 	bl	8004b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032d0:	f000 f836 	bl	8003340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032d4:	f000 f9fa 	bl	80036cc <MX_GPIO_Init>
  MX_DMA_Init();
 80032d8:	f000 f9ca 	bl	8003670 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80032dc:	f000 f92c 	bl	8003538 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80032e0:	f000 f978 	bl	80035d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80032e4:	f000 f8aa 	bl	800343c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  InitSigGen();
 80032e8:	f7ff fefa 	bl	80030e0 <InitSigGen>

  HAL_UART_Receive_DMA(&huart1, rxBufferUart1, 4);
 80032ec:	490f      	ldr	r1, [pc, #60]	; (800332c <main+0x64>)
 80032ee:	4b10      	ldr	r3, [pc, #64]	; (8003330 <main+0x68>)
 80032f0:	2204      	movs	r2, #4
 80032f2:	0018      	movs	r0, r3
 80032f4:	f004 fce6 	bl	8007cc4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, rxBufferUart2, 7);
 80032f8:	490e      	ldr	r1, [pc, #56]	; (8003334 <main+0x6c>)
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <main+0x70>)
 80032fc:	2207      	movs	r2, #7
 80032fe:	0018      	movs	r0, r3
 8003300:	f004 fce0 	bl	8007cc4 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if ( flag == 1)
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <main+0x74>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10c      	bne.n	8003326 <main+0x5e>
	  {
		  readADC();
 800330c:	f000 fefc 	bl	8004108 <readADC>
		  convertADC();
 8003310:	f000 ff52 	bl	80041b8 <convertADC>
		  calculation();
 8003314:	f001 f828 	bl	8004368 <calculation>
		  display();
 8003318:	f001 f8dc 	bl	80044d4 <display>
		  resetValue();
 800331c:	f000 fb58 	bl	80039d0 <resetValue>
		  flag = 0;
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <main+0x74>)
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
	  }
	  SerialCommand();
 8003326:	f7ff ff05 	bl	8003134 <SerialCommand>
	  if ( flag == 1)
 800332a:	e7eb      	b.n	8003304 <main+0x3c>
 800332c:	2000042c 	.word	0x2000042c
 8003330:	200002b0 	.word	0x200002b0
 8003334:	20000130 	.word	0x20000130
 8003338:	2000039c 	.word	0x2000039c
 800333c:	20000098 	.word	0x20000098

08003340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b0a1      	sub	sp, #132	; 0x84
 8003344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003346:	2448      	movs	r4, #72	; 0x48
 8003348:	193b      	adds	r3, r7, r4
 800334a:	0018      	movs	r0, r3
 800334c:	2338      	movs	r3, #56	; 0x38
 800334e:	001a      	movs	r2, r3
 8003350:	2100      	movs	r1, #0
 8003352:	f006 fbaf 	bl	8009ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003356:	2338      	movs	r3, #56	; 0x38
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	0018      	movs	r0, r3
 800335c:	2310      	movs	r3, #16
 800335e:	001a      	movs	r2, r3
 8003360:	2100      	movs	r1, #0
 8003362:	f006 fba7 	bl	8009ab4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	0018      	movs	r0, r3
 800336a:	2334      	movs	r3, #52	; 0x34
 800336c:	001a      	movs	r2, r3
 800336e:	2100      	movs	r1, #0
 8003370:	f006 fba0 	bl	8009ab4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	0018      	movs	r0, r3
 800337a:	f003 fc3f 	bl	8006bfc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800337e:	193b      	adds	r3, r7, r4
 8003380:	2202      	movs	r2, #2
 8003382:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003384:	193b      	adds	r3, r7, r4
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	0052      	lsls	r2, r2, #1
 800338a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800338c:	0021      	movs	r1, r4
 800338e:	187b      	adds	r3, r7, r1
 8003390:	2200      	movs	r2, #0
 8003392:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003394:	187b      	adds	r3, r7, r1
 8003396:	2240      	movs	r2, #64	; 0x40
 8003398:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800339a:	187b      	adds	r3, r7, r1
 800339c:	2202      	movs	r2, #2
 800339e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033a0:	187b      	adds	r3, r7, r1
 80033a2:	2202      	movs	r2, #2
 80033a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	2200      	movs	r2, #0
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	2208      	movs	r2, #8
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033b2:	187b      	adds	r3, r7, r1
 80033b4:	2280      	movs	r2, #128	; 0x80
 80033b6:	0292      	lsls	r2, r2, #10
 80033b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	0492      	lsls	r2, r2, #18
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80033c2:	187b      	adds	r3, r7, r1
 80033c4:	2280      	movs	r2, #128	; 0x80
 80033c6:	0592      	lsls	r2, r2, #22
 80033c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033ca:	187b      	adds	r3, r7, r1
 80033cc:	0018      	movs	r0, r3
 80033ce:	f003 fc61 	bl	8006c94 <HAL_RCC_OscConfig>
 80033d2:	1e03      	subs	r3, r0, #0
 80033d4:	d001      	beq.n	80033da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80033d6:	f001 f90f 	bl	80045f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033da:	2138      	movs	r1, #56	; 0x38
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	2207      	movs	r2, #7
 80033e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033e2:	187b      	adds	r3, r7, r1
 80033e4:	2202      	movs	r2, #2
 80033e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80033e8:	187b      	adds	r3, r7, r1
 80033ea:	2280      	movs	r2, #128	; 0x80
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	2101      	movs	r1, #1
 80033fa:	0018      	movs	r0, r3
 80033fc:	f003 ff6a 	bl	80072d4 <HAL_RCC_ClockConfig>
 8003400:	1e03      	subs	r3, r0, #0
 8003402:	d001      	beq.n	8003408 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003404:	f001 f8f8 	bl	80045f8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003408:	1d3b      	adds	r3, r7, #4
 800340a:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <SystemClock_Config+0xf8>)
 800340c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800340e:	1d3b      	adds	r3, r7, #4
 8003410:	2200      	movs	r2, #0
 8003412:	605a      	str	r2, [r3, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	2200      	movs	r2, #0
 8003418:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	2200      	movs	r2, #0
 800341e:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	0018      	movs	r0, r3
 8003424:	f004 f900 	bl	8007628 <HAL_RCCEx_PeriphCLKConfig>
 8003428:	1e03      	subs	r3, r0, #0
 800342a:	d001      	beq.n	8003430 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800342c:	f001 f8e4 	bl	80045f8 <Error_Handler>
  }
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b021      	add	sp, #132	; 0x84
 8003436:	bd90      	pop	{r4, r7, pc}
 8003438:	00004003 	.word	0x00004003

0800343c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003442:	1d3b      	adds	r3, r7, #4
 8003444:	0018      	movs	r0, r3
 8003446:	230c      	movs	r3, #12
 8003448:	001a      	movs	r2, r3
 800344a:	2100      	movs	r1, #0
 800344c:	f006 fb32 	bl	8009ab4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003450:	4b36      	ldr	r3, [pc, #216]	; (800352c <MX_ADC1_Init+0xf0>)
 8003452:	4a37      	ldr	r2, [pc, #220]	; (8003530 <MX_ADC1_Init+0xf4>)
 8003454:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003456:	4b35      	ldr	r3, [pc, #212]	; (800352c <MX_ADC1_Init+0xf0>)
 8003458:	2280      	movs	r2, #128	; 0x80
 800345a:	05d2      	lsls	r2, r2, #23
 800345c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800345e:	4b33      	ldr	r3, [pc, #204]	; (800352c <MX_ADC1_Init+0xf0>)
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003464:	4b31      	ldr	r3, [pc, #196]	; (800352c <MX_ADC1_Init+0xf0>)
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800346a:	4b30      	ldr	r3, [pc, #192]	; (800352c <MX_ADC1_Init+0xf0>)
 800346c:	2280      	movs	r2, #128	; 0x80
 800346e:	0392      	lsls	r2, r2, #14
 8003470:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003472:	4b2e      	ldr	r3, [pc, #184]	; (800352c <MX_ADC1_Init+0xf0>)
 8003474:	2208      	movs	r2, #8
 8003476:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003478:	4b2c      	ldr	r3, [pc, #176]	; (800352c <MX_ADC1_Init+0xf0>)
 800347a:	2200      	movs	r2, #0
 800347c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800347e:	4b2b      	ldr	r3, [pc, #172]	; (800352c <MX_ADC1_Init+0xf0>)
 8003480:	2200      	movs	r2, #0
 8003482:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003484:	4b29      	ldr	r3, [pc, #164]	; (800352c <MX_ADC1_Init+0xf0>)
 8003486:	2200      	movs	r2, #0
 8003488:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 800348a:	4b28      	ldr	r3, [pc, #160]	; (800352c <MX_ADC1_Init+0xf0>)
 800348c:	2202      	movs	r2, #2
 800348e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003490:	4b26      	ldr	r3, [pc, #152]	; (800352c <MX_ADC1_Init+0xf0>)
 8003492:	2220      	movs	r2, #32
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003498:	4b24      	ldr	r3, [pc, #144]	; (800352c <MX_ADC1_Init+0xf0>)
 800349a:	2200      	movs	r2, #0
 800349c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800349e:	4b23      	ldr	r3, [pc, #140]	; (800352c <MX_ADC1_Init+0xf0>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80034a4:	4b21      	ldr	r3, [pc, #132]	; (800352c <MX_ADC1_Init+0xf0>)
 80034a6:	222c      	movs	r2, #44	; 0x2c
 80034a8:	2101      	movs	r1, #1
 80034aa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80034ac:	4b1f      	ldr	r3, [pc, #124]	; (800352c <MX_ADC1_Init+0xf0>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <MX_ADC1_Init+0xf0>)
 80034b4:	2207      	movs	r2, #7
 80034b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80034b8:	4b1c      	ldr	r3, [pc, #112]	; (800352c <MX_ADC1_Init+0xf0>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80034be:	4b1b      	ldr	r3, [pc, #108]	; (800352c <MX_ADC1_Init+0xf0>)
 80034c0:	223c      	movs	r2, #60	; 0x3c
 80034c2:	2100      	movs	r1, #0
 80034c4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80034c6:	4b19      	ldr	r3, [pc, #100]	; (800352c <MX_ADC1_Init+0xf0>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034cc:	4b17      	ldr	r3, [pc, #92]	; (800352c <MX_ADC1_Init+0xf0>)
 80034ce:	0018      	movs	r0, r3
 80034d0:	f001 fd48 	bl	8004f64 <HAL_ADC_Init>
 80034d4:	1e03      	subs	r3, r0, #0
 80034d6:	d001      	beq.n	80034dc <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80034d8:	f001 f88e 	bl	80045f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034e2:	1d3b      	adds	r3, r7, #4
 80034e4:	2200      	movs	r2, #0
 80034e6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034ee:	1d3a      	adds	r2, r7, #4
 80034f0:	4b0e      	ldr	r3, [pc, #56]	; (800352c <MX_ADC1_Init+0xf0>)
 80034f2:	0011      	movs	r1, r2
 80034f4:	0018      	movs	r0, r3
 80034f6:	f002 f989 	bl	800580c <HAL_ADC_ConfigChannel>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d001      	beq.n	8003502 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80034fe:	f001 f87b 	bl	80045f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003502:	1d3b      	adds	r3, r7, #4
 8003504:	4a0b      	ldr	r2, [pc, #44]	; (8003534 <MX_ADC1_Init+0xf8>)
 8003506:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003508:	1d3b      	adds	r3, r7, #4
 800350a:	2204      	movs	r2, #4
 800350c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800350e:	1d3a      	adds	r2, r7, #4
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <MX_ADC1_Init+0xf0>)
 8003512:	0011      	movs	r1, r2
 8003514:	0018      	movs	r0, r3
 8003516:	f002 f979 	bl	800580c <HAL_ADC_ConfigChannel>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d001      	beq.n	8003522 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800351e:	f001 f86b 	bl	80045f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b004      	add	sp, #16
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	20000194 	.word	0x20000194
 8003530:	40012400 	.word	0x40012400
 8003534:	04000002 	.word	0x04000002

08003538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800353c:	4b23      	ldr	r3, [pc, #140]	; (80035cc <MX_USART1_UART_Init+0x94>)
 800353e:	4a24      	ldr	r2, [pc, #144]	; (80035d0 <MX_USART1_UART_Init+0x98>)
 8003540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <MX_USART1_UART_Init+0x94>)
 8003544:	2296      	movs	r2, #150	; 0x96
 8003546:	0192      	lsls	r2, r2, #6
 8003548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <MX_USART1_UART_Init+0x94>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003550:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <MX_USART1_UART_Init+0x94>)
 8003552:	2200      	movs	r2, #0
 8003554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <MX_USART1_UART_Init+0x94>)
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <MX_USART1_UART_Init+0x94>)
 800355e:	220c      	movs	r2, #12
 8003560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003562:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <MX_USART1_UART_Init+0x94>)
 8003564:	2200      	movs	r2, #0
 8003566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003568:	4b18      	ldr	r3, [pc, #96]	; (80035cc <MX_USART1_UART_Init+0x94>)
 800356a:	2200      	movs	r2, #0
 800356c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800356e:	4b17      	ldr	r3, [pc, #92]	; (80035cc <MX_USART1_UART_Init+0x94>)
 8003570:	2200      	movs	r2, #0
 8003572:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003574:	4b15      	ldr	r3, [pc, #84]	; (80035cc <MX_USART1_UART_Init+0x94>)
 8003576:	2200      	movs	r2, #0
 8003578:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800357a:	4b14      	ldr	r3, [pc, #80]	; (80035cc <MX_USART1_UART_Init+0x94>)
 800357c:	2200      	movs	r2, #0
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003580:	4b12      	ldr	r3, [pc, #72]	; (80035cc <MX_USART1_UART_Init+0x94>)
 8003582:	0018      	movs	r0, r3
 8003584:	f004 fa08 	bl	8007998 <HAL_UART_Init>
 8003588:	1e03      	subs	r3, r0, #0
 800358a:	d001      	beq.n	8003590 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800358c:	f001 f834 	bl	80045f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003590:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <MX_USART1_UART_Init+0x94>)
 8003592:	2100      	movs	r1, #0
 8003594:	0018      	movs	r0, r3
 8003596:	f006 f977 	bl	8009888 <HAL_UARTEx_SetTxFifoThreshold>
 800359a:	1e03      	subs	r3, r0, #0
 800359c:	d001      	beq.n	80035a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800359e:	f001 f82b 	bl	80045f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <MX_USART1_UART_Init+0x94>)
 80035a4:	2100      	movs	r1, #0
 80035a6:	0018      	movs	r0, r3
 80035a8:	f006 f9ae 	bl	8009908 <HAL_UARTEx_SetRxFifoThreshold>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d001      	beq.n	80035b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80035b0:	f001 f822 	bl	80045f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <MX_USART1_UART_Init+0x94>)
 80035b6:	0018      	movs	r0, r3
 80035b8:	f006 f92c 	bl	8009814 <HAL_UARTEx_DisableFifoMode>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	d001      	beq.n	80035c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80035c0:	f001 f81a 	bl	80045f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	200002b0 	.word	0x200002b0
 80035d0:	40013800 	.word	0x40013800

080035d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035d8:	4b23      	ldr	r3, [pc, #140]	; (8003668 <MX_USART2_UART_Init+0x94>)
 80035da:	4a24      	ldr	r2, [pc, #144]	; (800366c <MX_USART2_UART_Init+0x98>)
 80035dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <MX_USART2_UART_Init+0x94>)
 80035e0:	22e1      	movs	r2, #225	; 0xe1
 80035e2:	0252      	lsls	r2, r2, #9
 80035e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <MX_USART2_UART_Init+0x94>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035ec:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <MX_USART2_UART_Init+0x94>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <MX_USART2_UART_Init+0x94>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035f8:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <MX_USART2_UART_Init+0x94>)
 80035fa:	220c      	movs	r2, #12
 80035fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035fe:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <MX_USART2_UART_Init+0x94>)
 8003600:	2200      	movs	r2, #0
 8003602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003604:	4b18      	ldr	r3, [pc, #96]	; (8003668 <MX_USART2_UART_Init+0x94>)
 8003606:	2200      	movs	r2, #0
 8003608:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800360a:	4b17      	ldr	r3, [pc, #92]	; (8003668 <MX_USART2_UART_Init+0x94>)
 800360c:	2200      	movs	r2, #0
 800360e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003610:	4b15      	ldr	r3, [pc, #84]	; (8003668 <MX_USART2_UART_Init+0x94>)
 8003612:	2200      	movs	r2, #0
 8003614:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <MX_USART2_UART_Init+0x94>)
 8003618:	2200      	movs	r2, #0
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <MX_USART2_UART_Init+0x94>)
 800361e:	0018      	movs	r0, r3
 8003620:	f004 f9ba 	bl	8007998 <HAL_UART_Init>
 8003624:	1e03      	subs	r3, r0, #0
 8003626:	d001      	beq.n	800362c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003628:	f000 ffe6 	bl	80045f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <MX_USART2_UART_Init+0x94>)
 800362e:	2100      	movs	r1, #0
 8003630:	0018      	movs	r0, r3
 8003632:	f006 f929 	bl	8009888 <HAL_UARTEx_SetTxFifoThreshold>
 8003636:	1e03      	subs	r3, r0, #0
 8003638:	d001      	beq.n	800363e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800363a:	f000 ffdd 	bl	80045f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <MX_USART2_UART_Init+0x94>)
 8003640:	2100      	movs	r1, #0
 8003642:	0018      	movs	r0, r3
 8003644:	f006 f960 	bl	8009908 <HAL_UARTEx_SetRxFifoThreshold>
 8003648:	1e03      	subs	r3, r0, #0
 800364a:	d001      	beq.n	8003650 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800364c:	f000 ffd4 	bl	80045f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <MX_USART2_UART_Init+0x94>)
 8003652:	0018      	movs	r0, r3
 8003654:	f006 f8de 	bl	8009814 <HAL_UARTEx_DisableFifoMode>
 8003658:	1e03      	subs	r3, r0, #0
 800365a:	d001      	beq.n	8003660 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800365c:	f000 ffcc 	bl	80045f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	2000039c 	.word	0x2000039c
 800366c:	40004400 	.word	0x40004400

08003670 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003676:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <MX_DMA_Init+0x58>)
 8003678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367a:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <MX_DMA_Init+0x58>)
 800367c:	2101      	movs	r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	639a      	str	r2, [r3, #56]	; 0x38
 8003682:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <MX_DMA_Init+0x58>)
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	2201      	movs	r2, #1
 8003688:	4013      	ands	r3, r2
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800368e:	2200      	movs	r2, #0
 8003690:	2100      	movs	r1, #0
 8003692:	2009      	movs	r0, #9
 8003694:	f002 fd7e 	bl	8006194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003698:	2009      	movs	r0, #9
 800369a:	f002 fd90 	bl	80061be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	200a      	movs	r0, #10
 80036a4:	f002 fd76 	bl	8006194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80036a8:	200a      	movs	r0, #10
 80036aa:	f002 fd88 	bl	80061be <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2100      	movs	r1, #0
 80036b2:	200b      	movs	r0, #11
 80036b4:	f002 fd6e 	bl	8006194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 80036b8:	200b      	movs	r0, #11
 80036ba:	f002 fd80 	bl	80061be <HAL_NVIC_EnableIRQ>

}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b002      	add	sp, #8
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	40021000 	.word	0x40021000

080036cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d2:	240c      	movs	r4, #12
 80036d4:	193b      	adds	r3, r7, r4
 80036d6:	0018      	movs	r0, r3
 80036d8:	2314      	movs	r3, #20
 80036da:	001a      	movs	r2, r3
 80036dc:	2100      	movs	r1, #0
 80036de:	f006 f9e9 	bl	8009ab4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036e2:	4b3f      	ldr	r3, [pc, #252]	; (80037e0 <MX_GPIO_Init+0x114>)
 80036e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e6:	4b3e      	ldr	r3, [pc, #248]	; (80037e0 <MX_GPIO_Init+0x114>)
 80036e8:	2104      	movs	r1, #4
 80036ea:	430a      	orrs	r2, r1
 80036ec:	635a      	str	r2, [r3, #52]	; 0x34
 80036ee:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <MX_GPIO_Init+0x114>)
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	2204      	movs	r2, #4
 80036f4:	4013      	ands	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fa:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <MX_GPIO_Init+0x114>)
 80036fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fe:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <MX_GPIO_Init+0x114>)
 8003700:	2101      	movs	r1, #1
 8003702:	430a      	orrs	r2, r1
 8003704:	635a      	str	r2, [r3, #52]	; 0x34
 8003706:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <MX_GPIO_Init+0x114>)
 8003708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370a:	2201      	movs	r2, #1
 800370c:	4013      	ands	r3, r2
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003712:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <MX_GPIO_Init+0x114>)
 8003714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003716:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <MX_GPIO_Init+0x114>)
 8003718:	2102      	movs	r1, #2
 800371a:	430a      	orrs	r2, r1
 800371c:	635a      	str	r2, [r3, #52]	; 0x34
 800371e:	4b30      	ldr	r3, [pc, #192]	; (80037e0 <MX_GPIO_Init+0x114>)
 8003720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003722:	2202      	movs	r2, #2
 8003724:	4013      	ands	r3, r2
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|Data_Pin, GPIO_PIN_RESET);
 800372a:	2390      	movs	r3, #144	; 0x90
 800372c:	0059      	lsls	r1, r3, #1
 800372e:	23a0      	movs	r3, #160	; 0xa0
 8003730:	05db      	lsls	r3, r3, #23
 8003732:	2200      	movs	r2, #0
 8003734:	0018      	movs	r0, r3
 8003736:	f003 fa10 	bl	8006b5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Clk_GPIO_Port, Clk_Pin, GPIO_PIN_RESET);
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	01db      	lsls	r3, r3, #7
 800373e:	4829      	ldr	r0, [pc, #164]	; (80037e4 <MX_GPIO_Init+0x118>)
 8003740:	2200      	movs	r2, #0
 8003742:	0019      	movs	r1, r3
 8003744:	f003 fa09 	bl	8006b5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSync_GPIO_Port, FSync_Pin, GPIO_PIN_SET);
 8003748:	4b26      	ldr	r3, [pc, #152]	; (80037e4 <MX_GPIO_Init+0x118>)
 800374a:	2201      	movs	r2, #1
 800374c:	2110      	movs	r1, #16
 800374e:	0018      	movs	r0, r3
 8003750:	f003 fa03 	bl	8006b5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ButtonUser_Pin */
  GPIO_InitStruct.Pin = ButtonUser_Pin;
 8003754:	193b      	adds	r3, r7, r4
 8003756:	2280      	movs	r2, #128	; 0x80
 8003758:	0192      	lsls	r2, r2, #6
 800375a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800375c:	193b      	adds	r3, r7, r4
 800375e:	4a22      	ldr	r2, [pc, #136]	; (80037e8 <MX_GPIO_Init+0x11c>)
 8003760:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	193b      	adds	r3, r7, r4
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ButtonUser_GPIO_Port, &GPIO_InitStruct);
 8003768:	193b      	adds	r3, r7, r4
 800376a:	4a20      	ldr	r2, [pc, #128]	; (80037ec <MX_GPIO_Init+0x120>)
 800376c:	0019      	movs	r1, r3
 800376e:	0010      	movs	r0, r2
 8003770:	f003 f872 	bl	8006858 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin Data_Pin */
  GPIO_InitStruct.Pin = LED_Pin|Data_Pin;
 8003774:	0021      	movs	r1, r4
 8003776:	187b      	adds	r3, r7, r1
 8003778:	2290      	movs	r2, #144	; 0x90
 800377a:	0052      	lsls	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800377e:	187b      	adds	r3, r7, r1
 8003780:	2201      	movs	r2, #1
 8003782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	187b      	adds	r3, r7, r1
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378a:	187b      	adds	r3, r7, r1
 800378c:	2200      	movs	r2, #0
 800378e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003790:	000c      	movs	r4, r1
 8003792:	187a      	adds	r2, r7, r1
 8003794:	23a0      	movs	r3, #160	; 0xa0
 8003796:	05db      	lsls	r3, r3, #23
 8003798:	0011      	movs	r1, r2
 800379a:	0018      	movs	r0, r3
 800379c:	f003 f85c 	bl	8006858 <HAL_GPIO_Init>

  /*Configure GPIO pins : Clk_Pin FSync_Pin */
  GPIO_InitStruct.Pin = Clk_Pin|FSync_Pin;
 80037a0:	0021      	movs	r1, r4
 80037a2:	187b      	adds	r3, r7, r1
 80037a4:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <MX_GPIO_Init+0x124>)
 80037a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	2201      	movs	r2, #1
 80037ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	2200      	movs	r2, #0
 80037b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	4a09      	ldr	r2, [pc, #36]	; (80037e4 <MX_GPIO_Init+0x118>)
 80037be:	0019      	movs	r1, r3
 80037c0:	0010      	movs	r0, r2
 80037c2:	f003 f849 	bl	8006858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2100      	movs	r1, #0
 80037ca:	2007      	movs	r0, #7
 80037cc:	f002 fce2 	bl	8006194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80037d0:	2007      	movs	r0, #7
 80037d2:	f002 fcf4 	bl	80061be <HAL_NVIC_EnableIRQ>

}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b009      	add	sp, #36	; 0x24
 80037dc:	bd90      	pop	{r4, r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	40021000 	.word	0x40021000
 80037e4:	50000400 	.word	0x50000400
 80037e8:	10210000 	.word	0x10210000
 80037ec:	50000800 	.word	0x50000800
 80037f0:	00004010 	.word	0x00004010

080037f4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a11      	ldr	r2, [pc, #68]	; (8003848 <HAL_UART_RxCpltCallback+0x54>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10a      	bne.n	800381c <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Transmit_DMA(&huart2, rxBufferUart1, 4);
 8003806:	4911      	ldr	r1, [pc, #68]	; (800384c <HAL_UART_RxCpltCallback+0x58>)
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_UART_RxCpltCallback+0x5c>)
 800380a:	2204      	movs	r2, #4
 800380c:	0018      	movs	r0, r3
 800380e:	f004 f9c5 	bl	8007b9c <HAL_UART_Transmit_DMA>
		tachChuoi();
 8003812:	f000 f825 	bl	8003860 <tachChuoi>
		flag = 1;
 8003816:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <HAL_UART_RxCpltCallback+0x60>)
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
	}
	if (huart->Instance == USART2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0d      	ldr	r2, [pc, #52]	; (8003858 <HAL_UART_RxCpltCallback+0x64>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10c      	bne.n	8003840 <HAL_UART_RxCpltCallback+0x4c>
	{
		//HAL_UART_Transmit_DMA(&huart1, rxBufferUart2, 7);
		uint8_t notice[5] = "OK!\r\n";
 8003826:	2008      	movs	r0, #8
 8003828:	183b      	adds	r3, r7, r0
 800382a:	4a0c      	ldr	r2, [pc, #48]	; (800385c <HAL_UART_RxCpltCallback+0x68>)
 800382c:	6811      	ldr	r1, [r2, #0]
 800382e:	6019      	str	r1, [r3, #0]
 8003830:	7912      	ldrb	r2, [r2, #4]
 8003832:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart2, notice, 5, 1);
 8003834:	1839      	adds	r1, r7, r0
 8003836:	4806      	ldr	r0, [pc, #24]	; (8003850 <HAL_UART_RxCpltCallback+0x5c>)
 8003838:	2301      	movs	r3, #1
 800383a:	2205      	movs	r2, #5
 800383c:	f004 f902 	bl	8007a44 <HAL_UART_Transmit>
	}
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b004      	add	sp, #16
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40013800 	.word	0x40013800
 800384c:	2000042c 	.word	0x2000042c
 8003850:	2000039c 	.word	0x2000039c
 8003854:	20000098 	.word	0x20000098
 8003858:	40004400 	.word	0x40004400
 800385c:	0800b260 	.word	0x0800b260

08003860 <tachChuoi>:
 void tachChuoi(void)
 {
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
	 ChieuCao = rxBufferUart1[0];
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <tachChuoi+0x2c>)
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <tachChuoi+0x30>)
 800386a:	701a      	strb	r2, [r3, #0]
	 CanNang = rxBufferUart1[1];
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <tachChuoi+0x2c>)
 800386e:	785a      	ldrb	r2, [r3, #1]
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <tachChuoi+0x34>)
 8003872:	701a      	strb	r2, [r3, #0]
	 GioiTinh = rxBufferUart1[2];
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <tachChuoi+0x2c>)
 8003876:	789a      	ldrb	r2, [r3, #2]
 8003878:	4b07      	ldr	r3, [pc, #28]	; (8003898 <tachChuoi+0x38>)
 800387a:	701a      	strb	r2, [r3, #0]
	 Tuoi = rxBufferUart1[3];
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <tachChuoi+0x2c>)
 800387e:	78da      	ldrb	r2, [r3, #3]
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <tachChuoi+0x3c>)
 8003882:	701a      	strb	r2, [r3, #0]
 }
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	2000042c 	.word	0x2000042c
 8003890:	20000398 	.word	0x20000398
 8003894:	20000428 	.word	0x20000428
 8003898:	20000399 	.word	0x20000399
 800389c:	2000039a 	.word	0x2000039a

080038a0 <HAL_GPIO_EXTI_Falling_Callback>:

// ngat button
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80038a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a2:	b08b      	sub	sp, #44	; 0x2c
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	0002      	movs	r2, r0
 80038a8:	1dbb      	adds	r3, r7, #6
 80038aa:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(ButtonUser_GPIO_Port, ButtonUser_Pin) == GPIO_PIN_RESET)
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	019b      	lsls	r3, r3, #6
 80038b0:	4a45      	ldr	r2, [pc, #276]	; (80039c8 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 80038b2:	0019      	movs	r1, r3
 80038b4:	0010      	movs	r0, r2
 80038b6:	f003 f933 	bl	8006b20 <HAL_GPIO_ReadPin>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d17f      	bne.n	80039be <HAL_GPIO_EXTI_Falling_Callback+0x11e>
	{
		uint8_t number1 = 49;
 80038be:	2127      	movs	r1, #39	; 0x27
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	2231      	movs	r2, #49	; 0x31
 80038c4:	701a      	strb	r2, [r3, #0]
		uint8_t number2 = 50;
 80038c6:	2426      	movs	r4, #38	; 0x26
 80038c8:	193b      	adds	r3, r7, r4
 80038ca:	2232      	movs	r2, #50	; 0x32
 80038cc:	701a      	strb	r2, [r3, #0]
		uint8_t number3 = 51;
 80038ce:	2525      	movs	r5, #37	; 0x25
 80038d0:	197b      	adds	r3, r7, r5
 80038d2:	2233      	movs	r2, #51	; 0x33
 80038d4:	701a      	strb	r2, [r3, #0]
		uint8_t number4 = 52;
 80038d6:	2624      	movs	r6, #36	; 0x24
 80038d8:	19bb      	adds	r3, r7, r6
 80038da:	2234      	movs	r2, #52	; 0x34
 80038dc:	701a      	strb	r2, [r3, #0]
		uint8_t number5 = 53;
 80038de:	2323      	movs	r3, #35	; 0x23
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	2235      	movs	r2, #53	; 0x35
 80038e4:	701a      	strb	r2, [r3, #0]
		uint8_t number6 = 54;
 80038e6:	2022      	movs	r0, #34	; 0x22
 80038e8:	183b      	adds	r3, r7, r0
 80038ea:	2236      	movs	r2, #54	; 0x36
 80038ec:	701a      	strb	r2, [r3, #0]

		uint32_t a1 = 12;
 80038ee:	230c      	movs	r3, #12
 80038f0:	61fb      	str	r3, [r7, #28]
		uint32_t a2 = 13;
 80038f2:	230d      	movs	r3, #13
 80038f4:	61bb      	str	r3, [r7, #24]
		uint32_t a3 = 14;
 80038f6:	230e      	movs	r3, #14
 80038f8:	617b      	str	r3, [r7, #20]
		uint32_t a4 = 15;
 80038fa:	230f      	movs	r3, #15
 80038fc:	613b      	str	r3, [r7, #16]
		uint32_t a5 = 15;
 80038fe:	230f      	movs	r3, #15
 8003900:	60fb      	str	r3, [r7, #12]
		uint32_t a6 = 16;
 8003902:	2310      	movs	r3, #16
 8003904:	60bb      	str	r3, [r7, #8]

		//uint8_t number[6] = 7;

		HAL_UART_Transmit(&huart1, &number1, 1, 1000);
 8003906:	23fa      	movs	r3, #250	; 0xfa
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	1879      	adds	r1, r7, r1
 800390c:	482f      	ldr	r0, [pc, #188]	; (80039cc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 800390e:	2201      	movs	r2, #1
 8003910:	f004 f898 	bl	8007a44 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *) &a1, 4, 1000);
 8003914:	23fa      	movs	r3, #250	; 0xfa
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	211c      	movs	r1, #28
 800391a:	1879      	adds	r1, r7, r1
 800391c:	482b      	ldr	r0, [pc, #172]	; (80039cc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 800391e:	2204      	movs	r2, #4
 8003920:	f004 f890 	bl	8007a44 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, &number2, 1, 1000);
 8003924:	23fa      	movs	r3, #250	; 0xfa
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	1939      	adds	r1, r7, r4
 800392a:	4828      	ldr	r0, [pc, #160]	; (80039cc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 800392c:	2201      	movs	r2, #1
 800392e:	f004 f889 	bl	8007a44 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *) &a2, 4, 1000);
 8003932:	23fa      	movs	r3, #250	; 0xfa
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	2118      	movs	r1, #24
 8003938:	1879      	adds	r1, r7, r1
 800393a:	4824      	ldr	r0, [pc, #144]	; (80039cc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 800393c:	2204      	movs	r2, #4
 800393e:	f004 f881 	bl	8007a44 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, &number3, 1, 1000);
 8003942:	23fa      	movs	r3, #250	; 0xfa
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	1979      	adds	r1, r7, r5
 8003948:	4820      	ldr	r0, [pc, #128]	; (80039cc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 800394a:	2201      	movs	r2, #1
 800394c:	f004 f87a 	bl	8007a44 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *) &a3, 4, 1000);
 8003950:	23fa      	movs	r3, #250	; 0xfa
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	2114      	movs	r1, #20
 8003956:	1879      	adds	r1, r7, r1
 8003958:	481c      	ldr	r0, [pc, #112]	; (80039cc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 800395a:	2204      	movs	r2, #4
 800395c:	f004 f872 	bl	8007a44 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, &number4, 1, 1000);
 8003960:	23fa      	movs	r3, #250	; 0xfa
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	19b9      	adds	r1, r7, r6
 8003966:	4819      	ldr	r0, [pc, #100]	; (80039cc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8003968:	2201      	movs	r2, #1
 800396a:	f004 f86b 	bl	8007a44 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *) &a4, 4, 1000);
 800396e:	23fa      	movs	r3, #250	; 0xfa
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	2110      	movs	r1, #16
 8003974:	1879      	adds	r1, r7, r1
 8003976:	4815      	ldr	r0, [pc, #84]	; (80039cc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8003978:	2204      	movs	r2, #4
 800397a:	f004 f863 	bl	8007a44 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, &number5, 1, 1000);
 800397e:	23fa      	movs	r3, #250	; 0xfa
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	2223      	movs	r2, #35	; 0x23
 8003984:	18b9      	adds	r1, r7, r2
 8003986:	4811      	ldr	r0, [pc, #68]	; (80039cc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8003988:	2201      	movs	r2, #1
 800398a:	f004 f85b 	bl	8007a44 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *) &a5, 4, 1000);
 800398e:	23fa      	movs	r3, #250	; 0xfa
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	220c      	movs	r2, #12
 8003994:	18b9      	adds	r1, r7, r2
 8003996:	480d      	ldr	r0, [pc, #52]	; (80039cc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8003998:	2204      	movs	r2, #4
 800399a:	f004 f853 	bl	8007a44 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, &number6, 1, 1000);
 800399e:	23fa      	movs	r3, #250	; 0xfa
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	2022      	movs	r0, #34	; 0x22
 80039a4:	1839      	adds	r1, r7, r0
 80039a6:	4809      	ldr	r0, [pc, #36]	; (80039cc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	f004 f84b 	bl	8007a44 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *) &a6, 4, 1000);
 80039ae:	23fa      	movs	r3, #250	; 0xfa
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	2208      	movs	r2, #8
 80039b4:	18b9      	adds	r1, r7, r2
 80039b6:	4805      	ldr	r0, [pc, #20]	; (80039cc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 80039b8:	2204      	movs	r2, #4
 80039ba:	f004 f843 	bl	8007a44 <HAL_UART_Transmit>
	}
}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b00b      	add	sp, #44	; 0x2c
 80039c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	50000800 	.word	0x50000800
 80039cc:	200002b0 	.word	0x200002b0

080039d0 <resetValue>:
//
void resetValue(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
	sumofMAG = 0;
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <resetValue+0x18>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
	sumofPHS = 0;
 80039da:	4b04      	ldr	r3, [pc, #16]	; (80039ec <resetValue+0x1c>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	2000009c 	.word	0x2000009c
 80039ec:	200000a0 	.word	0x200000a0

080039f0 <FFMfFunction>:
// Ham Fat Free Mass
float FFMfFunction(uint16_t height,uint16_t weight,uint16_t R50,uint16_t Xc,uint8_t sex)  // 1 la nam, 0 la nu
{
 80039f0:	b5b0      	push	{r4, r5, r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	0005      	movs	r5, r0
 80039f8:	000c      	movs	r4, r1
 80039fa:	0010      	movs	r0, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	1dbb      	adds	r3, r7, #6
 8003a00:	1c2a      	adds	r2, r5, #0
 8003a02:	801a      	strh	r2, [r3, #0]
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	1c22      	adds	r2, r4, #0
 8003a08:	801a      	strh	r2, [r3, #0]
 8003a0a:	1cbb      	adds	r3, r7, #2
 8003a0c:	1c02      	adds	r2, r0, #0
 8003a0e:	801a      	strh	r2, [r3, #0]
 8003a10:	003b      	movs	r3, r7
 8003a12:	1c0a      	adds	r2, r1, #0
 8003a14:	801a      	strh	r2, [r3, #0]
	float FFM = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
	FFM = -4.104 + 0.518*height*height/R50 + 0.231*weight + 0.130*Xc + 4.229*sex;
 8003a1a:	1dbb      	adds	r3, r7, #6
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f7ff f95a 	bl	8002cd8 <__aeabi_i2d>
 8003a24:	4a38      	ldr	r2, [pc, #224]	; (8003b08 <FFMfFunction+0x118>)
 8003a26:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <FFMfFunction+0x11c>)
 8003a28:	f7fe fb66 	bl	80020f8 <__aeabi_dmul>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	000c      	movs	r4, r1
 8003a30:	0025      	movs	r5, r4
 8003a32:	001c      	movs	r4, r3
 8003a34:	1dbb      	adds	r3, r7, #6
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7ff f94d 	bl	8002cd8 <__aeabi_i2d>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	000b      	movs	r3, r1
 8003a42:	0020      	movs	r0, r4
 8003a44:	0029      	movs	r1, r5
 8003a46:	f7fe fb57 	bl	80020f8 <__aeabi_dmul>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	000c      	movs	r4, r1
 8003a4e:	0025      	movs	r5, r4
 8003a50:	001c      	movs	r4, r3
 8003a52:	1cbb      	adds	r3, r7, #2
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	0018      	movs	r0, r3
 8003a58:	f7ff f93e 	bl	8002cd8 <__aeabi_i2d>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	000b      	movs	r3, r1
 8003a60:	0020      	movs	r0, r4
 8003a62:	0029      	movs	r1, r5
 8003a64:	f7fe f846 	bl	8001af4 <__aeabi_ddiv>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	000c      	movs	r4, r1
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	0021      	movs	r1, r4
 8003a70:	4a27      	ldr	r2, [pc, #156]	; (8003b10 <FFMfFunction+0x120>)
 8003a72:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <FFMfFunction+0x124>)
 8003a74:	f7fe fdb2 	bl	80025dc <__aeabi_dsub>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	000c      	movs	r4, r1
 8003a7c:	0025      	movs	r5, r4
 8003a7e:	001c      	movs	r4, r3
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f7ff f927 	bl	8002cd8 <__aeabi_i2d>
 8003a8a:	4a23      	ldr	r2, [pc, #140]	; (8003b18 <FFMfFunction+0x128>)
 8003a8c:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <FFMfFunction+0x12c>)
 8003a8e:	f7fe fb33 	bl	80020f8 <__aeabi_dmul>
 8003a92:	0002      	movs	r2, r0
 8003a94:	000b      	movs	r3, r1
 8003a96:	0020      	movs	r0, r4
 8003a98:	0029      	movs	r1, r5
 8003a9a:	f7fd fd0f 	bl	80014bc <__aeabi_dadd>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	000c      	movs	r4, r1
 8003aa2:	0025      	movs	r5, r4
 8003aa4:	001c      	movs	r4, r3
 8003aa6:	003b      	movs	r3, r7
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f7ff f914 	bl	8002cd8 <__aeabi_i2d>
 8003ab0:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <FFMfFunction+0x130>)
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <FFMfFunction+0x134>)
 8003ab4:	f7fe fb20 	bl	80020f8 <__aeabi_dmul>
 8003ab8:	0002      	movs	r2, r0
 8003aba:	000b      	movs	r3, r1
 8003abc:	0020      	movs	r0, r4
 8003abe:	0029      	movs	r1, r5
 8003ac0:	f7fd fcfc 	bl	80014bc <__aeabi_dadd>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	000c      	movs	r4, r1
 8003ac8:	0025      	movs	r5, r4
 8003aca:	001c      	movs	r4, r3
 8003acc:	2320      	movs	r3, #32
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f7ff f900 	bl	8002cd8 <__aeabi_i2d>
 8003ad8:	4a0d      	ldr	r2, [pc, #52]	; (8003b10 <FFMfFunction+0x120>)
 8003ada:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <FFMfFunction+0x138>)
 8003adc:	f7fe fb0c 	bl	80020f8 <__aeabi_dmul>
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	000b      	movs	r3, r1
 8003ae4:	0020      	movs	r0, r4
 8003ae6:	0029      	movs	r1, r5
 8003ae8:	f7fd fce8 	bl	80014bc <__aeabi_dadd>
 8003aec:	0003      	movs	r3, r0
 8003aee:	000c      	movs	r4, r1
 8003af0:	0018      	movs	r0, r3
 8003af2:	0021      	movs	r1, r4
 8003af4:	f7ff f97c 	bl	8002df0 <__aeabi_d2f>
 8003af8:	1c03      	adds	r3, r0, #0
 8003afa:	60fb      	str	r3, [r7, #12]
	return FFM;
 8003afc:	68fb      	ldr	r3, [r7, #12]
}
 8003afe:	1c18      	adds	r0, r3, #0
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b004      	add	sp, #16
 8003b04:	bdb0      	pop	{r4, r5, r7, pc}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	bc6a7efa 	.word	0xbc6a7efa
 8003b0c:	3fe09374 	.word	0x3fe09374
 8003b10:	f9db22d1 	.word	0xf9db22d1
 8003b14:	40106a7e 	.word	0x40106a7e
 8003b18:	72b020c5 	.word	0x72b020c5
 8003b1c:	3fcd9168 	.word	0x3fcd9168
 8003b20:	0a3d70a4 	.word	0x0a3d70a4
 8003b24:	3fc0a3d7 	.word	0x3fc0a3d7
 8003b28:	4010ea7e 	.word	0x4010ea7e

08003b2c <FM>:
// Ham Fat Mass
float FM(uint16_t weight,uint32_t FFM)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	0002      	movs	r2, r0
 8003b34:	6039      	str	r1, [r7, #0]
 8003b36:	1dbb      	adds	r3, r7, #6
 8003b38:	801a      	strh	r2, [r3, #0]
	float FM = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
	FM = weight - FFM;
 8003b3e:	1dbb      	adds	r3, r7, #6
 8003b40:	881a      	ldrh	r2, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	0018      	movs	r0, r3
 8003b48:	f7fd fc78 	bl	800143c <__aeabi_ui2f>
 8003b4c:	1c03      	adds	r3, r0, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
	return FM;
 8003b50:	68fb      	ldr	r3, [r7, #12]
}
 8003b52:	1c18      	adds	r0, r3, #0
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b004      	add	sp, #16
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <TBW>:
// Ham Total Body Water
float TBW(uint16_t height, uint16_t weight, uint16_t R50, uint8_t sex) // 1 la nam, 0 la nu
{
 8003b5c:	b5b0      	push	{r4, r5, r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	0005      	movs	r5, r0
 8003b64:	000c      	movs	r4, r1
 8003b66:	0010      	movs	r0, r2
 8003b68:	0019      	movs	r1, r3
 8003b6a:	1dbb      	adds	r3, r7, #6
 8003b6c:	1c2a      	adds	r2, r5, #0
 8003b6e:	801a      	strh	r2, [r3, #0]
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	1c22      	adds	r2, r4, #0
 8003b74:	801a      	strh	r2, [r3, #0]
 8003b76:	1cbb      	adds	r3, r7, #2
 8003b78:	1c02      	adds	r2, r0, #0
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	1c7b      	adds	r3, r7, #1
 8003b7e:	1c0a      	adds	r2, r1, #0
 8003b80:	701a      	strb	r2, [r3, #0]
	float TBW = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
	if (sex == 1)
 8003b86:	1c7b      	adds	r3, r7, #1
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d14b      	bne.n	8003c26 <TBW+0xca>
	{
		TBW = 8.399 + 0.396*height*height/R50 + 0.143*weight;
 8003b8e:	1dbb      	adds	r3, r7, #6
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	0018      	movs	r0, r3
 8003b94:	f7ff f8a0 	bl	8002cd8 <__aeabi_i2d>
 8003b98:	4a4a      	ldr	r2, [pc, #296]	; (8003cc4 <TBW+0x168>)
 8003b9a:	4b4b      	ldr	r3, [pc, #300]	; (8003cc8 <TBW+0x16c>)
 8003b9c:	f7fe faac 	bl	80020f8 <__aeabi_dmul>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	000c      	movs	r4, r1
 8003ba4:	0025      	movs	r5, r4
 8003ba6:	001c      	movs	r4, r3
 8003ba8:	1dbb      	adds	r3, r7, #6
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f7ff f893 	bl	8002cd8 <__aeabi_i2d>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	000b      	movs	r3, r1
 8003bb6:	0020      	movs	r0, r4
 8003bb8:	0029      	movs	r1, r5
 8003bba:	f7fe fa9d 	bl	80020f8 <__aeabi_dmul>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	000c      	movs	r4, r1
 8003bc2:	0025      	movs	r5, r4
 8003bc4:	001c      	movs	r4, r3
 8003bc6:	1cbb      	adds	r3, r7, #2
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f7ff f884 	bl	8002cd8 <__aeabi_i2d>
 8003bd0:	0002      	movs	r2, r0
 8003bd2:	000b      	movs	r3, r1
 8003bd4:	0020      	movs	r0, r4
 8003bd6:	0029      	movs	r1, r5
 8003bd8:	f7fd ff8c 	bl	8001af4 <__aeabi_ddiv>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	000c      	movs	r4, r1
 8003be0:	0018      	movs	r0, r3
 8003be2:	0021      	movs	r1, r4
 8003be4:	4a39      	ldr	r2, [pc, #228]	; (8003ccc <TBW+0x170>)
 8003be6:	4b3a      	ldr	r3, [pc, #232]	; (8003cd0 <TBW+0x174>)
 8003be8:	f7fd fc68 	bl	80014bc <__aeabi_dadd>
 8003bec:	0003      	movs	r3, r0
 8003bee:	000c      	movs	r4, r1
 8003bf0:	0025      	movs	r5, r4
 8003bf2:	001c      	movs	r4, r3
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7ff f86d 	bl	8002cd8 <__aeabi_i2d>
 8003bfe:	4a35      	ldr	r2, [pc, #212]	; (8003cd4 <TBW+0x178>)
 8003c00:	4b35      	ldr	r3, [pc, #212]	; (8003cd8 <TBW+0x17c>)
 8003c02:	f7fe fa79 	bl	80020f8 <__aeabi_dmul>
 8003c06:	0002      	movs	r2, r0
 8003c08:	000b      	movs	r3, r1
 8003c0a:	0020      	movs	r0, r4
 8003c0c:	0029      	movs	r1, r5
 8003c0e:	f7fd fc55 	bl	80014bc <__aeabi_dadd>
 8003c12:	0003      	movs	r3, r0
 8003c14:	000c      	movs	r4, r1
 8003c16:	0018      	movs	r0, r3
 8003c18:	0021      	movs	r1, r4
 8003c1a:	f7ff f8e9 	bl	8002df0 <__aeabi_d2f>
 8003c1e:	1c03      	adds	r3, r0, #0
 8003c20:	60fb      	str	r3, [r7, #12]
		return TBW;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	e04a      	b.n	8003cbc <TBW+0x160>
	}
	else
	{
		TBW = 8.315 + 0.382*height*height/R50 + 0.105*weight;
 8003c26:	1dbb      	adds	r3, r7, #6
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7ff f854 	bl	8002cd8 <__aeabi_i2d>
 8003c30:	4a2a      	ldr	r2, [pc, #168]	; (8003cdc <TBW+0x180>)
 8003c32:	4b2b      	ldr	r3, [pc, #172]	; (8003ce0 <TBW+0x184>)
 8003c34:	f7fe fa60 	bl	80020f8 <__aeabi_dmul>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	000c      	movs	r4, r1
 8003c3c:	0025      	movs	r5, r4
 8003c3e:	001c      	movs	r4, r3
 8003c40:	1dbb      	adds	r3, r7, #6
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	0018      	movs	r0, r3
 8003c46:	f7ff f847 	bl	8002cd8 <__aeabi_i2d>
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	000b      	movs	r3, r1
 8003c4e:	0020      	movs	r0, r4
 8003c50:	0029      	movs	r1, r5
 8003c52:	f7fe fa51 	bl	80020f8 <__aeabi_dmul>
 8003c56:	0003      	movs	r3, r0
 8003c58:	000c      	movs	r4, r1
 8003c5a:	0025      	movs	r5, r4
 8003c5c:	001c      	movs	r4, r3
 8003c5e:	1cbb      	adds	r3, r7, #2
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	0018      	movs	r0, r3
 8003c64:	f7ff f838 	bl	8002cd8 <__aeabi_i2d>
 8003c68:	0002      	movs	r2, r0
 8003c6a:	000b      	movs	r3, r1
 8003c6c:	0020      	movs	r0, r4
 8003c6e:	0029      	movs	r1, r5
 8003c70:	f7fd ff40 	bl	8001af4 <__aeabi_ddiv>
 8003c74:	0003      	movs	r3, r0
 8003c76:	000c      	movs	r4, r1
 8003c78:	0018      	movs	r0, r3
 8003c7a:	0021      	movs	r1, r4
 8003c7c:	4a19      	ldr	r2, [pc, #100]	; (8003ce4 <TBW+0x188>)
 8003c7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <TBW+0x18c>)
 8003c80:	f7fd fc1c 	bl	80014bc <__aeabi_dadd>
 8003c84:	0003      	movs	r3, r0
 8003c86:	000c      	movs	r4, r1
 8003c88:	0025      	movs	r5, r4
 8003c8a:	001c      	movs	r4, r3
 8003c8c:	1d3b      	adds	r3, r7, #4
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f7ff f821 	bl	8002cd8 <__aeabi_i2d>
 8003c96:	4a13      	ldr	r2, [pc, #76]	; (8003ce4 <TBW+0x188>)
 8003c98:	4b14      	ldr	r3, [pc, #80]	; (8003cec <TBW+0x190>)
 8003c9a:	f7fe fa2d 	bl	80020f8 <__aeabi_dmul>
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	000b      	movs	r3, r1
 8003ca2:	0020      	movs	r0, r4
 8003ca4:	0029      	movs	r1, r5
 8003ca6:	f7fd fc09 	bl	80014bc <__aeabi_dadd>
 8003caa:	0003      	movs	r3, r0
 8003cac:	000c      	movs	r4, r1
 8003cae:	0018      	movs	r0, r3
 8003cb0:	0021      	movs	r1, r4
 8003cb2:	f7ff f89d 	bl	8002df0 <__aeabi_d2f>
 8003cb6:	1c03      	adds	r3, r0, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
		return TBW;
 8003cba:	68fb      	ldr	r3, [r7, #12]
	}
}
 8003cbc:	1c18      	adds	r0, r3, #0
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b004      	add	sp, #16
 8003cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc4:	624dd2f2 	.word	0x624dd2f2
 8003cc8:	3fd95810 	.word	0x3fd95810
 8003ccc:	ba5e353f 	.word	0xba5e353f
 8003cd0:	4020cc49 	.word	0x4020cc49
 8003cd4:	f1a9fbe7 	.word	0xf1a9fbe7
 8003cd8:	3fc24dd2 	.word	0x3fc24dd2
 8003cdc:	20c49ba6 	.word	0x20c49ba6
 8003ce0:	3fd872b0 	.word	0x3fd872b0
 8003ce4:	ae147ae1 	.word	0xae147ae1
 8003ce8:	4020a147 	.word	0x4020a147
 8003cec:	3fbae147 	.word	0x3fbae147

08003cf0 <ECW>:
//Ham Extra Cellular Water
float ECW(uint16_t height,uint16_t weight,uint16_t R50,uint16_t Xc,uint8_t healthy,uint8_t sex)    // 0 la nam, 1 la nu; 1 la khoe, 2 la om
{
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	46c6      	mov	lr, r8
 8003cf4:	b500      	push	{lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	0005      	movs	r5, r0
 8003cfc:	000c      	movs	r4, r1
 8003cfe:	0010      	movs	r0, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	260e      	movs	r6, #14
 8003d04:	19bb      	adds	r3, r7, r6
 8003d06:	1c2a      	adds	r2, r5, #0
 8003d08:	801a      	strh	r2, [r3, #0]
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	1c22      	adds	r2, r4, #0
 8003d10:	801a      	strh	r2, [r3, #0]
 8003d12:	220a      	movs	r2, #10
 8003d14:	18bb      	adds	r3, r7, r2
 8003d16:	1c02      	adds	r2, r0, #0
 8003d18:	801a      	strh	r2, [r3, #0]
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	1c0a      	adds	r2, r1, #0
 8003d20:	801a      	strh	r2, [r3, #0]
	float ECW = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
	ECW = -5.22 + 0.20*height*height/R50 + 0.005*height*height/Xc + 0.08*weight + 1.9*healthy + 1.86*sex;
 8003d26:	19bb      	adds	r3, r7, r6
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7fe ffd4 	bl	8002cd8 <__aeabi_i2d>
 8003d30:	4a59      	ldr	r2, [pc, #356]	; (8003e98 <ECW+0x1a8>)
 8003d32:	4b5a      	ldr	r3, [pc, #360]	; (8003e9c <ECW+0x1ac>)
 8003d34:	f7fe f9e0 	bl	80020f8 <__aeabi_dmul>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	000c      	movs	r4, r1
 8003d3c:	0025      	movs	r5, r4
 8003d3e:	001c      	movs	r4, r3
 8003d40:	19bb      	adds	r3, r7, r6
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f7fe ffc7 	bl	8002cd8 <__aeabi_i2d>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	000b      	movs	r3, r1
 8003d4e:	0020      	movs	r0, r4
 8003d50:	0029      	movs	r1, r5
 8003d52:	f7fe f9d1 	bl	80020f8 <__aeabi_dmul>
 8003d56:	0003      	movs	r3, r0
 8003d58:	000c      	movs	r4, r1
 8003d5a:	0025      	movs	r5, r4
 8003d5c:	001c      	movs	r4, r3
 8003d5e:	220a      	movs	r2, #10
 8003d60:	18bb      	adds	r3, r7, r2
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7fe ffb7 	bl	8002cd8 <__aeabi_i2d>
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	000b      	movs	r3, r1
 8003d6e:	0020      	movs	r0, r4
 8003d70:	0029      	movs	r1, r5
 8003d72:	f7fd febf 	bl	8001af4 <__aeabi_ddiv>
 8003d76:	0003      	movs	r3, r0
 8003d78:	000c      	movs	r4, r1
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	0021      	movs	r1, r4
 8003d7e:	4a48      	ldr	r2, [pc, #288]	; (8003ea0 <ECW+0x1b0>)
 8003d80:	4b48      	ldr	r3, [pc, #288]	; (8003ea4 <ECW+0x1b4>)
 8003d82:	f7fe fc2b 	bl	80025dc <__aeabi_dsub>
 8003d86:	0003      	movs	r3, r0
 8003d88:	000c      	movs	r4, r1
 8003d8a:	0025      	movs	r5, r4
 8003d8c:	001c      	movs	r4, r3
 8003d8e:	19bb      	adds	r3, r7, r6
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7fe ffa0 	bl	8002cd8 <__aeabi_i2d>
 8003d98:	4a43      	ldr	r2, [pc, #268]	; (8003ea8 <ECW+0x1b8>)
 8003d9a:	4b44      	ldr	r3, [pc, #272]	; (8003eac <ECW+0x1bc>)
 8003d9c:	f7fe f9ac 	bl	80020f8 <__aeabi_dmul>
 8003da0:	0002      	movs	r2, r0
 8003da2:	000b      	movs	r3, r1
 8003da4:	603a      	str	r2, [r7, #0]
 8003da6:	607b      	str	r3, [r7, #4]
 8003da8:	19bb      	adds	r3, r7, r6
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7fe ff93 	bl	8002cd8 <__aeabi_i2d>
 8003db2:	0002      	movs	r2, r0
 8003db4:	000b      	movs	r3, r1
 8003db6:	6838      	ldr	r0, [r7, #0]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	f7fe f99d 	bl	80020f8 <__aeabi_dmul>
 8003dbe:	0002      	movs	r2, r0
 8003dc0:	000b      	movs	r3, r1
 8003dc2:	603a      	str	r2, [r7, #0]
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7fe ff83 	bl	8002cd8 <__aeabi_i2d>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	000b      	movs	r3, r1
 8003dd6:	6838      	ldr	r0, [r7, #0]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	f7fd fe8b 	bl	8001af4 <__aeabi_ddiv>
 8003dde:	0002      	movs	r2, r0
 8003de0:	000b      	movs	r3, r1
 8003de2:	0020      	movs	r0, r4
 8003de4:	0029      	movs	r1, r5
 8003de6:	f7fd fb69 	bl	80014bc <__aeabi_dadd>
 8003dea:	0003      	movs	r3, r0
 8003dec:	000c      	movs	r4, r1
 8003dee:	0025      	movs	r5, r4
 8003df0:	001c      	movs	r4, r3
 8003df2:	230c      	movs	r3, #12
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7fe ff6d 	bl	8002cd8 <__aeabi_i2d>
 8003dfe:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <ECW+0x1b8>)
 8003e00:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <ECW+0x1c0>)
 8003e02:	f7fe f979 	bl	80020f8 <__aeabi_dmul>
 8003e06:	0002      	movs	r2, r0
 8003e08:	000b      	movs	r3, r1
 8003e0a:	0020      	movs	r0, r4
 8003e0c:	0029      	movs	r1, r5
 8003e0e:	f7fd fb55 	bl	80014bc <__aeabi_dadd>
 8003e12:	0003      	movs	r3, r0
 8003e14:	000c      	movs	r4, r1
 8003e16:	0025      	movs	r5, r4
 8003e18:	001c      	movs	r4, r3
 8003e1a:	2320      	movs	r3, #32
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	4694      	mov	ip, r2
 8003e20:	2208      	movs	r2, #8
 8003e22:	4690      	mov	r8, r2
 8003e24:	44b8      	add	r8, r7
 8003e26:	44c4      	add	ip, r8
 8003e28:	4463      	add	r3, ip
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7fe ff53 	bl	8002cd8 <__aeabi_i2d>
 8003e32:	4a20      	ldr	r2, [pc, #128]	; (8003eb4 <ECW+0x1c4>)
 8003e34:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <ECW+0x1c8>)
 8003e36:	f7fe f95f 	bl	80020f8 <__aeabi_dmul>
 8003e3a:	0002      	movs	r2, r0
 8003e3c:	000b      	movs	r3, r1
 8003e3e:	0020      	movs	r0, r4
 8003e40:	0029      	movs	r1, r5
 8003e42:	f7fd fb3b 	bl	80014bc <__aeabi_dadd>
 8003e46:	0003      	movs	r3, r0
 8003e48:	000c      	movs	r4, r1
 8003e4a:	0025      	movs	r5, r4
 8003e4c:	001c      	movs	r4, r3
 8003e4e:	2324      	movs	r3, #36	; 0x24
 8003e50:	2208      	movs	r2, #8
 8003e52:	4694      	mov	ip, r2
 8003e54:	2208      	movs	r2, #8
 8003e56:	4690      	mov	r8, r2
 8003e58:	44b8      	add	r8, r7
 8003e5a:	44c4      	add	ip, r8
 8003e5c:	4463      	add	r3, ip
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7fe ff39 	bl	8002cd8 <__aeabi_i2d>
 8003e66:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <ECW+0x1cc>)
 8003e68:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <ECW+0x1d0>)
 8003e6a:	f7fe f945 	bl	80020f8 <__aeabi_dmul>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	000b      	movs	r3, r1
 8003e72:	0020      	movs	r0, r4
 8003e74:	0029      	movs	r1, r5
 8003e76:	f7fd fb21 	bl	80014bc <__aeabi_dadd>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	000c      	movs	r4, r1
 8003e7e:	0018      	movs	r0, r3
 8003e80:	0021      	movs	r1, r4
 8003e82:	f7fe ffb5 	bl	8002df0 <__aeabi_d2f>
 8003e86:	1c03      	adds	r3, r0, #0
 8003e88:	617b      	str	r3, [r7, #20]
	return ECW;
 8003e8a:	697b      	ldr	r3, [r7, #20]
}
 8003e8c:	1c18      	adds	r0, r3, #0
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b006      	add	sp, #24
 8003e92:	bc04      	pop	{r2}
 8003e94:	4690      	mov	r8, r2
 8003e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e98:	9999999a 	.word	0x9999999a
 8003e9c:	3fc99999 	.word	0x3fc99999
 8003ea0:	ae147ae1 	.word	0xae147ae1
 8003ea4:	4014e147 	.word	0x4014e147
 8003ea8:	47ae147b 	.word	0x47ae147b
 8003eac:	3f747ae1 	.word	0x3f747ae1
 8003eb0:	3fb47ae1 	.word	0x3fb47ae1
 8003eb4:	66666666 	.word	0x66666666
 8003eb8:	3ffe6666 	.word	0x3ffe6666
 8003ebc:	5c28f5c3 	.word	0x5c28f5c3
 8003ec0:	3ffdc28f 	.word	0x3ffdc28f

08003ec4 <ICW>:
float ICW(uint32_t TBW,uint32_t ECW)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
	float ICW = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
	ICW = TBW - ECW;
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f7fd faaf 	bl	800143c <__aeabi_ui2f>
 8003ede:	1c03      	adds	r3, r0, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
	return ICW;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
}
 8003ee4:	1c18      	adds	r0, r3, #0
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b004      	add	sp, #16
 8003eea:	bd80      	pop	{r7, pc}

08003eec <BCM>:
// Ham Body Cell Mass
float BCM(uint16_t height,uint16_t weight,uint16_t Xc,uint8_t sex)
{
 8003eec:	b5b0      	push	{r4, r5, r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	0005      	movs	r5, r0
 8003ef4:	000c      	movs	r4, r1
 8003ef6:	0010      	movs	r0, r2
 8003ef8:	0019      	movs	r1, r3
 8003efa:	1dbb      	adds	r3, r7, #6
 8003efc:	1c2a      	adds	r2, r5, #0
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	1c22      	adds	r2, r4, #0
 8003f04:	801a      	strh	r2, [r3, #0]
 8003f06:	1cbb      	adds	r3, r7, #2
 8003f08:	1c02      	adds	r2, r0, #0
 8003f0a:	801a      	strh	r2, [r3, #0]
 8003f0c:	1c7b      	adds	r3, r7, #1
 8003f0e:	1c0a      	adds	r2, r1, #0
 8003f10:	701a      	strb	r2, [r3, #0]
	float BCM = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
	if (sex == 1)
 8003f16:	1c7b      	adds	r3, r7, #1
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d161      	bne.n	8003fe2 <BCM+0xf6>
	{
		BCM = 1/120*((0.76*(59.06*powf(height, 1.6)/powf(Xc,0.5)) + 18.52*weight - 386.66));
 8003f1e:	1dbb      	adds	r3, r7, #6
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7fd fa8a 	bl	800143c <__aeabi_ui2f>
 8003f28:	1c02      	adds	r2, r0, #0
 8003f2a:	4b60      	ldr	r3, [pc, #384]	; (80040ac <BCM+0x1c0>)
 8003f2c:	1c19      	adds	r1, r3, #0
 8003f2e:	1c10      	adds	r0, r2, #0
 8003f30:	f005 fe36 	bl	8009ba0 <powf>
 8003f34:	1c03      	adds	r3, r0, #0
 8003f36:	1c18      	adds	r0, r3, #0
 8003f38:	f7fe ff08 	bl	8002d4c <__aeabi_f2d>
 8003f3c:	4a5c      	ldr	r2, [pc, #368]	; (80040b0 <BCM+0x1c4>)
 8003f3e:	4b5d      	ldr	r3, [pc, #372]	; (80040b4 <BCM+0x1c8>)
 8003f40:	f7fe f8da 	bl	80020f8 <__aeabi_dmul>
 8003f44:	0003      	movs	r3, r0
 8003f46:	000c      	movs	r4, r1
 8003f48:	0025      	movs	r5, r4
 8003f4a:	001c      	movs	r4, r3
 8003f4c:	1cbb      	adds	r3, r7, #2
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7fd fa73 	bl	800143c <__aeabi_ui2f>
 8003f56:	1c02      	adds	r2, r0, #0
 8003f58:	23fc      	movs	r3, #252	; 0xfc
 8003f5a:	059b      	lsls	r3, r3, #22
 8003f5c:	1c19      	adds	r1, r3, #0
 8003f5e:	1c10      	adds	r0, r2, #0
 8003f60:	f005 fe1e 	bl	8009ba0 <powf>
 8003f64:	1c03      	adds	r3, r0, #0
 8003f66:	1c18      	adds	r0, r3, #0
 8003f68:	f7fe fef0 	bl	8002d4c <__aeabi_f2d>
 8003f6c:	0002      	movs	r2, r0
 8003f6e:	000b      	movs	r3, r1
 8003f70:	0020      	movs	r0, r4
 8003f72:	0029      	movs	r1, r5
 8003f74:	f7fd fdbe 	bl	8001af4 <__aeabi_ddiv>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	000c      	movs	r4, r1
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	0021      	movs	r1, r4
 8003f80:	4a4d      	ldr	r2, [pc, #308]	; (80040b8 <BCM+0x1cc>)
 8003f82:	4b4e      	ldr	r3, [pc, #312]	; (80040bc <BCM+0x1d0>)
 8003f84:	f7fe f8b8 	bl	80020f8 <__aeabi_dmul>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	000c      	movs	r4, r1
 8003f8c:	0025      	movs	r5, r4
 8003f8e:	001c      	movs	r4, r3
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7fe fe9f 	bl	8002cd8 <__aeabi_i2d>
 8003f9a:	4a49      	ldr	r2, [pc, #292]	; (80040c0 <BCM+0x1d4>)
 8003f9c:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <BCM+0x1d8>)
 8003f9e:	f7fe f8ab 	bl	80020f8 <__aeabi_dmul>
 8003fa2:	0002      	movs	r2, r0
 8003fa4:	000b      	movs	r3, r1
 8003fa6:	0020      	movs	r0, r4
 8003fa8:	0029      	movs	r1, r5
 8003faa:	f7fd fa87 	bl	80014bc <__aeabi_dadd>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	000c      	movs	r4, r1
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	0021      	movs	r1, r4
 8003fb6:	4a44      	ldr	r2, [pc, #272]	; (80040c8 <BCM+0x1dc>)
 8003fb8:	4b44      	ldr	r3, [pc, #272]	; (80040cc <BCM+0x1e0>)
 8003fba:	f7fe fb0f 	bl	80025dc <__aeabi_dsub>
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	000c      	movs	r4, r1
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	0021      	movs	r1, r4
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f7fe f895 	bl	80020f8 <__aeabi_dmul>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	000c      	movs	r4, r1
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	0021      	movs	r1, r4
 8003fd6:	f7fe ff0b 	bl	8002df0 <__aeabi_d2f>
 8003fda:	1c03      	adds	r3, r0, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
		return BCM;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	e05f      	b.n	80040a2 <BCM+0x1b6>
	}
	else
	{
		BCM = 1/120*((0.96*(1.306*powf(height, 2.07)/powf(Xc,0.36)) + 5.79*weight - 230.51));
 8003fe2:	1dbb      	adds	r3, r7, #6
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f7fd fa28 	bl	800143c <__aeabi_ui2f>
 8003fec:	1c02      	adds	r2, r0, #0
 8003fee:	4b38      	ldr	r3, [pc, #224]	; (80040d0 <BCM+0x1e4>)
 8003ff0:	1c19      	adds	r1, r3, #0
 8003ff2:	1c10      	adds	r0, r2, #0
 8003ff4:	f005 fdd4 	bl	8009ba0 <powf>
 8003ff8:	1c03      	adds	r3, r0, #0
 8003ffa:	1c18      	adds	r0, r3, #0
 8003ffc:	f7fe fea6 	bl	8002d4c <__aeabi_f2d>
 8004000:	4a34      	ldr	r2, [pc, #208]	; (80040d4 <BCM+0x1e8>)
 8004002:	4b35      	ldr	r3, [pc, #212]	; (80040d8 <BCM+0x1ec>)
 8004004:	f7fe f878 	bl	80020f8 <__aeabi_dmul>
 8004008:	0003      	movs	r3, r0
 800400a:	000c      	movs	r4, r1
 800400c:	0025      	movs	r5, r4
 800400e:	001c      	movs	r4, r3
 8004010:	1cbb      	adds	r3, r7, #2
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	0018      	movs	r0, r3
 8004016:	f7fd fa11 	bl	800143c <__aeabi_ui2f>
 800401a:	1c02      	adds	r2, r0, #0
 800401c:	4b2f      	ldr	r3, [pc, #188]	; (80040dc <BCM+0x1f0>)
 800401e:	1c19      	adds	r1, r3, #0
 8004020:	1c10      	adds	r0, r2, #0
 8004022:	f005 fdbd 	bl	8009ba0 <powf>
 8004026:	1c03      	adds	r3, r0, #0
 8004028:	1c18      	adds	r0, r3, #0
 800402a:	f7fe fe8f 	bl	8002d4c <__aeabi_f2d>
 800402e:	0002      	movs	r2, r0
 8004030:	000b      	movs	r3, r1
 8004032:	0020      	movs	r0, r4
 8004034:	0029      	movs	r1, r5
 8004036:	f7fd fd5d 	bl	8001af4 <__aeabi_ddiv>
 800403a:	0003      	movs	r3, r0
 800403c:	000c      	movs	r4, r1
 800403e:	0018      	movs	r0, r3
 8004040:	0021      	movs	r1, r4
 8004042:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <BCM+0x1f4>)
 8004044:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <BCM+0x1f8>)
 8004046:	f7fe f857 	bl	80020f8 <__aeabi_dmul>
 800404a:	0003      	movs	r3, r0
 800404c:	000c      	movs	r4, r1
 800404e:	0025      	movs	r5, r4
 8004050:	001c      	movs	r4, r3
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	0018      	movs	r0, r3
 8004058:	f7fe fe3e 	bl	8002cd8 <__aeabi_i2d>
 800405c:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <BCM+0x1fc>)
 800405e:	4b23      	ldr	r3, [pc, #140]	; (80040ec <BCM+0x200>)
 8004060:	f7fe f84a 	bl	80020f8 <__aeabi_dmul>
 8004064:	0002      	movs	r2, r0
 8004066:	000b      	movs	r3, r1
 8004068:	0020      	movs	r0, r4
 800406a:	0029      	movs	r1, r5
 800406c:	f7fd fa26 	bl	80014bc <__aeabi_dadd>
 8004070:	0003      	movs	r3, r0
 8004072:	000c      	movs	r4, r1
 8004074:	0018      	movs	r0, r3
 8004076:	0021      	movs	r1, r4
 8004078:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <BCM+0x1f4>)
 800407a:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <BCM+0x204>)
 800407c:	f7fe faae 	bl	80025dc <__aeabi_dsub>
 8004080:	0003      	movs	r3, r0
 8004082:	000c      	movs	r4, r1
 8004084:	0018      	movs	r0, r3
 8004086:	0021      	movs	r1, r4
 8004088:	2200      	movs	r2, #0
 800408a:	2300      	movs	r3, #0
 800408c:	f7fe f834 	bl	80020f8 <__aeabi_dmul>
 8004090:	0003      	movs	r3, r0
 8004092:	000c      	movs	r4, r1
 8004094:	0018      	movs	r0, r3
 8004096:	0021      	movs	r1, r4
 8004098:	f7fe feaa 	bl	8002df0 <__aeabi_d2f>
 800409c:	1c03      	adds	r3, r0, #0
 800409e:	60fb      	str	r3, [r7, #12]
		return BCM;
 80040a0:	68fb      	ldr	r3, [r7, #12]
	}
}
 80040a2:	1c18      	adds	r0, r3, #0
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b004      	add	sp, #16
 80040a8:	bdb0      	pop	{r4, r5, r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	3fcccccd 	.word	0x3fcccccd
 80040b0:	147ae148 	.word	0x147ae148
 80040b4:	404d87ae 	.word	0x404d87ae
 80040b8:	851eb852 	.word	0x851eb852
 80040bc:	3fe851eb 	.word	0x3fe851eb
 80040c0:	b851eb85 	.word	0xb851eb85
 80040c4:	4032851e 	.word	0x4032851e
 80040c8:	5c28f5c3 	.word	0x5c28f5c3
 80040cc:	40782a8f 	.word	0x40782a8f
 80040d0:	40047ae1 	.word	0x40047ae1
 80040d4:	4189374c 	.word	0x4189374c
 80040d8:	3ff4e560 	.word	0x3ff4e560
 80040dc:	3eb851ec 	.word	0x3eb851ec
 80040e0:	eb851eb8 	.word	0xeb851eb8
 80040e4:	3feeb851 	.word	0x3feeb851
 80040e8:	c28f5c29 	.word	0xc28f5c29
 80040ec:	401728f5 	.word	0x401728f5
 80040f0:	406cd051 	.word	0x406cd051

080040f4 <HAL_ADC_ConvCpltCallback>:
//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	__NOP();
 80040fc:	46c0      	nop			; (mov r8, r8)
}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	46bd      	mov	sp, r7
 8004102:	b002      	add	sp, #8
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <readADC>:
//
void readADC(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 800410e:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <readADC+0x98>)
 8004110:	0018      	movs	r0, r3
 8004112:	f001 fef1 	bl	8005ef8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, value, 2);
 8004116:	4923      	ldr	r1, [pc, #140]	; (80041a4 <readADC+0x9c>)
 8004118:	4b21      	ldr	r3, [pc, #132]	; (80041a0 <readADC+0x98>)
 800411a:	2202      	movs	r2, #2
 800411c:	0018      	movs	r0, r3
 800411e:	f001 f945 	bl	80053ac <HAL_ADC_Start_DMA>
	for (uint8_t i = 0; i < 30; i++)
 8004122:	1dfb      	adds	r3, r7, #7
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
 8004128:	e019      	b.n	800415e <readADC+0x56>
	{
		HAL_Delay(100);
 800412a:	2064      	movs	r0, #100	; 0x64
 800412c:	f000 fd9a 	bl	8004c64 <HAL_Delay>
		sumofMAG = sumofMAG + value[1];
 8004130:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <readADC+0x9c>)
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <readADC+0xa0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	18d2      	adds	r2, r2, r3
 800413a:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <readADC+0xa0>)
 800413c:	601a      	str	r2, [r3, #0]
		sumofPHS = sumofPHS + value[0];
 800413e:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <readADC+0x9c>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <readADC+0xa4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	18d2      	adds	r2, r2, r3
 8004148:	4b18      	ldr	r3, [pc, #96]	; (80041ac <readADC+0xa4>)
 800414a:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 800414c:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <readADC+0x98>)
 800414e:	0018      	movs	r0, r3
 8004150:	f001 f8de 	bl	8005310 <HAL_ADC_Start>
	for (uint8_t i = 0; i < 30; i++)
 8004154:	1dfb      	adds	r3, r7, #7
 8004156:	781a      	ldrb	r2, [r3, #0]
 8004158:	1dfb      	adds	r3, r7, #7
 800415a:	3201      	adds	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	1dfb      	adds	r3, r7, #7
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b1d      	cmp	r3, #29
 8004164:	d9e1      	bls.n	800412a <readADC+0x22>
	}
	HAL_ADC_Stop_DMA(&hadc1);
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <readADC+0x98>)
 8004168:	0018      	movs	r0, r3
 800416a:	f001 f9ad 	bl	80054c8 <HAL_ADC_Stop_DMA>
	sumofMAG1 = sumofMAG/30;
 800416e:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <readADC+0xa0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	211e      	movs	r1, #30
 8004174:	0018      	movs	r0, r3
 8004176:	f7fb ffcf 	bl	8000118 <__udivsi3>
 800417a:	0003      	movs	r3, r0
 800417c:	001a      	movs	r2, r3
 800417e:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <readADC+0xa8>)
 8004180:	601a      	str	r2, [r3, #0]
	sumofPHS1 = sumofPHS/30;
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <readADC+0xa4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	211e      	movs	r1, #30
 8004188:	0018      	movs	r0, r3
 800418a:	f7fb ffc5 	bl	8000118 <__udivsi3>
 800418e:	0003      	movs	r3, r0
 8004190:	001a      	movs	r2, r3
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <readADC+0xac>)
 8004194:	601a      	str	r2, [r3, #0]
}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b002      	add	sp, #8
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	20000194 	.word	0x20000194
 80041a4:	20000434 	.word	0x20000434
 80041a8:	2000009c 	.word	0x2000009c
 80041ac:	200000a0 	.word	0x200000a0
 80041b0:	200000a4 	.word	0x200000a4
 80041b4:	200000a8 	.word	0x200000a8

080041b8 <convertADC>:
//

//
void convertADC(void)
{
 80041b8:	b5b0      	push	{r4, r5, r7, lr}
 80041ba:	af00      	add	r7, sp, #0
	voltMAG = sumofMAG1*3300/4095;
 80041bc:	4b59      	ldr	r3, [pc, #356]	; (8004324 <convertADC+0x16c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a59      	ldr	r2, [pc, #356]	; (8004328 <convertADC+0x170>)
 80041c2:	4353      	muls	r3, r2
 80041c4:	4959      	ldr	r1, [pc, #356]	; (800432c <convertADC+0x174>)
 80041c6:	0018      	movs	r0, r3
 80041c8:	f7fb ffa6 	bl	8000118 <__udivsi3>
 80041cc:	0003      	movs	r3, r0
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	4b57      	ldr	r3, [pc, #348]	; (8004330 <convertADC+0x178>)
 80041d2:	801a      	strh	r2, [r3, #0]
	voltPHS = sumofPHS1*3300/4095;
 80041d4:	4b57      	ldr	r3, [pc, #348]	; (8004334 <convertADC+0x17c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a53      	ldr	r2, [pc, #332]	; (8004328 <convertADC+0x170>)
 80041da:	4353      	muls	r3, r2
 80041dc:	4953      	ldr	r1, [pc, #332]	; (800432c <convertADC+0x174>)
 80041de:	0018      	movs	r0, r3
 80041e0:	f7fb ff9a 	bl	8000118 <__udivsi3>
 80041e4:	0003      	movs	r3, r0
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	4b53      	ldr	r3, [pc, #332]	; (8004338 <convertADC+0x180>)
 80041ea:	801a      	strh	r2, [r3, #0]
	voltPHS = voltPHS - 50;
 80041ec:	4b52      	ldr	r3, [pc, #328]	; (8004338 <convertADC+0x180>)
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	3b32      	subs	r3, #50	; 0x32
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	4b50      	ldr	r3, [pc, #320]	; (8004338 <convertADC+0x180>)
 80041f6:	801a      	strh	r2, [r3, #0]

	MAG = 510*powf(10.0, ((float)(voltMAG-900))/600);
 80041f8:	4b4d      	ldr	r3, [pc, #308]	; (8004330 <convertADC+0x178>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	4a4f      	ldr	r2, [pc, #316]	; (800433c <convertADC+0x184>)
 80041fe:	4694      	mov	ip, r2
 8004200:	4463      	add	r3, ip
 8004202:	0018      	movs	r0, r3
 8004204:	f7fd f8d0 	bl	80013a8 <__aeabi_i2f>
 8004208:	1c03      	adds	r3, r0, #0
 800420a:	494d      	ldr	r1, [pc, #308]	; (8004340 <convertADC+0x188>)
 800420c:	1c18      	adds	r0, r3, #0
 800420e:	f7fc fbc7 	bl	80009a0 <__aeabi_fdiv>
 8004212:	1c03      	adds	r3, r0, #0
 8004214:	1c1a      	adds	r2, r3, #0
 8004216:	4b4b      	ldr	r3, [pc, #300]	; (8004344 <convertADC+0x18c>)
 8004218:	1c11      	adds	r1, r2, #0
 800421a:	1c18      	adds	r0, r3, #0
 800421c:	f005 fcc0 	bl	8009ba0 <powf>
 8004220:	1c03      	adds	r3, r0, #0
 8004222:	4949      	ldr	r1, [pc, #292]	; (8004348 <convertADC+0x190>)
 8004224:	1c18      	adds	r0, r3, #0
 8004226:	f7fc fd93 	bl	8000d50 <__aeabi_fmul>
 800422a:	1c03      	adds	r3, r0, #0
 800422c:	1c18      	adds	r0, r3, #0
 800422e:	f7fc f943 	bl	80004b8 <__aeabi_f2uiz>
 8004232:	0003      	movs	r3, r0
 8004234:	b29a      	uxth	r2, r3
 8004236:	4b45      	ldr	r3, [pc, #276]	; (800434c <convertADC+0x194>)
 8004238:	801a      	strh	r2, [r3, #0]
	PHS = -((900 - voltPHS)/10+90);
 800423a:	4b3f      	ldr	r3, [pc, #252]	; (8004338 <convertADC+0x180>)
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	001a      	movs	r2, r3
 8004240:	23e1      	movs	r3, #225	; 0xe1
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	1a9a      	subs	r2, r3, r2
 8004246:	230a      	movs	r3, #10
 8004248:	4259      	negs	r1, r3
 800424a:	0010      	movs	r0, r2
 800424c:	f7fb ffee 	bl	800022c <__divsi3>
 8004250:	0003      	movs	r3, r0
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b5a      	subs	r3, #90	; 0x5a
 8004256:	b29b      	uxth	r3, r3
 8004258:	b21a      	sxth	r2, r3
 800425a:	4b3d      	ldr	r3, [pc, #244]	; (8004350 <convertADC+0x198>)
 800425c:	801a      	strh	r2, [r3, #0]

	R50 =  MAG* cosf(PHS*M_PI/180);
 800425e:	4b3b      	ldr	r3, [pc, #236]	; (800434c <convertADC+0x194>)
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	0018      	movs	r0, r3
 8004264:	f7fd f8a0 	bl	80013a8 <__aeabi_i2f>
 8004268:	1c05      	adds	r5, r0, #0
 800426a:	4b39      	ldr	r3, [pc, #228]	; (8004350 <convertADC+0x198>)
 800426c:	2200      	movs	r2, #0
 800426e:	5e9b      	ldrsh	r3, [r3, r2]
 8004270:	0018      	movs	r0, r3
 8004272:	f7fe fd31 	bl	8002cd8 <__aeabi_i2d>
 8004276:	4a37      	ldr	r2, [pc, #220]	; (8004354 <convertADC+0x19c>)
 8004278:	4b37      	ldr	r3, [pc, #220]	; (8004358 <convertADC+0x1a0>)
 800427a:	f7fd ff3d 	bl	80020f8 <__aeabi_dmul>
 800427e:	0003      	movs	r3, r0
 8004280:	000c      	movs	r4, r1
 8004282:	0018      	movs	r0, r3
 8004284:	0021      	movs	r1, r4
 8004286:	2200      	movs	r2, #0
 8004288:	4b34      	ldr	r3, [pc, #208]	; (800435c <convertADC+0x1a4>)
 800428a:	f7fd fc33 	bl	8001af4 <__aeabi_ddiv>
 800428e:	0003      	movs	r3, r0
 8004290:	000c      	movs	r4, r1
 8004292:	0018      	movs	r0, r3
 8004294:	0021      	movs	r1, r4
 8004296:	f7fe fdab 	bl	8002df0 <__aeabi_d2f>
 800429a:	1c03      	adds	r3, r0, #0
 800429c:	1c18      	adds	r0, r3, #0
 800429e:	f005 fc11 	bl	8009ac4 <cosf>
 80042a2:	1c03      	adds	r3, r0, #0
 80042a4:	1c19      	adds	r1, r3, #0
 80042a6:	1c28      	adds	r0, r5, #0
 80042a8:	f7fc fd52 	bl	8000d50 <__aeabi_fmul>
 80042ac:	1c03      	adds	r3, r0, #0
 80042ae:	1c18      	adds	r0, r3, #0
 80042b0:	f7fc f902 	bl	80004b8 <__aeabi_f2uiz>
 80042b4:	0002      	movs	r2, r0
 80042b6:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <convertADC+0x1a8>)
 80042b8:	601a      	str	r2, [r3, #0]
	Xc =   MAG* sinf(abs(PHS)*M_PI/180);
 80042ba:	4b24      	ldr	r3, [pc, #144]	; (800434c <convertADC+0x194>)
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	0018      	movs	r0, r3
 80042c0:	f7fd f872 	bl	80013a8 <__aeabi_i2f>
 80042c4:	1c05      	adds	r5, r0, #0
 80042c6:	4b22      	ldr	r3, [pc, #136]	; (8004350 <convertADC+0x198>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	5e9b      	ldrsh	r3, [r3, r2]
 80042cc:	17da      	asrs	r2, r3, #31
 80042ce:	189b      	adds	r3, r3, r2
 80042d0:	4053      	eors	r3, r2
 80042d2:	0018      	movs	r0, r3
 80042d4:	f7fe fd00 	bl	8002cd8 <__aeabi_i2d>
 80042d8:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <convertADC+0x19c>)
 80042da:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <convertADC+0x1a0>)
 80042dc:	f7fd ff0c 	bl	80020f8 <__aeabi_dmul>
 80042e0:	0003      	movs	r3, r0
 80042e2:	000c      	movs	r4, r1
 80042e4:	0018      	movs	r0, r3
 80042e6:	0021      	movs	r1, r4
 80042e8:	2200      	movs	r2, #0
 80042ea:	4b1c      	ldr	r3, [pc, #112]	; (800435c <convertADC+0x1a4>)
 80042ec:	f7fd fc02 	bl	8001af4 <__aeabi_ddiv>
 80042f0:	0003      	movs	r3, r0
 80042f2:	000c      	movs	r4, r1
 80042f4:	0018      	movs	r0, r3
 80042f6:	0021      	movs	r1, r4
 80042f8:	f7fe fd7a 	bl	8002df0 <__aeabi_d2f>
 80042fc:	1c03      	adds	r3, r0, #0
 80042fe:	1c18      	adds	r0, r3, #0
 8004300:	f005 fc16 	bl	8009b30 <sinf>
 8004304:	1c03      	adds	r3, r0, #0
 8004306:	1c19      	adds	r1, r3, #0
 8004308:	1c28      	adds	r0, r5, #0
 800430a:	f7fc fd21 	bl	8000d50 <__aeabi_fmul>
 800430e:	1c03      	adds	r3, r0, #0
 8004310:	1c18      	adds	r0, r3, #0
 8004312:	f7fc f8d1 	bl	80004b8 <__aeabi_f2uiz>
 8004316:	0002      	movs	r2, r0
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <convertADC+0x1ac>)
 800431a:	601a      	str	r2, [r3, #0]
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	bdb0      	pop	{r4, r5, r7, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	200000a4 	.word	0x200000a4
 8004328:	00000ce4 	.word	0x00000ce4
 800432c:	00000fff 	.word	0x00000fff
 8004330:	200000ac 	.word	0x200000ac
 8004334:	200000a8 	.word	0x200000a8
 8004338:	200000ae 	.word	0x200000ae
 800433c:	fffffc7c 	.word	0xfffffc7c
 8004340:	44160000 	.word	0x44160000
 8004344:	41200000 	.word	0x41200000
 8004348:	43ff0000 	.word	0x43ff0000
 800434c:	200000b0 	.word	0x200000b0
 8004350:	200000b2 	.word	0x200000b2
 8004354:	54442d18 	.word	0x54442d18
 8004358:	400921fb 	.word	0x400921fb
 800435c:	40668000 	.word	0x40668000
 8004360:	200000b4 	.word	0x200000b4
 8004364:	200000b8 	.word	0x200000b8

08004368 <calculation>:
//
void calculation(void)
{
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b083      	sub	sp, #12
 800436c:	af02      	add	r7, sp, #8
	xFFM = FFMfFunction(ChieuCao, CanNang, R50, Xc, GioiTinh);
 800436e:	4b4e      	ldr	r3, [pc, #312]	; (80044a8 <calculation+0x140>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	b298      	uxth	r0, r3
 8004374:	4b4d      	ldr	r3, [pc, #308]	; (80044ac <calculation+0x144>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	b299      	uxth	r1, r3
 800437a:	4b4d      	ldr	r3, [pc, #308]	; (80044b0 <calculation+0x148>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	b29a      	uxth	r2, r3
 8004380:	4b4c      	ldr	r3, [pc, #304]	; (80044b4 <calculation+0x14c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	b29c      	uxth	r4, r3
 8004386:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <calculation+0x150>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	0023      	movs	r3, r4
 800438e:	f7ff fb2f 	bl	80039f0 <FFMfFunction>
 8004392:	1c03      	adds	r3, r0, #0
 8004394:	1c18      	adds	r0, r3, #0
 8004396:	f7fc f88f 	bl	80004b8 <__aeabi_f2uiz>
 800439a:	0002      	movs	r2, r0
 800439c:	4b47      	ldr	r3, [pc, #284]	; (80044bc <calculation+0x154>)
 800439e:	601a      	str	r2, [r3, #0]
	xFM = FM(CanNang, xFFM);
 80043a0:	4b42      	ldr	r3, [pc, #264]	; (80044ac <calculation+0x144>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	4b45      	ldr	r3, [pc, #276]	; (80044bc <calculation+0x154>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	0019      	movs	r1, r3
 80043ac:	0010      	movs	r0, r2
 80043ae:	f7ff fbbd 	bl	8003b2c <FM>
 80043b2:	1c03      	adds	r3, r0, #0
 80043b4:	1c18      	adds	r0, r3, #0
 80043b6:	f7fc f87f 	bl	80004b8 <__aeabi_f2uiz>
 80043ba:	0002      	movs	r2, r0
 80043bc:	4b40      	ldr	r3, [pc, #256]	; (80044c0 <calculation+0x158>)
 80043be:	601a      	str	r2, [r3, #0]
	xTBW = TBW(ChieuCao, CanNang, R50, GioiTinh);
 80043c0:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <calculation+0x140>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	b298      	uxth	r0, r3
 80043c6:	4b39      	ldr	r3, [pc, #228]	; (80044ac <calculation+0x144>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	b299      	uxth	r1, r3
 80043cc:	4b38      	ldr	r3, [pc, #224]	; (80044b0 <calculation+0x148>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <calculation+0x150>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	f7ff fbc1 	bl	8003b5c <TBW>
 80043da:	1c03      	adds	r3, r0, #0
 80043dc:	1c18      	adds	r0, r3, #0
 80043de:	f7fc f86b 	bl	80004b8 <__aeabi_f2uiz>
 80043e2:	0002      	movs	r2, r0
 80043e4:	4b37      	ldr	r3, [pc, #220]	; (80044c4 <calculation+0x15c>)
 80043e6:	601a      	str	r2, [r3, #0]
	if (GioiTinh == 1)
 80043e8:	4b33      	ldr	r3, [pc, #204]	; (80044b8 <calculation+0x150>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d11a      	bne.n	8004426 <calculation+0xbe>
	{
		xECW = ECW(ChieuCao, CanNang, R50, Xc, 1, 0);
 80043f0:	4b2d      	ldr	r3, [pc, #180]	; (80044a8 <calculation+0x140>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	b298      	uxth	r0, r3
 80043f6:	4b2d      	ldr	r3, [pc, #180]	; (80044ac <calculation+0x144>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	b299      	uxth	r1, r3
 80043fc:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <calculation+0x148>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	b29a      	uxth	r2, r3
 8004402:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <calculation+0x14c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	b29c      	uxth	r4, r3
 8004408:	2300      	movs	r3, #0
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	2301      	movs	r3, #1
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	0023      	movs	r3, r4
 8004412:	f7ff fc6d 	bl	8003cf0 <ECW>
 8004416:	1c03      	adds	r3, r0, #0
 8004418:	1c18      	adds	r0, r3, #0
 800441a:	f7fc f84d 	bl	80004b8 <__aeabi_f2uiz>
 800441e:	0002      	movs	r2, r0
 8004420:	4b29      	ldr	r3, [pc, #164]	; (80044c8 <calculation+0x160>)
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e019      	b.n	800445a <calculation+0xf2>
	}
	else
	{
		xECW = ECW(ChieuCao, CanNang, R50, Xc, 1, 1);
 8004426:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <calculation+0x140>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	b298      	uxth	r0, r3
 800442c:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <calculation+0x144>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	b299      	uxth	r1, r3
 8004432:	4b1f      	ldr	r3, [pc, #124]	; (80044b0 <calculation+0x148>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	b29a      	uxth	r2, r3
 8004438:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <calculation+0x14c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	b29c      	uxth	r4, r3
 800443e:	2301      	movs	r3, #1
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	2301      	movs	r3, #1
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	0023      	movs	r3, r4
 8004448:	f7ff fc52 	bl	8003cf0 <ECW>
 800444c:	1c03      	adds	r3, r0, #0
 800444e:	1c18      	adds	r0, r3, #0
 8004450:	f7fc f832 	bl	80004b8 <__aeabi_f2uiz>
 8004454:	0002      	movs	r2, r0
 8004456:	4b1c      	ldr	r3, [pc, #112]	; (80044c8 <calculation+0x160>)
 8004458:	601a      	str	r2, [r3, #0]
	}
	xICW = ICW(xTBW, xECW);
 800445a:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <calculation+0x15c>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <calculation+0x160>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0019      	movs	r1, r3
 8004464:	0010      	movs	r0, r2
 8004466:	f7ff fd2d 	bl	8003ec4 <ICW>
 800446a:	1c03      	adds	r3, r0, #0
 800446c:	1c18      	adds	r0, r3, #0
 800446e:	f7fc f823 	bl	80004b8 <__aeabi_f2uiz>
 8004472:	0002      	movs	r2, r0
 8004474:	4b15      	ldr	r3, [pc, #84]	; (80044cc <calculation+0x164>)
 8004476:	601a      	str	r2, [r3, #0]
	xBCM = BCM(ChieuCao, CanNang, Xc, GioiTinh);
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <calculation+0x140>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	b298      	uxth	r0, r3
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <calculation+0x144>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	b299      	uxth	r1, r3
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <calculation+0x14c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	b29a      	uxth	r2, r3
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <calculation+0x150>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	f7ff fd2d 	bl	8003eec <BCM>
 8004492:	1c03      	adds	r3, r0, #0
 8004494:	1c18      	adds	r0, r3, #0
 8004496:	f7fc f80f 	bl	80004b8 <__aeabi_f2uiz>
 800449a:	0002      	movs	r2, r0
 800449c:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <calculation+0x168>)
 800449e:	601a      	str	r2, [r3, #0]
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b001      	add	sp, #4
 80044a6:	bd90      	pop	{r4, r7, pc}
 80044a8:	20000398 	.word	0x20000398
 80044ac:	20000428 	.word	0x20000428
 80044b0:	200000b4 	.word	0x200000b4
 80044b4:	200000b8 	.word	0x200000b8
 80044b8:	20000399 	.word	0x20000399
 80044bc:	200000bc 	.word	0x200000bc
 80044c0:	200000c0 	.word	0x200000c0
 80044c4:	200000c4 	.word	0x200000c4
 80044c8:	200000c8 	.word	0x200000c8
 80044cc:	200000cc 	.word	0x200000cc
 80044d0:	200000d0 	.word	0x200000d0

080044d4 <display>:
//
void display(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
	uint8_t number1 = 49;
 80044da:	1dfb      	adds	r3, r7, #7
 80044dc:	2231      	movs	r2, #49	; 0x31
 80044de:	701a      	strb	r2, [r3, #0]
	uint8_t number2 = 50;
 80044e0:	1dbb      	adds	r3, r7, #6
 80044e2:	2232      	movs	r2, #50	; 0x32
 80044e4:	701a      	strb	r2, [r3, #0]
	uint8_t number3 = 51;
 80044e6:	1d7b      	adds	r3, r7, #5
 80044e8:	2233      	movs	r2, #51	; 0x33
 80044ea:	701a      	strb	r2, [r3, #0]
	uint8_t number4 = 52;
 80044ec:	1d3b      	adds	r3, r7, #4
 80044ee:	2234      	movs	r2, #52	; 0x34
 80044f0:	701a      	strb	r2, [r3, #0]
	uint8_t number5 = 53;
 80044f2:	1cfb      	adds	r3, r7, #3
 80044f4:	2235      	movs	r2, #53	; 0x35
 80044f6:	701a      	strb	r2, [r3, #0]
	uint8_t number6 = 54;
 80044f8:	1cbb      	adds	r3, r7, #2
 80044fa:	2236      	movs	r2, #54	; 0x36
 80044fc:	701a      	strb	r2, [r3, #0]
	uint8_t number7 = 55;
 80044fe:	1c7b      	adds	r3, r7, #1
 8004500:	2237      	movs	r2, #55	; 0x37
 8004502:	701a      	strb	r2, [r3, #0]
	uint8_t number8 = 56;
 8004504:	003b      	movs	r3, r7
 8004506:	2238      	movs	r2, #56	; 0x38
 8004508:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, &number1, 1, 1);
 800450a:	1df9      	adds	r1, r7, #7
 800450c:	4831      	ldr	r0, [pc, #196]	; (80045d4 <display+0x100>)
 800450e:	2301      	movs	r3, #1
 8004510:	2201      	movs	r2, #1
 8004512:	f003 fa97 	bl	8007a44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) &xFFM, 4, 10);
 8004516:	4930      	ldr	r1, [pc, #192]	; (80045d8 <display+0x104>)
 8004518:	482e      	ldr	r0, [pc, #184]	; (80045d4 <display+0x100>)
 800451a:	230a      	movs	r3, #10
 800451c:	2204      	movs	r2, #4
 800451e:	f003 fa91 	bl	8007a44 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, &number2, 1, 1);
 8004522:	1db9      	adds	r1, r7, #6
 8004524:	482b      	ldr	r0, [pc, #172]	; (80045d4 <display+0x100>)
 8004526:	2301      	movs	r3, #1
 8004528:	2201      	movs	r2, #1
 800452a:	f003 fa8b 	bl	8007a44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) &xFM, 4, 10);
 800452e:	492b      	ldr	r1, [pc, #172]	; (80045dc <display+0x108>)
 8004530:	4828      	ldr	r0, [pc, #160]	; (80045d4 <display+0x100>)
 8004532:	230a      	movs	r3, #10
 8004534:	2204      	movs	r2, #4
 8004536:	f003 fa85 	bl	8007a44 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, &number3, 1, 1);
 800453a:	1d79      	adds	r1, r7, #5
 800453c:	4825      	ldr	r0, [pc, #148]	; (80045d4 <display+0x100>)
 800453e:	2301      	movs	r3, #1
 8004540:	2201      	movs	r2, #1
 8004542:	f003 fa7f 	bl	8007a44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) &xTBW, 4, 10);
 8004546:	4926      	ldr	r1, [pc, #152]	; (80045e0 <display+0x10c>)
 8004548:	4822      	ldr	r0, [pc, #136]	; (80045d4 <display+0x100>)
 800454a:	230a      	movs	r3, #10
 800454c:	2204      	movs	r2, #4
 800454e:	f003 fa79 	bl	8007a44 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, &number4, 1, 1);
 8004552:	1d39      	adds	r1, r7, #4
 8004554:	481f      	ldr	r0, [pc, #124]	; (80045d4 <display+0x100>)
 8004556:	2301      	movs	r3, #1
 8004558:	2201      	movs	r2, #1
 800455a:	f003 fa73 	bl	8007a44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) &xECW, 4, 10);
 800455e:	4921      	ldr	r1, [pc, #132]	; (80045e4 <display+0x110>)
 8004560:	481c      	ldr	r0, [pc, #112]	; (80045d4 <display+0x100>)
 8004562:	230a      	movs	r3, #10
 8004564:	2204      	movs	r2, #4
 8004566:	f003 fa6d 	bl	8007a44 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, &number5, 1, 1);
 800456a:	1cf9      	adds	r1, r7, #3
 800456c:	4819      	ldr	r0, [pc, #100]	; (80045d4 <display+0x100>)
 800456e:	2301      	movs	r3, #1
 8004570:	2201      	movs	r2, #1
 8004572:	f003 fa67 	bl	8007a44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) &xICW, 4, 10);
 8004576:	491c      	ldr	r1, [pc, #112]	; (80045e8 <display+0x114>)
 8004578:	4816      	ldr	r0, [pc, #88]	; (80045d4 <display+0x100>)
 800457a:	230a      	movs	r3, #10
 800457c:	2204      	movs	r2, #4
 800457e:	f003 fa61 	bl	8007a44 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, &number6, 1, 1);
 8004582:	1cb9      	adds	r1, r7, #2
 8004584:	4813      	ldr	r0, [pc, #76]	; (80045d4 <display+0x100>)
 8004586:	2301      	movs	r3, #1
 8004588:	2201      	movs	r2, #1
 800458a:	f003 fa5b 	bl	8007a44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) &xBCM, 4, 10);
 800458e:	4917      	ldr	r1, [pc, #92]	; (80045ec <display+0x118>)
 8004590:	4810      	ldr	r0, [pc, #64]	; (80045d4 <display+0x100>)
 8004592:	230a      	movs	r3, #10
 8004594:	2204      	movs	r2, #4
 8004596:	f003 fa55 	bl	8007a44 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, &number7, 1, 1);
 800459a:	1c79      	adds	r1, r7, #1
 800459c:	480d      	ldr	r0, [pc, #52]	; (80045d4 <display+0x100>)
 800459e:	2301      	movs	r3, #1
 80045a0:	2201      	movs	r2, #1
 80045a2:	f003 fa4f 	bl	8007a44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) &R50, 4, 10);
 80045a6:	4912      	ldr	r1, [pc, #72]	; (80045f0 <display+0x11c>)
 80045a8:	480a      	ldr	r0, [pc, #40]	; (80045d4 <display+0x100>)
 80045aa:	230a      	movs	r3, #10
 80045ac:	2204      	movs	r2, #4
 80045ae:	f003 fa49 	bl	8007a44 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, &number8, 1, 1);
 80045b2:	0039      	movs	r1, r7
 80045b4:	4807      	ldr	r0, [pc, #28]	; (80045d4 <display+0x100>)
 80045b6:	2301      	movs	r3, #1
 80045b8:	2201      	movs	r2, #1
 80045ba:	f003 fa43 	bl	8007a44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) &Xc, 4, 10);
 80045be:	490d      	ldr	r1, [pc, #52]	; (80045f4 <display+0x120>)
 80045c0:	4804      	ldr	r0, [pc, #16]	; (80045d4 <display+0x100>)
 80045c2:	230a      	movs	r3, #10
 80045c4:	2204      	movs	r2, #4
 80045c6:	f003 fa3d 	bl	8007a44 <HAL_UART_Transmit>
}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b002      	add	sp, #8
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	200002b0 	.word	0x200002b0
 80045d8:	200000bc 	.word	0x200000bc
 80045dc:	200000c0 	.word	0x200000c0
 80045e0:	200000c4 	.word	0x200000c4
 80045e4:	200000c8 	.word	0x200000c8
 80045e8:	200000cc 	.word	0x200000cc
 80045ec:	200000d0 	.word	0x200000d0
 80045f0:	200000b4 	.word	0x200000b4
 80045f4:	200000b8 	.word	0x200000b8

080045f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80045fc:	46c0      	nop			; (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 800460c:	4b04      	ldr	r3, [pc, #16]	; (8004620 <LL_SYSCFG_DisableDBATT+0x1c>)
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <LL_SYSCFG_DisableDBATT+0x1c>)
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	430a      	orrs	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
}
 8004618:	46c0      	nop			; (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	b002      	add	sp, #8
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40010000 	.word	0x40010000

08004624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462a:	4b11      	ldr	r3, [pc, #68]	; (8004670 <HAL_MspInit+0x4c>)
 800462c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <HAL_MspInit+0x4c>)
 8004630:	2101      	movs	r1, #1
 8004632:	430a      	orrs	r2, r1
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
 8004636:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <HAL_MspInit+0x4c>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2201      	movs	r2, #1
 800463c:	4013      	ands	r3, r2
 800463e:	607b      	str	r3, [r7, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <HAL_MspInit+0x4c>)
 8004644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <HAL_MspInit+0x4c>)
 8004648:	2180      	movs	r1, #128	; 0x80
 800464a:	0549      	lsls	r1, r1, #21
 800464c:	430a      	orrs	r2, r1
 800464e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <HAL_MspInit+0x4c>)
 8004652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004654:	2380      	movs	r3, #128	; 0x80
 8004656:	055b      	lsls	r3, r3, #21
 8004658:	4013      	ands	r3, r2
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 800465e:	23c0      	movs	r3, #192	; 0xc0
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	0018      	movs	r0, r3
 8004664:	f7ff ffce 	bl	8004604 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000

08004674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800467c:	2314      	movs	r3, #20
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	0018      	movs	r0, r3
 8004682:	2314      	movs	r3, #20
 8004684:	001a      	movs	r2, r3
 8004686:	2100      	movs	r1, #0
 8004688:	f005 fa14 	bl	8009ab4 <memset>
  if(hadc->Instance==ADC1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a32      	ldr	r2, [pc, #200]	; (800475c <HAL_ADC_MspInit+0xe8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d15e      	bne.n	8004754 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004696:	4b32      	ldr	r3, [pc, #200]	; (8004760 <HAL_ADC_MspInit+0xec>)
 8004698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800469a:	4b31      	ldr	r3, [pc, #196]	; (8004760 <HAL_ADC_MspInit+0xec>)
 800469c:	2180      	movs	r1, #128	; 0x80
 800469e:	0349      	lsls	r1, r1, #13
 80046a0:	430a      	orrs	r2, r1
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
 80046a4:	4b2e      	ldr	r3, [pc, #184]	; (8004760 <HAL_ADC_MspInit+0xec>)
 80046a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	035b      	lsls	r3, r3, #13
 80046ac:	4013      	ands	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b2:	4b2b      	ldr	r3, [pc, #172]	; (8004760 <HAL_ADC_MspInit+0xec>)
 80046b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b6:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <HAL_ADC_MspInit+0xec>)
 80046b8:	2101      	movs	r1, #1
 80046ba:	430a      	orrs	r2, r1
 80046bc:	635a      	str	r2, [r3, #52]	; 0x34
 80046be:	4b28      	ldr	r3, [pc, #160]	; (8004760 <HAL_ADC_MspInit+0xec>)
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	2201      	movs	r2, #1
 80046c4:	4013      	ands	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = Phs_Pin|Mag_Pin;
 80046ca:	2114      	movs	r1, #20
 80046cc:	187b      	adds	r3, r7, r1
 80046ce:	2203      	movs	r2, #3
 80046d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046d2:	187b      	adds	r3, r7, r1
 80046d4:	2203      	movs	r2, #3
 80046d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d8:	187b      	adds	r3, r7, r1
 80046da:	2200      	movs	r2, #0
 80046dc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046de:	187a      	adds	r2, r7, r1
 80046e0:	23a0      	movs	r3, #160	; 0xa0
 80046e2:	05db      	lsls	r3, r3, #23
 80046e4:	0011      	movs	r1, r2
 80046e6:	0018      	movs	r0, r3
 80046e8:	f002 f8b6 	bl	8006858 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 80046ec:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <HAL_ADC_MspInit+0xf0>)
 80046ee:	4a1e      	ldr	r2, [pc, #120]	; (8004768 <HAL_ADC_MspInit+0xf4>)
 80046f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80046f2:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <HAL_ADC_MspInit+0xf0>)
 80046f4:	2205      	movs	r2, #5
 80046f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <HAL_ADC_MspInit+0xf0>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80046fe:	4b19      	ldr	r3, [pc, #100]	; (8004764 <HAL_ADC_MspInit+0xf0>)
 8004700:	2200      	movs	r2, #0
 8004702:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004704:	4b17      	ldr	r3, [pc, #92]	; (8004764 <HAL_ADC_MspInit+0xf0>)
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800470a:	4b16      	ldr	r3, [pc, #88]	; (8004764 <HAL_ADC_MspInit+0xf0>)
 800470c:	2280      	movs	r2, #128	; 0x80
 800470e:	0092      	lsls	r2, r2, #2
 8004710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004712:	4b14      	ldr	r3, [pc, #80]	; (8004764 <HAL_ADC_MspInit+0xf0>)
 8004714:	2280      	movs	r2, #128	; 0x80
 8004716:	0112      	lsls	r2, r2, #4
 8004718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800471a:	4b12      	ldr	r3, [pc, #72]	; (8004764 <HAL_ADC_MspInit+0xf0>)
 800471c:	2220      	movs	r2, #32
 800471e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004720:	4b10      	ldr	r3, [pc, #64]	; (8004764 <HAL_ADC_MspInit+0xf0>)
 8004722:	2280      	movs	r2, #128	; 0x80
 8004724:	0192      	lsls	r2, r2, #6
 8004726:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004728:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <HAL_ADC_MspInit+0xf0>)
 800472a:	0018      	movs	r0, r3
 800472c:	f001 fd64 	bl	80061f8 <HAL_DMA_Init>
 8004730:	1e03      	subs	r3, r0, #0
 8004732:	d001      	beq.n	8004738 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8004734:	f7ff ff60 	bl	80045f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a0a      	ldr	r2, [pc, #40]	; (8004764 <HAL_ADC_MspInit+0xf0>)
 800473c:	651a      	str	r2, [r3, #80]	; 0x50
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <HAL_ADC_MspInit+0xf0>)
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8004744:	2200      	movs	r2, #0
 8004746:	2100      	movs	r1, #0
 8004748:	200c      	movs	r0, #12
 800474a:	f001 fd23 	bl	8006194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800474e:	200c      	movs	r0, #12
 8004750:	f001 fd35 	bl	80061be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004754:	46c0      	nop			; (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	b00a      	add	sp, #40	; 0x28
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40012400 	.word	0x40012400
 8004760:	40021000 	.word	0x40021000
 8004764:	2000033c 	.word	0x2000033c
 8004768:	40020058 	.word	0x40020058

0800476c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08c      	sub	sp, #48	; 0x30
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004774:	231c      	movs	r3, #28
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	0018      	movs	r0, r3
 800477a:	2314      	movs	r3, #20
 800477c:	001a      	movs	r2, r3
 800477e:	2100      	movs	r1, #0
 8004780:	f005 f998 	bl	8009ab4 <memset>
  if(huart->Instance==USART1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a91      	ldr	r2, [pc, #580]	; (80049d0 <HAL_UART_MspInit+0x264>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d000      	beq.n	8004790 <HAL_UART_MspInit+0x24>
 800478e:	e08a      	b.n	80048a6 <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004790:	4b90      	ldr	r3, [pc, #576]	; (80049d4 <HAL_UART_MspInit+0x268>)
 8004792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004794:	4b8f      	ldr	r3, [pc, #572]	; (80049d4 <HAL_UART_MspInit+0x268>)
 8004796:	2180      	movs	r1, #128	; 0x80
 8004798:	01c9      	lsls	r1, r1, #7
 800479a:	430a      	orrs	r2, r1
 800479c:	641a      	str	r2, [r3, #64]	; 0x40
 800479e:	4b8d      	ldr	r3, [pc, #564]	; (80049d4 <HAL_UART_MspInit+0x268>)
 80047a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a2:	2380      	movs	r3, #128	; 0x80
 80047a4:	01db      	lsls	r3, r3, #7
 80047a6:	4013      	ands	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047ac:	4b89      	ldr	r3, [pc, #548]	; (80049d4 <HAL_UART_MspInit+0x268>)
 80047ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b0:	4b88      	ldr	r3, [pc, #544]	; (80049d4 <HAL_UART_MspInit+0x268>)
 80047b2:	2104      	movs	r1, #4
 80047b4:	430a      	orrs	r2, r1
 80047b6:	635a      	str	r2, [r3, #52]	; 0x34
 80047b8:	4b86      	ldr	r3, [pc, #536]	; (80049d4 <HAL_UART_MspInit+0x268>)
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	2204      	movs	r2, #4
 80047be:	4013      	ands	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80047c4:	211c      	movs	r1, #28
 80047c6:	187b      	adds	r3, r7, r1
 80047c8:	2230      	movs	r2, #48	; 0x30
 80047ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047cc:	187b      	adds	r3, r7, r1
 80047ce:	2202      	movs	r2, #2
 80047d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d2:	187b      	adds	r3, r7, r1
 80047d4:	2200      	movs	r2, #0
 80047d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d8:	187b      	adds	r3, r7, r1
 80047da:	2200      	movs	r2, #0
 80047dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80047de:	187b      	adds	r3, r7, r1
 80047e0:	2201      	movs	r2, #1
 80047e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	4a7c      	ldr	r2, [pc, #496]	; (80049d8 <HAL_UART_MspInit+0x26c>)
 80047e8:	0019      	movs	r1, r3
 80047ea:	0010      	movs	r0, r2
 80047ec:	f002 f834 	bl	8006858 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80047f0:	4b7a      	ldr	r3, [pc, #488]	; (80049dc <HAL_UART_MspInit+0x270>)
 80047f2:	4a7b      	ldr	r2, [pc, #492]	; (80049e0 <HAL_UART_MspInit+0x274>)
 80047f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80047f6:	4b79      	ldr	r3, [pc, #484]	; (80049dc <HAL_UART_MspInit+0x270>)
 80047f8:	2232      	movs	r2, #50	; 0x32
 80047fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047fc:	4b77      	ldr	r3, [pc, #476]	; (80049dc <HAL_UART_MspInit+0x270>)
 80047fe:	2200      	movs	r2, #0
 8004800:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004802:	4b76      	ldr	r3, [pc, #472]	; (80049dc <HAL_UART_MspInit+0x270>)
 8004804:	2200      	movs	r2, #0
 8004806:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004808:	4b74      	ldr	r3, [pc, #464]	; (80049dc <HAL_UART_MspInit+0x270>)
 800480a:	2280      	movs	r2, #128	; 0x80
 800480c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800480e:	4b73      	ldr	r3, [pc, #460]	; (80049dc <HAL_UART_MspInit+0x270>)
 8004810:	2200      	movs	r2, #0
 8004812:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004814:	4b71      	ldr	r3, [pc, #452]	; (80049dc <HAL_UART_MspInit+0x270>)
 8004816:	2200      	movs	r2, #0
 8004818:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800481a:	4b70      	ldr	r3, [pc, #448]	; (80049dc <HAL_UART_MspInit+0x270>)
 800481c:	2220      	movs	r2, #32
 800481e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004820:	4b6e      	ldr	r3, [pc, #440]	; (80049dc <HAL_UART_MspInit+0x270>)
 8004822:	2200      	movs	r2, #0
 8004824:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004826:	4b6d      	ldr	r3, [pc, #436]	; (80049dc <HAL_UART_MspInit+0x270>)
 8004828:	0018      	movs	r0, r3
 800482a:	f001 fce5 	bl	80061f8 <HAL_DMA_Init>
 800482e:	1e03      	subs	r3, r0, #0
 8004830:	d001      	beq.n	8004836 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004832:	f7ff fee1 	bl	80045f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a68      	ldr	r2, [pc, #416]	; (80049dc <HAL_UART_MspInit+0x270>)
 800483a:	679a      	str	r2, [r3, #120]	; 0x78
 800483c:	4b67      	ldr	r3, [pc, #412]	; (80049dc <HAL_UART_MspInit+0x270>)
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8004842:	4b68      	ldr	r3, [pc, #416]	; (80049e4 <HAL_UART_MspInit+0x278>)
 8004844:	4a68      	ldr	r2, [pc, #416]	; (80049e8 <HAL_UART_MspInit+0x27c>)
 8004846:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004848:	4b66      	ldr	r3, [pc, #408]	; (80049e4 <HAL_UART_MspInit+0x278>)
 800484a:	2233      	movs	r2, #51	; 0x33
 800484c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800484e:	4b65      	ldr	r3, [pc, #404]	; (80049e4 <HAL_UART_MspInit+0x278>)
 8004850:	2210      	movs	r2, #16
 8004852:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004854:	4b63      	ldr	r3, [pc, #396]	; (80049e4 <HAL_UART_MspInit+0x278>)
 8004856:	2200      	movs	r2, #0
 8004858:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800485a:	4b62      	ldr	r3, [pc, #392]	; (80049e4 <HAL_UART_MspInit+0x278>)
 800485c:	2280      	movs	r2, #128	; 0x80
 800485e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004860:	4b60      	ldr	r3, [pc, #384]	; (80049e4 <HAL_UART_MspInit+0x278>)
 8004862:	2200      	movs	r2, #0
 8004864:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004866:	4b5f      	ldr	r3, [pc, #380]	; (80049e4 <HAL_UART_MspInit+0x278>)
 8004868:	2200      	movs	r2, #0
 800486a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800486c:	4b5d      	ldr	r3, [pc, #372]	; (80049e4 <HAL_UART_MspInit+0x278>)
 800486e:	2200      	movs	r2, #0
 8004870:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004872:	4b5c      	ldr	r3, [pc, #368]	; (80049e4 <HAL_UART_MspInit+0x278>)
 8004874:	2200      	movs	r2, #0
 8004876:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004878:	4b5a      	ldr	r3, [pc, #360]	; (80049e4 <HAL_UART_MspInit+0x278>)
 800487a:	0018      	movs	r0, r3
 800487c:	f001 fcbc 	bl	80061f8 <HAL_DMA_Init>
 8004880:	1e03      	subs	r3, r0, #0
 8004882:	d001      	beq.n	8004888 <HAL_UART_MspInit+0x11c>
    {
      Error_Handler();
 8004884:	f7ff feb8 	bl	80045f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a56      	ldr	r2, [pc, #344]	; (80049e4 <HAL_UART_MspInit+0x278>)
 800488c:	675a      	str	r2, [r3, #116]	; 0x74
 800488e:	4b55      	ldr	r3, [pc, #340]	; (80049e4 <HAL_UART_MspInit+0x278>)
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004894:	2200      	movs	r2, #0
 8004896:	2100      	movs	r1, #0
 8004898:	201b      	movs	r0, #27
 800489a:	f001 fc7b 	bl	8006194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800489e:	201b      	movs	r0, #27
 80048a0:	f001 fc8d 	bl	80061be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80048a4:	e090      	b.n	80049c8 <HAL_UART_MspInit+0x25c>
  else if(huart->Instance==USART2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a50      	ldr	r2, [pc, #320]	; (80049ec <HAL_UART_MspInit+0x280>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d000      	beq.n	80048b2 <HAL_UART_MspInit+0x146>
 80048b0:	e08a      	b.n	80049c8 <HAL_UART_MspInit+0x25c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80048b2:	4b48      	ldr	r3, [pc, #288]	; (80049d4 <HAL_UART_MspInit+0x268>)
 80048b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_UART_MspInit+0x268>)
 80048b8:	2180      	movs	r1, #128	; 0x80
 80048ba:	0289      	lsls	r1, r1, #10
 80048bc:	430a      	orrs	r2, r1
 80048be:	63da      	str	r2, [r3, #60]	; 0x3c
 80048c0:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <HAL_UART_MspInit+0x268>)
 80048c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048c4:	2380      	movs	r3, #128	; 0x80
 80048c6:	029b      	lsls	r3, r3, #10
 80048c8:	4013      	ands	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_UART_MspInit+0x268>)
 80048d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d2:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <HAL_UART_MspInit+0x268>)
 80048d4:	2101      	movs	r1, #1
 80048d6:	430a      	orrs	r2, r1
 80048d8:	635a      	str	r2, [r3, #52]	; 0x34
 80048da:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <HAL_UART_MspInit+0x268>)
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	2201      	movs	r2, #1
 80048e0:	4013      	ands	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048e6:	211c      	movs	r1, #28
 80048e8:	187b      	adds	r3, r7, r1
 80048ea:	220c      	movs	r2, #12
 80048ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ee:	187b      	adds	r3, r7, r1
 80048f0:	2202      	movs	r2, #2
 80048f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f4:	187b      	adds	r3, r7, r1
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048fa:	187b      	adds	r3, r7, r1
 80048fc:	2200      	movs	r2, #0
 80048fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004900:	187b      	adds	r3, r7, r1
 8004902:	2201      	movs	r2, #1
 8004904:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004906:	187a      	adds	r2, r7, r1
 8004908:	23a0      	movs	r3, #160	; 0xa0
 800490a:	05db      	lsls	r3, r3, #23
 800490c:	0011      	movs	r1, r2
 800490e:	0018      	movs	r0, r3
 8004910:	f001 ffa2 	bl	8006858 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8004914:	4b36      	ldr	r3, [pc, #216]	; (80049f0 <HAL_UART_MspInit+0x284>)
 8004916:	4a37      	ldr	r2, [pc, #220]	; (80049f4 <HAL_UART_MspInit+0x288>)
 8004918:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800491a:	4b35      	ldr	r3, [pc, #212]	; (80049f0 <HAL_UART_MspInit+0x284>)
 800491c:	2234      	movs	r2, #52	; 0x34
 800491e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004920:	4b33      	ldr	r3, [pc, #204]	; (80049f0 <HAL_UART_MspInit+0x284>)
 8004922:	2200      	movs	r2, #0
 8004924:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004926:	4b32      	ldr	r3, [pc, #200]	; (80049f0 <HAL_UART_MspInit+0x284>)
 8004928:	2200      	movs	r2, #0
 800492a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800492c:	4b30      	ldr	r3, [pc, #192]	; (80049f0 <HAL_UART_MspInit+0x284>)
 800492e:	2280      	movs	r2, #128	; 0x80
 8004930:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004932:	4b2f      	ldr	r3, [pc, #188]	; (80049f0 <HAL_UART_MspInit+0x284>)
 8004934:	2200      	movs	r2, #0
 8004936:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004938:	4b2d      	ldr	r3, [pc, #180]	; (80049f0 <HAL_UART_MspInit+0x284>)
 800493a:	2200      	movs	r2, #0
 800493c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800493e:	4b2c      	ldr	r3, [pc, #176]	; (80049f0 <HAL_UART_MspInit+0x284>)
 8004940:	2220      	movs	r2, #32
 8004942:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004944:	4b2a      	ldr	r3, [pc, #168]	; (80049f0 <HAL_UART_MspInit+0x284>)
 8004946:	2200      	movs	r2, #0
 8004948:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800494a:	4b29      	ldr	r3, [pc, #164]	; (80049f0 <HAL_UART_MspInit+0x284>)
 800494c:	0018      	movs	r0, r3
 800494e:	f001 fc53 	bl	80061f8 <HAL_DMA_Init>
 8004952:	1e03      	subs	r3, r0, #0
 8004954:	d001      	beq.n	800495a <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 8004956:	f7ff fe4f 	bl	80045f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a24      	ldr	r2, [pc, #144]	; (80049f0 <HAL_UART_MspInit+0x284>)
 800495e:	679a      	str	r2, [r3, #120]	; 0x78
 8004960:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <HAL_UART_MspInit+0x284>)
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8004966:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <HAL_UART_MspInit+0x28c>)
 8004968:	4a24      	ldr	r2, [pc, #144]	; (80049fc <HAL_UART_MspInit+0x290>)
 800496a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800496c:	4b22      	ldr	r3, [pc, #136]	; (80049f8 <HAL_UART_MspInit+0x28c>)
 800496e:	2235      	movs	r2, #53	; 0x35
 8004970:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004972:	4b21      	ldr	r3, [pc, #132]	; (80049f8 <HAL_UART_MspInit+0x28c>)
 8004974:	2210      	movs	r2, #16
 8004976:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004978:	4b1f      	ldr	r3, [pc, #124]	; (80049f8 <HAL_UART_MspInit+0x28c>)
 800497a:	2200      	movs	r2, #0
 800497c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800497e:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <HAL_UART_MspInit+0x28c>)
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004984:	4b1c      	ldr	r3, [pc, #112]	; (80049f8 <HAL_UART_MspInit+0x28c>)
 8004986:	2200      	movs	r2, #0
 8004988:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800498a:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <HAL_UART_MspInit+0x28c>)
 800498c:	2200      	movs	r2, #0
 800498e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <HAL_UART_MspInit+0x28c>)
 8004992:	2200      	movs	r2, #0
 8004994:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004996:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <HAL_UART_MspInit+0x28c>)
 8004998:	2200      	movs	r2, #0
 800499a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800499c:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <HAL_UART_MspInit+0x28c>)
 800499e:	0018      	movs	r0, r3
 80049a0:	f001 fc2a 	bl	80061f8 <HAL_DMA_Init>
 80049a4:	1e03      	subs	r3, r0, #0
 80049a6:	d001      	beq.n	80049ac <HAL_UART_MspInit+0x240>
      Error_Handler();
 80049a8:	f7ff fe26 	bl	80045f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <HAL_UART_MspInit+0x28c>)
 80049b0:	675a      	str	r2, [r3, #116]	; 0x74
 80049b2:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <HAL_UART_MspInit+0x28c>)
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80049b8:	2200      	movs	r2, #0
 80049ba:	2100      	movs	r1, #0
 80049bc:	201c      	movs	r0, #28
 80049be:	f001 fbe9 	bl	8006194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049c2:	201c      	movs	r0, #28
 80049c4:	f001 fbfb 	bl	80061be <HAL_NVIC_EnableIRQ>
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b00c      	add	sp, #48	; 0x30
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40013800 	.word	0x40013800
 80049d4:	40021000 	.word	0x40021000
 80049d8:	50000800 	.word	0x50000800
 80049dc:	200001f8 	.word	0x200001f8
 80049e0:	40020008 	.word	0x40020008
 80049e4:	20000138 	.word	0x20000138
 80049e8:	4002001c 	.word	0x4002001c
 80049ec:	40004400 	.word	0x40004400
 80049f0:	200000d4 	.word	0x200000d4
 80049f4:	40020030 	.word	0x40020030
 80049f8:	20000254 	.word	0x20000254
 80049fc:	40020044 	.word	0x40020044

08004a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a04:	46c0      	nop			; (mov r8, r8)
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a0e:	e7fe      	b.n	8004a0e <HardFault_Handler+0x4>

08004a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004a14:	46c0      	nop			; (mov r8, r8)
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a28:	f000 f902 	bl	8004c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a2c:	46c0      	nop			; (mov r8, r8)
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	019b      	lsls	r3, r3, #6
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f002 f8aa 	bl	8006b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004a40:	46c0      	nop			; (mov r8, r8)
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <DMA1_Channel1_IRQHandler+0x14>)
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f001 fdc0 	bl	80065d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	200001f8 	.word	0x200001f8

08004a60 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8004a66:	0018      	movs	r0, r3
 8004a68:	f001 fdb4 	bl	80065d4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a6c:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <DMA1_Channel2_3_IRQHandler+0x20>)
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f001 fdb0 	bl	80065d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	20000138 	.word	0x20000138
 8004a80:	200000d4 	.word	0x200000d4

08004a84 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x1c>)
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f001 fda2 	bl	80065d4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004a90:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x20>)
 8004a92:	0018      	movs	r0, r3
 8004a94:	f001 fd9e 	bl	80065d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	20000254 	.word	0x20000254
 8004aa4:	2000033c 	.word	0x2000033c

08004aa8 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <ADC1_COMP_IRQHandler+0x14>)
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 fd7c 	bl	80055ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	20000194 	.word	0x20000194

08004ac0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <USART1_IRQHandler+0x14>)
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f003 f998 	bl	8007dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	200002b0 	.word	0x200002b0

08004ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004adc:	4b03      	ldr	r3, [pc, #12]	; (8004aec <USART2_IRQHandler+0x14>)
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f003 f98c 	bl	8007dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ae4:	46c0      	nop			; (mov r8, r8)
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	2000039c 	.word	0x2000039c

08004af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <SystemInit+0x14>)
 8004af6:	2280      	movs	r2, #128	; 0x80
 8004af8:	0512      	lsls	r2, r2, #20
 8004afa:	609a      	str	r2, [r3, #8]
#endif
}
 8004afc:	46c0      	nop			; (mov r8, r8)
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	e000ed00 	.word	0xe000ed00

08004b08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b08:	480d      	ldr	r0, [pc, #52]	; (8004b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004b0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004b0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004b0e:	e003      	b.n	8004b18 <LoopCopyDataInit>

08004b10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8004b12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004b14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004b16:	3104      	adds	r1, #4

08004b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004b18:	480b      	ldr	r0, [pc, #44]	; (8004b48 <LoopForever+0xa>)
  ldr r3, =_edata
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <LoopForever+0xe>)
  adds r2, r0, r1
 8004b1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004b1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004b20:	d3f6      	bcc.n	8004b10 <CopyDataInit>
  ldr r2, =_sbss
 8004b22:	4a0b      	ldr	r2, [pc, #44]	; (8004b50 <LoopForever+0x12>)
  b LoopFillZerobss
 8004b24:	e002      	b.n	8004b2c <LoopFillZerobss>

08004b26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004b26:	2300      	movs	r3, #0
  str  r3, [r2]
 8004b28:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b2a:	3204      	adds	r2, #4

08004b2c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <LoopForever+0x16>)
  cmp r2, r3
 8004b2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004b30:	d3f9      	bcc.n	8004b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004b32:	f7ff ffdd 	bl	8004af0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004b36:	f004 ff99 	bl	8009a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b3a:	f7fe fbc5 	bl	80032c8 <main>

08004b3e <LoopForever>:

LoopForever:
    b LoopForever
 8004b3e:	e7fe      	b.n	8004b3e <LoopForever>
  ldr   r0, =_estack
 8004b40:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8004b44:	0800b820 	.word	0x0800b820
  ldr r0, =_sdata
 8004b48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004b4c:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8004b50:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8004b54:	20000440 	.word	0x20000440

08004b58 <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b58:	e7fe      	b.n	8004b58 <CEC_IRQHandler>
	...

08004b5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b62:	1dfb      	adds	r3, r7, #7
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <HAL_Init+0x3c>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <HAL_Init+0x3c>)
 8004b6e:	2180      	movs	r1, #128	; 0x80
 8004b70:	0049      	lsls	r1, r1, #1
 8004b72:	430a      	orrs	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b76:	2000      	movs	r0, #0
 8004b78:	f000 f810 	bl	8004b9c <HAL_InitTick>
 8004b7c:	1e03      	subs	r3, r0, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004b80:	1dfb      	adds	r3, r7, #7
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e001      	b.n	8004b8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004b88:	f7ff fd4c 	bl	8004624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b8c:	1dfb      	adds	r3, r7, #7
 8004b8e:	781b      	ldrb	r3, [r3, #0]
}
 8004b90:	0018      	movs	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b002      	add	sp, #8
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40022000 	.word	0x40022000

08004b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ba4:	230f      	movs	r3, #15
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8004bac:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <HAL_InitTick+0x88>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d02b      	beq.n	8004c0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8004bb4:	4b1c      	ldr	r3, [pc, #112]	; (8004c28 <HAL_InitTick+0x8c>)
 8004bb6:	681c      	ldr	r4, [r3, #0]
 8004bb8:	4b1a      	ldr	r3, [pc, #104]	; (8004c24 <HAL_InitTick+0x88>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	23fa      	movs	r3, #250	; 0xfa
 8004bc0:	0098      	lsls	r0, r3, #2
 8004bc2:	f7fb faa9 	bl	8000118 <__udivsi3>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	0019      	movs	r1, r3
 8004bca:	0020      	movs	r0, r4
 8004bcc:	f7fb faa4 	bl	8000118 <__udivsi3>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f001 fb03 	bl	80061de <HAL_SYSTICK_Config>
 8004bd8:	1e03      	subs	r3, r0, #0
 8004bda:	d112      	bne.n	8004c02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d80a      	bhi.n	8004bf8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	2301      	movs	r3, #1
 8004be6:	425b      	negs	r3, r3
 8004be8:	2200      	movs	r2, #0
 8004bea:	0018      	movs	r0, r3
 8004bec:	f001 fad2 	bl	8006194 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <HAL_InitTick+0x90>)
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	e00d      	b.n	8004c14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004bf8:	230f      	movs	r3, #15
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e008      	b.n	8004c14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c02:	230f      	movs	r3, #15
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	2201      	movs	r2, #1
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	e003      	b.n	8004c14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004c0c:	230f      	movs	r3, #15
 8004c0e:	18fb      	adds	r3, r7, r3
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004c14:	230f      	movs	r3, #15
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	781b      	ldrb	r3, [r3, #0]
}
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b005      	add	sp, #20
 8004c20:	bd90      	pop	{r4, r7, pc}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	20000010 	.word	0x20000010
 8004c28:	20000008 	.word	0x20000008
 8004c2c:	2000000c 	.word	0x2000000c

08004c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c34:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <HAL_IncTick+0x18>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <HAL_IncTick+0x1c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	18d2      	adds	r2, r2, r3
 8004c3e:	4b02      	ldr	r3, [pc, #8]	; (8004c48 <HAL_IncTick+0x18>)
 8004c40:	601a      	str	r2, [r3, #0]
}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	2000043c 	.word	0x2000043c
 8004c4c:	20000010 	.word	0x20000010

08004c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  return uwTick;
 8004c54:	4b02      	ldr	r3, [pc, #8]	; (8004c60 <HAL_GetTick+0x10>)
 8004c56:	681b      	ldr	r3, [r3, #0]
}
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	2000043c 	.word	0x2000043c

08004c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c6c:	f7ff fff0 	bl	8004c50 <HAL_GetTick>
 8004c70:	0003      	movs	r3, r0
 8004c72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	d004      	beq.n	8004c88 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c7e:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <HAL_Delay+0x40>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	18d3      	adds	r3, r2, r3
 8004c86:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c88:	46c0      	nop			; (mov r8, r8)
 8004c8a:	f7ff ffe1 	bl	8004c50 <HAL_GetTick>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d8f7      	bhi.n	8004c8a <HAL_Delay+0x26>
  {
  }
}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b004      	add	sp, #16
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	20000010 	.word	0x20000010

08004ca8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a05      	ldr	r2, [pc, #20]	; (8004ccc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004cb8:	401a      	ands	r2, r3
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	601a      	str	r2, [r3, #0]
}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	b002      	add	sp, #8
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	fe3fffff 	.word	0xfe3fffff

08004cd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	23e0      	movs	r3, #224	; 0xe0
 8004cde:	045b      	lsls	r3, r3, #17
 8004ce0:	4013      	ands	r3, r2
}
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b002      	add	sp, #8
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	2104      	movs	r1, #4
 8004cfe:	400a      	ands	r2, r1
 8004d00:	2107      	movs	r1, #7
 8004d02:	4091      	lsls	r1, r2
 8004d04:	000a      	movs	r2, r1
 8004d06:	43d2      	mvns	r2, r2
 8004d08:	401a      	ands	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2104      	movs	r1, #4
 8004d0e:	400b      	ands	r3, r1
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	4099      	lsls	r1, r3
 8004d14:	000b      	movs	r3, r1
 8004d16:	431a      	orrs	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004d1c:	46c0      	nop			; (mov r8, r8)
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b004      	add	sp, #16
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	23c0      	movs	r3, #192	; 0xc0
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	4013      	ands	r3, r2
 8004d36:	d101      	bne.n	8004d3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b002      	add	sp, #8
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	211f      	movs	r1, #31
 8004d5a:	400a      	ands	r2, r1
 8004d5c:	210f      	movs	r1, #15
 8004d5e:	4091      	lsls	r1, r2
 8004d60:	000a      	movs	r2, r1
 8004d62:	43d2      	mvns	r2, r2
 8004d64:	401a      	ands	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	0e9b      	lsrs	r3, r3, #26
 8004d6a:	210f      	movs	r1, #15
 8004d6c:	4019      	ands	r1, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	201f      	movs	r0, #31
 8004d72:	4003      	ands	r3, r0
 8004d74:	4099      	lsls	r1, r3
 8004d76:	000b      	movs	r3, r1
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b004      	add	sp, #16
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	035b      	lsls	r3, r3, #13
 8004d98:	0b5b      	lsrs	r3, r3, #13
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004da0:	46c0      	nop			; (mov r8, r8)
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b002      	add	sp, #8
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	0352      	lsls	r2, r2, #13
 8004dba:	0b52      	lsrs	r2, r2, #13
 8004dbc:	43d2      	mvns	r2, r2
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	2203      	movs	r2, #3
 8004dda:	4013      	ands	r3, r2
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b002      	add	sp, #8
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	0212      	lsls	r2, r2, #8
 8004df8:	43d2      	mvns	r2, r2
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	400b      	ands	r3, r1
 8004e04:	4904      	ldr	r1, [pc, #16]	; (8004e18 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004e06:	400b      	ands	r3, r1
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b004      	add	sp, #16
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	07ffff00 	.word	0x07ffff00

08004e1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4a05      	ldr	r2, [pc, #20]	; (8004e40 <LL_ADC_EnableInternalRegulator+0x24>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2280      	movs	r2, #128	; 0x80
 8004e2e:	0552      	lsls	r2, r2, #21
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b002      	add	sp, #8
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	6fffffe8 	.word	0x6fffffe8

08004e44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	055b      	lsls	r3, r3, #21
 8004e54:	401a      	ands	r2, r3
 8004e56:	2380      	movs	r3, #128	; 0x80
 8004e58:	055b      	lsls	r3, r3, #21
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d101      	bne.n	8004e62 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	0018      	movs	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b002      	add	sp, #8
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4a04      	ldr	r2, [pc, #16]	; (8004e8c <LL_ADC_Enable+0x20>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004e84:	46c0      	nop			; (mov r8, r8)
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b002      	add	sp, #8
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	7fffffe8 	.word	0x7fffffe8

08004e90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <LL_ADC_Disable+0x20>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004ea8:	46c0      	nop			; (mov r8, r8)
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b002      	add	sp, #8
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	7fffffe8 	.word	0x7fffffe8

08004eb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <LL_ADC_IsEnabled+0x18>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <LL_ADC_IsEnabled+0x1a>
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	0018      	movs	r0, r3
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b002      	add	sp, #8
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d101      	bne.n	8004eee <LL_ADC_IsDisableOngoing+0x18>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <LL_ADC_IsDisableOngoing+0x1a>
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b002      	add	sp, #8
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	4a04      	ldr	r2, [pc, #16]	; (8004f18 <LL_ADC_REG_StartConversion+0x20>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	2204      	movs	r2, #4
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004f10:	46c0      	nop			; (mov r8, r8)
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b002      	add	sp, #8
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	7fffffe8 	.word	0x7fffffe8

08004f1c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <LL_ADC_REG_StopConversion+0x20>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b002      	add	sp, #8
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	7fffffe8 	.word	0x7fffffe8

08004f40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d101      	bne.n	8004f58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	b002      	add	sp, #8
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f6c:	231f      	movs	r3, #31
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e1aa      	b.n	80052e0 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10a      	bne.n	8004fa8 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	0018      	movs	r0, r3
 8004f96:	f7ff fb6d 	bl	8004674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2254      	movs	r2, #84	; 0x54
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f7ff ff49 	bl	8004e44 <LL_ADC_IsInternalRegulatorEnabled>
 8004fb2:	1e03      	subs	r3, r0, #0
 8004fb4:	d114      	bne.n	8004fe0 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f7ff ff2e 	bl	8004e1c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004fc0:	4bc9      	ldr	r3, [pc, #804]	; (80052e8 <HAL_ADC_Init+0x384>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	49c9      	ldr	r1, [pc, #804]	; (80052ec <HAL_ADC_Init+0x388>)
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f7fb f8a6 	bl	8000118 <__udivsi3>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8004fd2:	e002      	b.n	8004fda <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1f9      	bne.n	8004fd4 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f7ff ff2d 	bl	8004e44 <LL_ADC_IsInternalRegulatorEnabled>
 8004fea:	1e03      	subs	r3, r0, #0
 8004fec:	d10f      	bne.n	800500e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	2210      	movs	r2, #16
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffe:	2201      	movs	r2, #1
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8005006:	231f      	movs	r3, #31
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	2201      	movs	r2, #1
 800500c:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	0018      	movs	r0, r3
 8005014:	f7ff ff94 	bl	8004f40 <LL_ADC_REG_IsConversionOngoing>
 8005018:	0003      	movs	r3, r0
 800501a:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	2210      	movs	r2, #16
 8005022:	4013      	ands	r3, r2
 8005024:	d000      	beq.n	8005028 <HAL_ADC_Init+0xc4>
 8005026:	e14e      	b.n	80052c6 <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d000      	beq.n	8005030 <HAL_ADC_Init+0xcc>
 800502e:	e14a      	b.n	80052c6 <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005034:	4aae      	ldr	r2, [pc, #696]	; (80052f0 <HAL_ADC_Init+0x38c>)
 8005036:	4013      	ands	r3, r2
 8005038:	2202      	movs	r2, #2
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	0018      	movs	r0, r3
 8005046:	f7ff ff35 	bl	8004eb4 <LL_ADC_IsEnabled>
 800504a:	1e03      	subs	r3, r0, #0
 800504c:	d137      	bne.n	80050be <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	2218      	movs	r2, #24
 8005056:	4393      	bics	r3, r2
 8005058:	0019      	movs	r1, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	0899      	lsrs	r1, r3, #2
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	0f9b      	lsrs	r3, r3, #30
 8005076:	079a      	lsls	r2, r3, #30
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	23c0      	movs	r3, #192	; 0xc0
 8005086:	061b      	lsls	r3, r3, #24
 8005088:	429a      	cmp	r2, r3
 800508a:	d018      	beq.n	80050be <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	05db      	lsls	r3, r3, #23
 8005094:	429a      	cmp	r2, r3
 8005096:	d012      	beq.n	80050be <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	061b      	lsls	r3, r3, #24
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d00c      	beq.n	80050be <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 80050a4:	4b93      	ldr	r3, [pc, #588]	; (80052f4 <HAL_ADC_Init+0x390>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a93      	ldr	r2, [pc, #588]	; (80052f8 <HAL_ADC_Init+0x394>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	23f0      	movs	r3, #240	; 0xf0
 80050b4:	039b      	lsls	r3, r3, #14
 80050b6:	401a      	ands	r2, r3
 80050b8:	4b8e      	ldr	r3, [pc, #568]	; (80052f4 <HAL_ADC_Init+0x390>)
 80050ba:	430a      	orrs	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	7e1b      	ldrb	r3, [r3, #24]
 80050c2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	7e5b      	ldrb	r3, [r3, #25]
 80050c8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80050ca:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	7e9b      	ldrb	r3, [r3, #26]
 80050d0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80050d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_ADC_Init+0x17e>
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	015b      	lsls	r3, r3, #5
 80050e0:	e000      	b.n	80050e4 <HAL_ADC_Init+0x180>
 80050e2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80050e4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80050ea:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	da04      	bge.n	80050fe <HAL_ADC_Init+0x19a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	e001      	b.n	8005102 <HAL_ADC_Init+0x19e>
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8005102:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	212c      	movs	r1, #44	; 0x2c
 8005108:	5c5b      	ldrb	r3, [r3, r1]
 800510a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800510c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	4313      	orrs	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	5c9b      	ldrb	r3, [r3, r2]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d115      	bne.n	800514a <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	7e9b      	ldrb	r3, [r3, #26]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d105      	bne.n	8005132 <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2280      	movs	r2, #128	; 0x80
 800512a:	0252      	lsls	r2, r2, #9
 800512c:	4313      	orrs	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	e00b      	b.n	800514a <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005136:	2220      	movs	r2, #32
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005142:	2201      	movs	r2, #1
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005156:	23e0      	movs	r3, #224	; 0xe0
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005160:	4313      	orrs	r3, r2
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4313      	orrs	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8005170:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 8005176:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 800517c:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	223c      	movs	r2, #60	; 0x3c
 8005188:	5c9b      	ldrb	r3, [r3, r2]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d103      	bne.n	8005196 <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2201      	movs	r2, #1
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4a57      	ldr	r2, [pc, #348]	; (80052fc <HAL_ADC_Init+0x398>)
 800519e:	4013      	ands	r3, r2
 80051a0:	0019      	movs	r1, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	4a53      	ldr	r2, [pc, #332]	; (8005300 <HAL_ADC_Init+0x39c>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	0019      	movs	r1, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	430a      	orrs	r2, r1
 80051c0:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	001a      	movs	r2, r3
 80051cc:	2100      	movs	r1, #0
 80051ce:	f7ff fd8c 	bl	8004cea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	494a      	ldr	r1, [pc, #296]	; (8005304 <HAL_ADC_Init+0x3a0>)
 80051dc:	001a      	movs	r2, r3
 80051de:	f7ff fd84 	bl	8004cea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2110      	movs	r1, #16
 80051f6:	4249      	negs	r1, r1
 80051f8:	430a      	orrs	r2, r1
 80051fa:	629a      	str	r2, [r3, #40]	; 0x28
 80051fc:	e03c      	b.n	8005278 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	2380      	movs	r3, #128	; 0x80
 8005204:	039b      	lsls	r3, r3, #14
 8005206:	429a      	cmp	r2, r3
 8005208:	d136      	bne.n	8005278 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800520a:	2300      	movs	r3, #0
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	e00c      	b.n	800522a <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	40da      	lsrs	r2, r3
 800521a:	0013      	movs	r3, r2
 800521c:	220f      	movs	r2, #15
 800521e:	4013      	ands	r3, r2
 8005220:	2b0f      	cmp	r3, #15
 8005222:	d006      	beq.n	8005232 <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	3301      	adds	r3, #1
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b07      	cmp	r3, #7
 800522e:	d9ef      	bls.n	8005210 <HAL_ADC_Init+0x2ac>
 8005230:	e000      	b.n	8005234 <HAL_ADC_Init+0x2d0>
        {
          break;
 8005232:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d109      	bne.n	800524e <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2110      	movs	r1, #16
 8005246:	4249      	negs	r1, r1
 8005248:	430a      	orrs	r2, r1
 800524a:	629a      	str	r2, [r3, #40]	; 0x28
 800524c:	e014      	b.n	8005278 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	4a2b      	ldr	r2, [pc, #172]	; (8005308 <HAL_ADC_Init+0x3a4>)
 800525a:	4694      	mov	ip, r2
 800525c:	4463      	add	r3, ip
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	221c      	movs	r2, #28
 8005262:	4013      	ands	r3, r2
 8005264:	2210      	movs	r2, #16
 8005266:	4252      	negs	r2, r2
 8005268:	409a      	lsls	r2, r3
 800526a:	0011      	movs	r1, r2
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	4a23      	ldr	r2, [pc, #140]	; (800530c <HAL_ADC_Init+0x3a8>)
 8005280:	4013      	ands	r3, r2
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	429a      	cmp	r2, r3
 8005286:	d10b      	bne.n	80052a0 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005292:	2203      	movs	r2, #3
 8005294:	4393      	bics	r3, r2
 8005296:	2201      	movs	r2, #1
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800529e:	e01c      	b.n	80052da <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a4:	2212      	movs	r2, #18
 80052a6:	4393      	bics	r3, r2
 80052a8:	2210      	movs	r2, #16
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b4:	2201      	movs	r2, #1
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 80052bc:	231f      	movs	r3, #31
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	2201      	movs	r2, #1
 80052c2:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80052c4:	e009      	b.n	80052da <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	2210      	movs	r2, #16
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80052d2:	231f      	movs	r3, #31
 80052d4:	18fb      	adds	r3, r7, r3
 80052d6:	2201      	movs	r2, #1
 80052d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80052da:	231f      	movs	r3, #31
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	781b      	ldrb	r3, [r3, #0]
}
 80052e0:	0018      	movs	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b008      	add	sp, #32
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000008 	.word	0x20000008
 80052ec:	00030d40 	.word	0x00030d40
 80052f0:	fffffefd 	.word	0xfffffefd
 80052f4:	40012708 	.word	0x40012708
 80052f8:	ffc3ffff 	.word	0xffc3ffff
 80052fc:	fffe0219 	.word	0xfffe0219
 8005300:	dffffc02 	.word	0xdffffc02
 8005304:	07ffff04 	.word	0x07ffff04
 8005308:	3fffffff 	.word	0x3fffffff
 800530c:	833fffe7 	.word	0x833fffe7

08005310 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005310:	b5b0      	push	{r4, r5, r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	0018      	movs	r0, r3
 800531e:	f7ff fe0f 	bl	8004f40 <LL_ADC_REG_IsConversionOngoing>
 8005322:	1e03      	subs	r3, r0, #0
 8005324:	d135      	bne.n	8005392 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2254      	movs	r2, #84	; 0x54
 800532a:	5c9b      	ldrb	r3, [r3, r2]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_ADC_Start+0x24>
 8005330:	2302      	movs	r3, #2
 8005332:	e035      	b.n	80053a0 <HAL_ADC_Start+0x90>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2254      	movs	r2, #84	; 0x54
 8005338:	2101      	movs	r1, #1
 800533a:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800533c:	250f      	movs	r5, #15
 800533e:	197c      	adds	r4, r7, r5
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	0018      	movs	r0, r3
 8005344:	f000 fc72 	bl	8005c2c <ADC_Enable>
 8005348:	0003      	movs	r3, r0
 800534a:	7023      	strb	r3, [r4, #0]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800534c:	197b      	adds	r3, r7, r5
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d119      	bne.n	8005388 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005358:	4a13      	ldr	r2, [pc, #76]	; (80053a8 <HAL_ADC_Start+0x98>)
 800535a:	4013      	ands	r3, r2
 800535c:	2280      	movs	r2, #128	; 0x80
 800535e:	0052      	lsls	r2, r2, #1
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	221c      	movs	r2, #28
 8005372:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2254      	movs	r2, #84	; 0x54
 8005378:	2100      	movs	r1, #0
 800537a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	0018      	movs	r0, r3
 8005382:	f7ff fdb9 	bl	8004ef8 <LL_ADC_REG_StartConversion>
 8005386:	e008      	b.n	800539a <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2254      	movs	r2, #84	; 0x54
 800538c:	2100      	movs	r1, #0
 800538e:	5499      	strb	r1, [r3, r2]
 8005390:	e003      	b.n	800539a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005392:	230f      	movs	r3, #15
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	2202      	movs	r2, #2
 8005398:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800539a:	230f      	movs	r3, #15
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	781b      	ldrb	r3, [r3, #0]
}
 80053a0:	0018      	movs	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b004      	add	sp, #16
 80053a6:	bdb0      	pop	{r4, r5, r7, pc}
 80053a8:	fffff0fe 	.word	0xfffff0fe

080053ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80053ac:	b5b0      	push	{r4, r5, r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	0018      	movs	r0, r3
 80053be:	f7ff fdbf 	bl	8004f40 <LL_ADC_REG_IsConversionOngoing>
 80053c2:	1e03      	subs	r3, r0, #0
 80053c4:	d16c      	bne.n	80054a0 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2254      	movs	r2, #84	; 0x54
 80053ca:	5c9b      	ldrb	r3, [r3, r2]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_ADC_Start_DMA+0x28>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e06c      	b.n	80054ae <HAL_ADC_Start_DMA+0x102>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2254      	movs	r2, #84	; 0x54
 80053d8:	2101      	movs	r1, #1
 80053da:	5499      	strb	r1, [r3, r2]
    
    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	4013      	ands	r3, r2
 80053e6:	d113      	bne.n	8005410 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	0018      	movs	r0, r3
 80053ee:	f7ff fd61 	bl	8004eb4 <LL_ADC_IsEnabled>
 80053f2:	1e03      	subs	r3, r0, #0
 80053f4:	d004      	beq.n	8005400 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	0018      	movs	r0, r3
 80053fc:	f7ff fd48 	bl	8004e90 <LL_ADC_Disable>
      }
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2101      	movs	r1, #1
 800540c:	430a      	orrs	r2, r1
 800540e:	60da      	str	r2, [r3, #12]
    }
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005410:	2517      	movs	r5, #23
 8005412:	197c      	adds	r4, r7, r5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	0018      	movs	r0, r3
 8005418:	f000 fc08 	bl	8005c2c <ADC_Enable>
 800541c:	0003      	movs	r3, r0
 800541e:	7023      	strb	r3, [r4, #0]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005420:	197b      	adds	r3, r7, r5
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d13f      	bne.n	80054a8 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	4a22      	ldr	r2, [pc, #136]	; (80054b8 <HAL_ADC_Start_DMA+0x10c>)
 800542e:	4013      	ands	r3, r2
 8005430:	2280      	movs	r2, #128	; 0x80
 8005432:	0052      	lsls	r2, r2, #1
 8005434:	431a      	orrs	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005444:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <HAL_ADC_Start_DMA+0x110>)
 8005446:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544c:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <HAL_ADC_Start_DMA+0x114>)
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005454:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <HAL_ADC_Start_DMA+0x118>)
 8005456:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	221c      	movs	r2, #28
 800545e:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2254      	movs	r2, #84	; 0x54
 8005464:	2100      	movs	r1, #0
 8005466:	5499      	strb	r1, [r3, r2]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2110      	movs	r1, #16
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3340      	adds	r3, #64	; 0x40
 8005482:	0019      	movs	r1, r3
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	2317      	movs	r3, #23
 8005488:	18fc      	adds	r4, r7, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f000 ff3e 	bl	800630c <HAL_DMA_Start_IT>
 8005490:	0003      	movs	r3, r0
 8005492:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	0018      	movs	r0, r3
 800549a:	f7ff fd2d 	bl	8004ef8 <LL_ADC_REG_StartConversion>
 800549e:	e003      	b.n	80054a8 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80054a0:	2317      	movs	r3, #23
 80054a2:	18fb      	adds	r3, r7, r3
 80054a4:	2202      	movs	r2, #2
 80054a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80054a8:	2317      	movs	r3, #23
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	781b      	ldrb	r3, [r3, #0]
}
 80054ae:	0018      	movs	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b006      	add	sp, #24
 80054b4:	bdb0      	pop	{r4, r5, r7, pc}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	fffff0fe 	.word	0xfffff0fe
 80054bc:	08005d95 	.word	0x08005d95
 80054c0:	08005e5d 	.word	0x08005e5d
 80054c4:	08005e7b 	.word	0x08005e7b

080054c8 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80054c8:	b5b0      	push	{r4, r5, r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2254      	movs	r2, #84	; 0x54
 80054d4:	5c9b      	ldrb	r3, [r3, r2]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_ADC_Stop_DMA+0x16>
 80054da:	2302      	movs	r3, #2
 80054dc:	e05f      	b.n	800559e <HAL_ADC_Stop_DMA+0xd6>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2254      	movs	r2, #84	; 0x54
 80054e2:	2101      	movs	r1, #1
 80054e4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80054e6:	250f      	movs	r5, #15
 80054e8:	197c      	adds	r4, r7, r5
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f000 fb61 	bl	8005bb4 <ADC_ConversionStop>
 80054f2:	0003      	movs	r3, r0
 80054f4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80054f6:	197b      	adds	r3, r7, r5
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d148      	bne.n	8005590 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if(hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005502:	2225      	movs	r2, #37	; 0x25
 8005504:	5c9b      	ldrb	r3, [r3, r2]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d112      	bne.n	8005532 <HAL_ADC_Stop_DMA+0x6a>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005510:	250f      	movs	r5, #15
 8005512:	197c      	adds	r4, r7, r5
 8005514:	0018      	movs	r0, r3
 8005516:	f000 ff81 	bl	800641c <HAL_DMA_Abort>
 800551a:	0003      	movs	r3, r0
 800551c:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800551e:	197b      	adds	r3, r7, r5
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_ADC_Stop_DMA+0x6a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	2240      	movs	r2, #64	; 0x40
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2110      	movs	r1, #16
 800553e:	438a      	bics	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8005542:	230f      	movs	r3, #15
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d108      	bne.n	800555e <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800554c:	230f      	movs	r3, #15
 800554e:	18fc      	adds	r4, r7, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	0018      	movs	r0, r3
 8005554:	f000 fbc6 	bl	8005ce4 <ADC_Disable>
 8005558:	0003      	movs	r3, r0
 800555a:	7023      	strb	r3, [r4, #0]
 800555c:	e003      	b.n	8005566 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	0018      	movs	r0, r3
 8005562:	f000 fbbf 	bl	8005ce4 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005566:	230f      	movs	r3, #15
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d107      	bne.n	8005580 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005574:	4a0c      	ldr	r2, [pc, #48]	; (80055a8 <HAL_ADC_Stop_DMA+0xe0>)
 8005576:	4013      	ands	r3, r2
 8005578:	2201      	movs	r2, #1
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
    
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2101      	movs	r1, #1
 800558c:	438a      	bics	r2, r1
 800558e:	60da      	str	r2, [r3, #12]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2254      	movs	r2, #84	; 0x54
 8005594:	2100      	movs	r1, #0
 8005596:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005598:	230f      	movs	r3, #15
 800559a:	18fb      	adds	r3, r7, r3
 800559c:	781b      	ldrb	r3, [r3, #0]
}
 800559e:	0018      	movs	r0, r3
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b004      	add	sp, #16
 80055a4:	bdb0      	pop	{r4, r5, r7, pc}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	fffffefe 	.word	0xfffffefe

080055ac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2202      	movs	r2, #2
 80055cc:	4013      	ands	r3, r2
 80055ce:	d017      	beq.n	8005600 <HAL_ADC_IRQHandler+0x54>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2202      	movs	r2, #2
 80055d4:	4013      	ands	r3, r2
 80055d6:	d013      	beq.n	8005600 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055dc:	2210      	movs	r2, #16
 80055de:	4013      	ands	r3, r2
 80055e0:	d106      	bne.n	80055f0 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e6:	2280      	movs	r2, #128	; 0x80
 80055e8:	0112      	lsls	r2, r2, #4
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	0018      	movs	r0, r3
 80055f4:	f000 fd12 	bl	800601c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2202      	movs	r2, #2
 80055fe:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2204      	movs	r2, #4
 8005604:	4013      	ands	r3, r2
 8005606:	d003      	beq.n	8005610 <HAL_ADC_IRQHandler+0x64>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2204      	movs	r2, #4
 800560c:	4013      	ands	r3, r2
 800560e:	d107      	bne.n	8005620 <HAL_ADC_IRQHandler+0x74>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2208      	movs	r2, #8
 8005614:	4013      	ands	r3, r2
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005616:	d04d      	beq.n	80056b4 <HAL_ADC_IRQHandler+0x108>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2208      	movs	r2, #8
 800561c:	4013      	ands	r3, r2
 800561e:	d049      	beq.n	80056b4 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005624:	2210      	movs	r2, #16
 8005626:	4013      	ands	r3, r2
 8005628:	d106      	bne.n	8005638 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562e:	2280      	movs	r2, #128	; 0x80
 8005630:	0092      	lsls	r2, r2, #2
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	659a      	str	r2, [r3, #88]	; 0x58
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	0018      	movs	r0, r3
 800563e:	f7ff fb71 	bl	8004d24 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005642:	1e03      	subs	r3, r0, #0
 8005644:	d02e      	beq.n	80056a4 <HAL_ADC_IRQHandler+0xf8>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	7e9b      	ldrb	r3, [r3, #26]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d12a      	bne.n	80056a4 <HAL_ADC_IRQHandler+0xf8>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2208      	movs	r2, #8
 8005656:	4013      	ands	r3, r2
 8005658:	2b08      	cmp	r3, #8
 800565a:	d123      	bne.n	80056a4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	0018      	movs	r0, r3
 8005662:	f7ff fc6d 	bl	8004f40 <LL_ADC_REG_IsConversionOngoing>
 8005666:	1e03      	subs	r3, r0, #0
 8005668:	d110      	bne.n	800568c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	210c      	movs	r1, #12
 8005676:	438a      	bics	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567e:	4a56      	ldr	r2, [pc, #344]	; (80057d8 <HAL_ADC_IRQHandler+0x22c>)
 8005680:	4013      	ands	r3, r2
 8005682:	2201      	movs	r2, #1
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	659a      	str	r2, [r3, #88]	; 0x58
 800568a:	e00b      	b.n	80056a4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005690:	2220      	movs	r2, #32
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569c:	2201      	movs	r2, #1
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	0018      	movs	r0, r3
 80056a8:	f7fe fd24 	bl	80040f4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	220c      	movs	r2, #12
 80056b2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2280      	movs	r2, #128	; 0x80
 80056b8:	4013      	ands	r3, r2
 80056ba:	d012      	beq.n	80056e2 <HAL_ADC_IRQHandler+0x136>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2280      	movs	r2, #128	; 0x80
 80056c0:	4013      	ands	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c8:	2280      	movs	r2, #128	; 0x80
 80056ca:	0252      	lsls	r2, r2, #9
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	0018      	movs	r0, r3
 80056d6:	f000 f889 	bl	80057ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2280      	movs	r2, #128	; 0x80
 80056e0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	2380      	movs	r3, #128	; 0x80
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	4013      	ands	r3, r2
 80056ea:	d014      	beq.n	8005716 <HAL_ADC_IRQHandler+0x16a>
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	4013      	ands	r3, r2
 80056f4:	d00f      	beq.n	8005716 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fa:	2280      	movs	r2, #128	; 0x80
 80056fc:	0292      	lsls	r2, r2, #10
 80056fe:	431a      	orrs	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	0018      	movs	r0, r3
 8005708:	f000 fc78 	bl	8005ffc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2280      	movs	r2, #128	; 0x80
 8005712:	0052      	lsls	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4013      	ands	r3, r2
 800571e:	d014      	beq.n	800574a <HAL_ADC_IRQHandler+0x19e>
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4013      	ands	r3, r2
 8005728:	d00f      	beq.n	800574a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572e:	2280      	movs	r2, #128	; 0x80
 8005730:	02d2      	lsls	r2, r2, #11
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	0018      	movs	r0, r3
 800573c:	f000 fc66 	bl	800600c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2280      	movs	r2, #128	; 0x80
 8005746:	0092      	lsls	r2, r2, #2
 8005748:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2210      	movs	r2, #16
 800574e:	4013      	ands	r3, r2
 8005750:	d02b      	beq.n	80057aa <HAL_ADC_IRQHandler+0x1fe>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2210      	movs	r2, #16
 8005756:	4013      	ands	r3, r2
 8005758:	d027      	beq.n	80057aa <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8005762:	2301      	movs	r3, #1
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	e008      	b.n	800577a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	0018      	movs	r0, r3
 800576e:	f7ff fb2d 	bl	8004dcc <LL_ADC_REG_GetDMATransfer>
 8005772:	1e03      	subs	r3, r0, #0
 8005774:	d001      	beq.n	800577a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8005776:	2301      	movs	r3, #1
 8005778:	617b      	str	r3, [r7, #20]
      }
    }
        
    if (overrun_error == 1UL)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d110      	bne.n	80057a2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	00d2      	lsls	r2, r2, #3
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005792:	2202      	movs	r2, #2
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	0018      	movs	r0, r3
 800579e:	f000 f82d 	bl	80057fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2210      	movs	r2, #16
 80057a8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	2380      	movs	r3, #128	; 0x80
 80057ae:	019b      	lsls	r3, r3, #6
 80057b0:	4013      	ands	r3, r2
 80057b2:	d00d      	beq.n	80057d0 <HAL_ADC_IRQHandler+0x224>
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	2380      	movs	r3, #128	; 0x80
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	4013      	ands	r3, r2
 80057bc:	d008      	beq.n	80057d0 <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f000 fc33 	bl	800602c <HAL_ADCEx_ChannelConfigReadyCallback>
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2280      	movs	r2, #128	; 0x80
 80057cc:	0192      	lsls	r2, r2, #6
 80057ce:	601a      	str	r2, [r3, #0]
  }
}
 80057d0:	46c0      	nop			; (mov r8, r8)
 80057d2:	46bd      	mov	sp, r7
 80057d4:	b006      	add	sp, #24
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	fffffefe 	.word	0xfffffefe

080057dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80057e4:	46c0      	nop			; (mov r8, r8)
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b002      	add	sp, #8
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80057f4:	46c0      	nop			; (mov r8, r8)
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b002      	add	sp, #8
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005804:	46c0      	nop			; (mov r8, r8)
 8005806:	46bd      	mov	sp, r7
 8005808:	b002      	add	sp, #8
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005816:	2317      	movs	r3, #23
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2254      	movs	r2, #84	; 0x54
 8005826:	5c9b      	ldrb	r3, [r3, r2]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_ADC_ConfigChannel+0x24>
 800582c:	2302      	movs	r3, #2
 800582e:	e1bc      	b.n	8005baa <HAL_ADC_ConfigChannel+0x39e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2254      	movs	r2, #84	; 0x54
 8005834:	2101      	movs	r1, #1
 8005836:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	0018      	movs	r0, r3
 800583e:	f7ff fb7f 	bl	8004f40 <LL_ADC_REG_IsConversionOngoing>
 8005842:	1e03      	subs	r3, r0, #0
 8005844:	d000      	beq.n	8005848 <HAL_ADC_ConfigChannel+0x3c>
 8005846:	e19f      	b.n	8005b88 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d100      	bne.n	8005852 <HAL_ADC_ConfigChannel+0x46>
 8005850:	e13e      	b.n	8005ad0 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	2380      	movs	r3, #128	; 0x80
 8005858:	061b      	lsls	r3, r3, #24
 800585a:	429a      	cmp	r2, r3
 800585c:	d004      	beq.n	8005868 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005862:	4abf      	ldr	r2, [pc, #764]	; (8005b60 <HAL_ADC_ConfigChannel+0x354>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d108      	bne.n	800587a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	0019      	movs	r1, r3
 8005872:	0010      	movs	r0, r2
 8005874:	f7ff fa87 	bl	8004d86 <LL_ADC_REG_SetSequencerChAdd>
 8005878:	e0c9      	b.n	8005a0e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	211f      	movs	r1, #31
 8005884:	400b      	ands	r3, r1
 8005886:	210f      	movs	r1, #15
 8005888:	4099      	lsls	r1, r3
 800588a:	000b      	movs	r3, r1
 800588c:	43db      	mvns	r3, r3
 800588e:	4013      	ands	r3, r2
 8005890:	0019      	movs	r1, r3
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	035b      	lsls	r3, r3, #13
 8005898:	0b5b      	lsrs	r3, r3, #13
 800589a:	d105      	bne.n	80058a8 <HAL_ADC_ConfigChannel+0x9c>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	0e9b      	lsrs	r3, r3, #26
 80058a2:	221f      	movs	r2, #31
 80058a4:	4013      	ands	r3, r2
 80058a6:	e098      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2201      	movs	r2, #1
 80058ae:	4013      	ands	r3, r2
 80058b0:	d000      	beq.n	80058b4 <HAL_ADC_ConfigChannel+0xa8>
 80058b2:	e091      	b.n	80059d8 <HAL_ADC_ConfigChannel+0x1cc>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2202      	movs	r2, #2
 80058ba:	4013      	ands	r3, r2
 80058bc:	d000      	beq.n	80058c0 <HAL_ADC_ConfigChannel+0xb4>
 80058be:	e089      	b.n	80059d4 <HAL_ADC_ConfigChannel+0x1c8>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2204      	movs	r2, #4
 80058c6:	4013      	ands	r3, r2
 80058c8:	d000      	beq.n	80058cc <HAL_ADC_ConfigChannel+0xc0>
 80058ca:	e081      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x1c4>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2208      	movs	r2, #8
 80058d2:	4013      	ands	r3, r2
 80058d4:	d000      	beq.n	80058d8 <HAL_ADC_ConfigChannel+0xcc>
 80058d6:	e079      	b.n	80059cc <HAL_ADC_ConfigChannel+0x1c0>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2210      	movs	r2, #16
 80058de:	4013      	ands	r3, r2
 80058e0:	d000      	beq.n	80058e4 <HAL_ADC_ConfigChannel+0xd8>
 80058e2:	e071      	b.n	80059c8 <HAL_ADC_ConfigChannel+0x1bc>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2220      	movs	r2, #32
 80058ea:	4013      	ands	r3, r2
 80058ec:	d000      	beq.n	80058f0 <HAL_ADC_ConfigChannel+0xe4>
 80058ee:	e069      	b.n	80059c4 <HAL_ADC_ConfigChannel+0x1b8>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2240      	movs	r2, #64	; 0x40
 80058f6:	4013      	ands	r3, r2
 80058f8:	d000      	beq.n	80058fc <HAL_ADC_ConfigChannel+0xf0>
 80058fa:	e061      	b.n	80059c0 <HAL_ADC_ConfigChannel+0x1b4>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2280      	movs	r2, #128	; 0x80
 8005902:	4013      	ands	r3, r2
 8005904:	d000      	beq.n	8005908 <HAL_ADC_ConfigChannel+0xfc>
 8005906:	e059      	b.n	80059bc <HAL_ADC_ConfigChannel+0x1b0>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	2380      	movs	r3, #128	; 0x80
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	4013      	ands	r3, r2
 8005912:	d151      	bne.n	80059b8 <HAL_ADC_ConfigChannel+0x1ac>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4013      	ands	r3, r2
 800591e:	d149      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x1a8>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	2380      	movs	r3, #128	; 0x80
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4013      	ands	r3, r2
 800592a:	d141      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0x1a4>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	4013      	ands	r3, r2
 8005936:	d139      	bne.n	80059ac <HAL_ADC_ConfigChannel+0x1a0>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	015b      	lsls	r3, r3, #5
 8005940:	4013      	ands	r3, r2
 8005942:	d131      	bne.n	80059a8 <HAL_ADC_ConfigChannel+0x19c>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	2380      	movs	r3, #128	; 0x80
 800594a:	019b      	lsls	r3, r3, #6
 800594c:	4013      	ands	r3, r2
 800594e:	d129      	bne.n	80059a4 <HAL_ADC_ConfigChannel+0x198>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	01db      	lsls	r3, r3, #7
 8005958:	4013      	ands	r3, r2
 800595a:	d121      	bne.n	80059a0 <HAL_ADC_ConfigChannel+0x194>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	4013      	ands	r3, r2
 8005966:	d119      	bne.n	800599c <HAL_ADC_ConfigChannel+0x190>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	2380      	movs	r3, #128	; 0x80
 800596e:	025b      	lsls	r3, r3, #9
 8005970:	4013      	ands	r3, r2
 8005972:	d111      	bne.n	8005998 <HAL_ADC_ConfigChannel+0x18c>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	2380      	movs	r3, #128	; 0x80
 800597a:	029b      	lsls	r3, r3, #10
 800597c:	4013      	ands	r3, r2
 800597e:	d109      	bne.n	8005994 <HAL_ADC_ConfigChannel+0x188>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	2380      	movs	r3, #128	; 0x80
 8005986:	02db      	lsls	r3, r3, #11
 8005988:	4013      	ands	r3, r2
 800598a:	d001      	beq.n	8005990 <HAL_ADC_ConfigChannel+0x184>
 800598c:	2312      	movs	r3, #18
 800598e:	e024      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 8005990:	2300      	movs	r3, #0
 8005992:	e022      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 8005994:	2311      	movs	r3, #17
 8005996:	e020      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 8005998:	2310      	movs	r3, #16
 800599a:	e01e      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 800599c:	230f      	movs	r3, #15
 800599e:	e01c      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059a0:	230e      	movs	r3, #14
 80059a2:	e01a      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059a4:	230d      	movs	r3, #13
 80059a6:	e018      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059a8:	230c      	movs	r3, #12
 80059aa:	e016      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059ac:	230b      	movs	r3, #11
 80059ae:	e014      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059b0:	230a      	movs	r3, #10
 80059b2:	e012      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059b4:	2309      	movs	r3, #9
 80059b6:	e010      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059b8:	2308      	movs	r3, #8
 80059ba:	e00e      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059bc:	2307      	movs	r3, #7
 80059be:	e00c      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059c0:	2306      	movs	r3, #6
 80059c2:	e00a      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059c4:	2305      	movs	r3, #5
 80059c6:	e008      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059c8:	2304      	movs	r3, #4
 80059ca:	e006      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059cc:	2303      	movs	r3, #3
 80059ce:	e004      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e002      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <HAL_ADC_ConfigChannel+0x1ce>
 80059d8:	2300      	movs	r3, #0
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	6852      	ldr	r2, [r2, #4]
 80059de:	201f      	movs	r0, #31
 80059e0:	4002      	ands	r2, r0
 80059e2:	4093      	lsls	r3, r2
 80059e4:	000a      	movs	r2, r1
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	089b      	lsrs	r3, r3, #2
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d808      	bhi.n	8005a0e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	6859      	ldr	r1, [r3, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	001a      	movs	r2, r3
 8005a0a:	f7ff f99c 	bl	8004d46 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6819      	ldr	r1, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	f7ff f9e2 	bl	8004de4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	db00      	blt.n	8005a2a <HAL_ADC_ConfigChannel+0x21e>
 8005a28:	e0b8      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a2a:	4b4e      	ldr	r3, [pc, #312]	; (8005b64 <HAL_ADC_ConfigChannel+0x358>)
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f7ff f94f 	bl	8004cd0 <LL_ADC_GetCommonPathInternalCh>
 8005a32:	0003      	movs	r3, r0
 8005a34:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a4b      	ldr	r2, [pc, #300]	; (8005b68 <HAL_ADC_ConfigChannel+0x35c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d11d      	bne.n	8005a7c <HAL_ADC_ConfigChannel+0x270>
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	2380      	movs	r3, #128	; 0x80
 8005a44:	041b      	lsls	r3, r3, #16
 8005a46:	4013      	ands	r3, r2
 8005a48:	d118      	bne.n	8005a7c <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2280      	movs	r2, #128	; 0x80
 8005a4e:	0412      	lsls	r2, r2, #16
 8005a50:	4313      	orrs	r3, r2
 8005a52:	4a44      	ldr	r2, [pc, #272]	; (8005b64 <HAL_ADC_ConfigChannel+0x358>)
 8005a54:	0019      	movs	r1, r3
 8005a56:	0010      	movs	r0, r2
 8005a58:	f7ff f926 	bl	8004ca8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005a5c:	4b43      	ldr	r3, [pc, #268]	; (8005b6c <HAL_ADC_ConfigChannel+0x360>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4943      	ldr	r1, [pc, #268]	; (8005b70 <HAL_ADC_ConfigChannel+0x364>)
 8005a62:	0018      	movs	r0, r3
 8005a64:	f7fa fb58 	bl	8000118 <__udivsi3>
 8005a68:	0003      	movs	r3, r0
 8005a6a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8005a6c:	e002      	b.n	8005a74 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f9      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a7a:	e08f      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a3c      	ldr	r2, [pc, #240]	; (8005b74 <HAL_ADC_ConfigChannel+0x368>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d10e      	bne.n	8005aa4 <HAL_ADC_ConfigChannel+0x298>
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	2380      	movs	r3, #128	; 0x80
 8005a8a:	045b      	lsls	r3, r3, #17
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d109      	bne.n	8005aa4 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2280      	movs	r2, #128	; 0x80
 8005a94:	0452      	lsls	r2, r2, #17
 8005a96:	4313      	orrs	r3, r2
 8005a98:	4a32      	ldr	r2, [pc, #200]	; (8005b64 <HAL_ADC_ConfigChannel+0x358>)
 8005a9a:	0019      	movs	r1, r3
 8005a9c:	0010      	movs	r0, r2
 8005a9e:	f7ff f903 	bl	8004ca8 <LL_ADC_SetCommonPathInternalCh>
 8005aa2:	e07b      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a33      	ldr	r2, [pc, #204]	; (8005b78 <HAL_ADC_ConfigChannel+0x36c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d000      	beq.n	8005ab0 <HAL_ADC_ConfigChannel+0x2a4>
 8005aae:	e075      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x390>
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	03db      	lsls	r3, r3, #15
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d000      	beq.n	8005abc <HAL_ADC_ConfigChannel+0x2b0>
 8005aba:	e06f      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2280      	movs	r2, #128	; 0x80
 8005ac0:	03d2      	lsls	r2, r2, #15
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	4a27      	ldr	r2, [pc, #156]	; (8005b64 <HAL_ADC_ConfigChannel+0x358>)
 8005ac6:	0019      	movs	r1, r3
 8005ac8:	0010      	movs	r0, r2
 8005aca:	f7ff f8ed 	bl	8004ca8 <LL_ADC_SetCommonPathInternalCh>
 8005ace:	e065      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	2380      	movs	r3, #128	; 0x80
 8005ad6:	061b      	lsls	r3, r3, #24
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d004      	beq.n	8005ae6 <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005ae0:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <HAL_ADC_ConfigChannel+0x354>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d107      	bne.n	8005af6 <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	0019      	movs	r1, r3
 8005af0:	0010      	movs	r0, r2
 8005af2:	f7ff f959 	bl	8004da8 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	da4e      	bge.n	8005b9c <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005afe:	4b19      	ldr	r3, [pc, #100]	; (8005b64 <HAL_ADC_ConfigChannel+0x358>)
 8005b00:	0018      	movs	r0, r3
 8005b02:	f7ff f8e5 	bl	8004cd0 <LL_ADC_GetCommonPathInternalCh>
 8005b06:	0003      	movs	r3, r0
 8005b08:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a16      	ldr	r2, [pc, #88]	; (8005b68 <HAL_ADC_ConfigChannel+0x35c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d108      	bne.n	8005b26 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4a19      	ldr	r2, [pc, #100]	; (8005b7c <HAL_ADC_ConfigChannel+0x370>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	4a12      	ldr	r2, [pc, #72]	; (8005b64 <HAL_ADC_ConfigChannel+0x358>)
 8005b1c:	0019      	movs	r1, r3
 8005b1e:	0010      	movs	r0, r2
 8005b20:	f7ff f8c2 	bl	8004ca8 <LL_ADC_SetCommonPathInternalCh>
 8005b24:	e03a      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a12      	ldr	r2, [pc, #72]	; (8005b74 <HAL_ADC_ConfigChannel+0x368>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d108      	bne.n	8005b42 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <HAL_ADC_ConfigChannel+0x374>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	4a0b      	ldr	r2, [pc, #44]	; (8005b64 <HAL_ADC_ConfigChannel+0x358>)
 8005b38:	0019      	movs	r1, r3
 8005b3a:	0010      	movs	r0, r2
 8005b3c:	f7ff f8b4 	bl	8004ca8 <LL_ADC_SetCommonPathInternalCh>
 8005b40:	e02c      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a0c      	ldr	r2, [pc, #48]	; (8005b78 <HAL_ADC_ConfigChannel+0x36c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d127      	bne.n	8005b9c <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4a0d      	ldr	r2, [pc, #52]	; (8005b84 <HAL_ADC_ConfigChannel+0x378>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	4a04      	ldr	r2, [pc, #16]	; (8005b64 <HAL_ADC_ConfigChannel+0x358>)
 8005b54:	0019      	movs	r1, r3
 8005b56:	0010      	movs	r0, r2
 8005b58:	f7ff f8a6 	bl	8004ca8 <LL_ADC_SetCommonPathInternalCh>
 8005b5c:	e01e      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x390>
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	80000004 	.word	0x80000004
 8005b64:	40012708 	.word	0x40012708
 8005b68:	b0001000 	.word	0xb0001000
 8005b6c:	20000008 	.word	0x20000008
 8005b70:	00030d40 	.word	0x00030d40
 8005b74:	b8004000 	.word	0xb8004000
 8005b78:	b4002000 	.word	0xb4002000
 8005b7c:	ff7fffff 	.word	0xff7fffff
 8005b80:	feffffff 	.word	0xfeffffff
 8005b84:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8005b94:	2317      	movs	r3, #23
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	2201      	movs	r2, #1
 8005b9a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2254      	movs	r2, #84	; 0x54
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005ba4:	2317      	movs	r3, #23
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	781b      	ldrb	r3, [r3, #0]
}
 8005baa:	0018      	movs	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	b006      	add	sp, #24
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	46c0      	nop			; (mov r8, r8)

08005bb4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f7ff f9bd 	bl	8004f40 <LL_ADC_REG_IsConversionOngoing>
 8005bc6:	1e03      	subs	r3, r0, #0
 8005bc8:	d02b      	beq.n	8005c22 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f7ff f981 	bl	8004ed6 <LL_ADC_IsDisableOngoing>
 8005bd4:	1e03      	subs	r3, r0, #0
 8005bd6:	d104      	bne.n	8005be2 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f7ff f99d 	bl	8004f1c <LL_ADC_REG_StopConversion>
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005be2:	f7ff f835 	bl	8004c50 <HAL_GetTick>
 8005be6:	0003      	movs	r3, r0
 8005be8:	60fb      	str	r3, [r7, #12]
    
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005bea:	e014      	b.n	8005c16 <ADC_ConversionStop+0x62>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005bec:	f7ff f830 	bl	8004c50 <HAL_GetTick>
 8005bf0:	0002      	movs	r2, r0
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d90d      	bls.n	8005c16 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfe:	2210      	movs	r2, #16
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	659a      	str	r2, [r3, #88]	; 0x58
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e006      	b.n	8005c24 <ADC_ConversionStop+0x70>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	4013      	ands	r3, r2
 8005c20:	d1e4      	bne.n	8005bec <ADC_ConversionStop+0x38>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	0018      	movs	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b004      	add	sp, #16
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f7ff f93b 	bl	8004eb4 <LL_ADC_IsEnabled>
 8005c3e:	1e03      	subs	r3, r0, #0
 8005c40:	d149      	bne.n	8005cd6 <ADC_Enable+0xaa>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	4a25      	ldr	r2, [pc, #148]	; (8005ce0 <ADC_Enable+0xb4>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	d00d      	beq.n	8005c6a <ADC_Enable+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c52:	2210      	movs	r2, #16
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c5e:	2201      	movs	r2, #1
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e036      	b.n	8005cd8 <ADC_Enable+0xac>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f7ff f8fc 	bl	8004e6c <LL_ADC_Enable>
    
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	7e5b      	ldrb	r3, [r3, #25]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d02c      	beq.n	8005cd6 <ADC_Enable+0xaa>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005c7c:	f7fe ffe8 	bl	8004c50 <HAL_GetTick>
 8005c80:	0003      	movs	r3, r0
 8005c82:	60fb      	str	r3, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c84:	e020      	b.n	8005cc8 <ADC_Enable+0x9c>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f7ff f912 	bl	8004eb4 <LL_ADC_IsEnabled>
 8005c90:	1e03      	subs	r3, r0, #0
 8005c92:	d104      	bne.n	8005c9e <ADC_Enable+0x72>
        {
          LL_ADC_Enable(hadc->Instance);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f7ff f8e7 	bl	8004e6c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c9e:	f7fe ffd7 	bl	8004c50 <HAL_GetTick>
 8005ca2:	0002      	movs	r2, r0
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d90d      	bls.n	8005cc8 <ADC_Enable+0x9c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb0:	2210      	movs	r2, #16
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	65da      	str	r2, [r3, #92]	; 0x5c
          
          return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e007      	b.n	8005cd8 <ADC_Enable+0xac>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d1d7      	bne.n	8005c86 <ADC_Enable+0x5a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	0018      	movs	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b004      	add	sp, #16
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	80000017 	.word	0x80000017

08005ce4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f7ff f8f0 	bl	8004ed6 <LL_ADC_IsDisableOngoing>
 8005cf6:	0003      	movs	r3, r0
 8005cf8:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (   (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f7ff f8d8 	bl	8004eb4 <LL_ADC_IsEnabled>
 8005d04:	1e03      	subs	r3, r0, #0
 8005d06:	d040      	beq.n	8005d8a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d13d      	bne.n	8005d8a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2205      	movs	r2, #5
 8005d16:	4013      	ands	r3, r2
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d10d      	bne.n	8005d38 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f7ff f8b5 	bl	8004e90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
    
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005d2e:	f7fe ff8f 	bl	8004c50 <HAL_GetTick>
 8005d32:	0003      	movs	r3, r0
 8005d34:	60bb      	str	r3, [r7, #8]
    
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d36:	e022      	b.n	8005d7e <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3c:	2210      	movs	r2, #16
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d48:	2201      	movs	r2, #1
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e01b      	b.n	8005d8c <ADC_Disable+0xa8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005d54:	f7fe ff7c 	bl	8004c50 <HAL_GetTick>
 8005d58:	0002      	movs	r2, r0
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d90d      	bls.n	8005d7e <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d66:	2210      	movs	r2, #16
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d72:	2201      	movs	r2, #1
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e006      	b.n	8005d8c <ADC_Disable+0xa8>
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2201      	movs	r2, #1
 8005d86:	4013      	ands	r3, r2
 8005d88:	d1e4      	bne.n	8005d54 <ADC_Disable+0x70>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b004      	add	sp, #16
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da6:	2250      	movs	r2, #80	; 0x50
 8005da8:	4013      	ands	r3, r2
 8005daa:	d141      	bne.n	8005e30 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db0:	2280      	movs	r2, #128	; 0x80
 8005db2:	0092      	lsls	r2, r2, #2
 8005db4:	431a      	orrs	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f7fe ffb0 	bl	8004d24 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005dc4:	1e03      	subs	r3, r0, #0
 8005dc6:	d02e      	beq.n	8005e26 <ADC_DMAConvCplt+0x92>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	7e9b      	ldrb	r3, [r3, #26]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d12a      	bne.n	8005e26 <ADC_DMAConvCplt+0x92>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d123      	bne.n	8005e26 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	0018      	movs	r0, r3
 8005de4:	f7ff f8ac 	bl	8004f40 <LL_ADC_REG_IsConversionOngoing>
 8005de8:	1e03      	subs	r3, r0, #0
 8005dea:	d110      	bne.n	8005e0e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	210c      	movs	r1, #12
 8005df8:	438a      	bics	r2, r1
 8005dfa:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e00:	4a15      	ldr	r2, [pc, #84]	; (8005e58 <ADC_DMAConvCplt+0xc4>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	2201      	movs	r2, #1
 8005e06:	431a      	orrs	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	659a      	str	r2, [r3, #88]	; 0x58
 8005e0c:	e00b      	b.n	8005e26 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	2220      	movs	r2, #32
 8005e14:	431a      	orrs	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1e:	2201      	movs	r2, #1
 8005e20:	431a      	orrs	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7fe f963 	bl	80040f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005e2e:	e00f      	b.n	8005e50 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	2210      	movs	r2, #16
 8005e36:	4013      	ands	r3, r2
 8005e38:	d004      	beq.n	8005e44 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f7ff fcdd 	bl	80057fc <HAL_ADC_ErrorCallback>
}
 8005e42:	e005      	b.n	8005e50 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	0010      	movs	r0, r2
 8005e4e:	4798      	blx	r3
}
 8005e50:	46c0      	nop			; (mov r8, r8)
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b004      	add	sp, #16
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	fffffefe 	.word	0xfffffefe

08005e5c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e68:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f7ff fcb5 	bl	80057dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b004      	add	sp, #16
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8c:	2240      	movs	r2, #64	; 0x40
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e98:	2204      	movs	r2, #4
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f7ff fcaa 	bl	80057fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ea8:	46c0      	nop			; (mov r8, r8)
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b004      	add	sp, #16
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <LL_ADC_IsEnabled>:
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <LL_ADC_IsEnabled+0x18>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <LL_ADC_IsEnabled+0x1a>
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	0018      	movs	r0, r3
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b002      	add	sp, #8
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <LL_ADC_IsCalibrationOnGoing>:
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	0fdb      	lsrs	r3, r3, #31
 8005ee0:	07da      	lsls	r2, r3, #31
 8005ee2:	2380      	movs	r3, #128	; 0x80
 8005ee4:	061b      	lsls	r3, r3, #24
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d101      	bne.n	8005eee <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b002      	add	sp, #8
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2254      	movs	r2, #84	; 0x54
 8005f08:	5c9b      	ldrb	r3, [r3, r2]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_ADCEx_Calibration_Start+0x1a>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e06c      	b.n	8005fec <HAL_ADCEx_Calibration_Start+0xf4>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2254      	movs	r2, #84	; 0x54
 8005f16:	2101      	movs	r1, #1
 8005f18:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005f1a:	2317      	movs	r3, #23
 8005f1c:	18fc      	adds	r4, r7, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7ff fedf 	bl	8005ce4 <ADC_Disable>
 8005f26:	0003      	movs	r3, r0
 8005f28:	7023      	strb	r3, [r4, #0]
  
  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f7ff ffbe 	bl	8005eb0 <LL_ADC_IsEnabled>
 8005f34:	1e03      	subs	r3, r0, #0
 8005f36:	d14c      	bne.n	8005fd2 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3c:	4a2d      	ldr	r2, [pc, #180]	; (8005ff4 <HAL_ADCEx_Calibration_Start+0xfc>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	2202      	movs	r2, #2
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	2203      	movs	r2, #3
 8005f50:	4013      	ands	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2103      	movs	r1, #3
 8005f60:	438a      	bics	r2, r1
 8005f62:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2180      	movs	r1, #128	; 0x80
 8005f70:	0609      	lsls	r1, r1, #24
 8005f72:	430a      	orrs	r2, r1
 8005f74:	609a      	str	r2, [r3, #8]
    
    /* Wait for calibration completion */
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005f76:	e014      	b.n	8005fa2 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4a1d      	ldr	r2, [pc, #116]	; (8005ff8 <HAL_ADCEx_Calibration_Start+0x100>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d90d      	bls.n	8005fa2 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8a:	2212      	movs	r2, #18
 8005f8c:	4393      	bics	r3, r2
 8005f8e:	2210      	movs	r2, #16
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2254      	movs	r2, #84	; 0x54
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e024      	b.n	8005fec <HAL_ADCEx_Calibration_Start+0xf4>
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f7ff ff93 	bl	8005ed2 <LL_ADC_IsCalibrationOnGoing>
 8005fac:	1e03      	subs	r3, r0, #0
 8005fae:	d1e3      	bne.n	8005f78 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68d9      	ldr	r1, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	4393      	bics	r3, r2
 8005fc8:	2201      	movs	r2, #1
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	659a      	str	r2, [r3, #88]	; 0x58
 8005fd0:	e005      	b.n	8005fde <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd6:	2210      	movs	r2, #16
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2254      	movs	r2, #84	; 0x54
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005fe6:	2317      	movs	r3, #23
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	781b      	ldrb	r3, [r3, #0]
}
 8005fec:	0018      	movs	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b007      	add	sp, #28
 8005ff2:	bd90      	pop	{r4, r7, pc}
 8005ff4:	fffffefd 	.word	0xfffffefd
 8005ff8:	0002f1ff 	.word	0x0002f1ff

08005ffc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006004:	46c0      	nop			; (mov r8, r8)
 8006006:	46bd      	mov	sp, r7
 8006008:	b002      	add	sp, #8
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006014:	46c0      	nop			; (mov r8, r8)
 8006016:	46bd      	mov	sp, r7
 8006018:	b002      	add	sp, #8
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef* hadc)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006024:	46c0      	nop			; (mov r8, r8)
 8006026:	46bd      	mov	sp, r7
 8006028:	b002      	add	sp, #8
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef* hadc)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8006034:	46c0      	nop			; (mov r8, r8)
 8006036:	46bd      	mov	sp, r7
 8006038:	b002      	add	sp, #8
 800603a:	bd80      	pop	{r7, pc}

0800603c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	0002      	movs	r2, r0
 8006044:	1dfb      	adds	r3, r7, #7
 8006046:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006048:	1dfb      	adds	r3, r7, #7
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b7f      	cmp	r3, #127	; 0x7f
 800604e:	d809      	bhi.n	8006064 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006050:	1dfb      	adds	r3, r7, #7
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	001a      	movs	r2, r3
 8006056:	231f      	movs	r3, #31
 8006058:	401a      	ands	r2, r3
 800605a:	4b04      	ldr	r3, [pc, #16]	; (800606c <__NVIC_EnableIRQ+0x30>)
 800605c:	2101      	movs	r1, #1
 800605e:	4091      	lsls	r1, r2
 8006060:	000a      	movs	r2, r1
 8006062:	601a      	str	r2, [r3, #0]
  }
}
 8006064:	46c0      	nop			; (mov r8, r8)
 8006066:	46bd      	mov	sp, r7
 8006068:	b002      	add	sp, #8
 800606a:	bd80      	pop	{r7, pc}
 800606c:	e000e100 	.word	0xe000e100

08006070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006070:	b590      	push	{r4, r7, lr}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	0002      	movs	r2, r0
 8006078:	6039      	str	r1, [r7, #0]
 800607a:	1dfb      	adds	r3, r7, #7
 800607c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800607e:	1dfb      	adds	r3, r7, #7
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b7f      	cmp	r3, #127	; 0x7f
 8006084:	d828      	bhi.n	80060d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006086:	4a2f      	ldr	r2, [pc, #188]	; (8006144 <__NVIC_SetPriority+0xd4>)
 8006088:	1dfb      	adds	r3, r7, #7
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	b25b      	sxtb	r3, r3
 800608e:	089b      	lsrs	r3, r3, #2
 8006090:	33c0      	adds	r3, #192	; 0xc0
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	589b      	ldr	r3, [r3, r2]
 8006096:	1dfa      	adds	r2, r7, #7
 8006098:	7812      	ldrb	r2, [r2, #0]
 800609a:	0011      	movs	r1, r2
 800609c:	2203      	movs	r2, #3
 800609e:	400a      	ands	r2, r1
 80060a0:	00d2      	lsls	r2, r2, #3
 80060a2:	21ff      	movs	r1, #255	; 0xff
 80060a4:	4091      	lsls	r1, r2
 80060a6:	000a      	movs	r2, r1
 80060a8:	43d2      	mvns	r2, r2
 80060aa:	401a      	ands	r2, r3
 80060ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	019b      	lsls	r3, r3, #6
 80060b2:	22ff      	movs	r2, #255	; 0xff
 80060b4:	401a      	ands	r2, r3
 80060b6:	1dfb      	adds	r3, r7, #7
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	0018      	movs	r0, r3
 80060bc:	2303      	movs	r3, #3
 80060be:	4003      	ands	r3, r0
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80060c4:	481f      	ldr	r0, [pc, #124]	; (8006144 <__NVIC_SetPriority+0xd4>)
 80060c6:	1dfb      	adds	r3, r7, #7
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	b25b      	sxtb	r3, r3
 80060cc:	089b      	lsrs	r3, r3, #2
 80060ce:	430a      	orrs	r2, r1
 80060d0:	33c0      	adds	r3, #192	; 0xc0
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80060d6:	e031      	b.n	800613c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80060d8:	4a1b      	ldr	r2, [pc, #108]	; (8006148 <__NVIC_SetPriority+0xd8>)
 80060da:	1dfb      	adds	r3, r7, #7
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	0019      	movs	r1, r3
 80060e0:	230f      	movs	r3, #15
 80060e2:	400b      	ands	r3, r1
 80060e4:	3b08      	subs	r3, #8
 80060e6:	089b      	lsrs	r3, r3, #2
 80060e8:	3306      	adds	r3, #6
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	18d3      	adds	r3, r2, r3
 80060ee:	3304      	adds	r3, #4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	1dfa      	adds	r2, r7, #7
 80060f4:	7812      	ldrb	r2, [r2, #0]
 80060f6:	0011      	movs	r1, r2
 80060f8:	2203      	movs	r2, #3
 80060fa:	400a      	ands	r2, r1
 80060fc:	00d2      	lsls	r2, r2, #3
 80060fe:	21ff      	movs	r1, #255	; 0xff
 8006100:	4091      	lsls	r1, r2
 8006102:	000a      	movs	r2, r1
 8006104:	43d2      	mvns	r2, r2
 8006106:	401a      	ands	r2, r3
 8006108:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	019b      	lsls	r3, r3, #6
 800610e:	22ff      	movs	r2, #255	; 0xff
 8006110:	401a      	ands	r2, r3
 8006112:	1dfb      	adds	r3, r7, #7
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	0018      	movs	r0, r3
 8006118:	2303      	movs	r3, #3
 800611a:	4003      	ands	r3, r0
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006120:	4809      	ldr	r0, [pc, #36]	; (8006148 <__NVIC_SetPriority+0xd8>)
 8006122:	1dfb      	adds	r3, r7, #7
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	001c      	movs	r4, r3
 8006128:	230f      	movs	r3, #15
 800612a:	4023      	ands	r3, r4
 800612c:	3b08      	subs	r3, #8
 800612e:	089b      	lsrs	r3, r3, #2
 8006130:	430a      	orrs	r2, r1
 8006132:	3306      	adds	r3, #6
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	18c3      	adds	r3, r0, r3
 8006138:	3304      	adds	r3, #4
 800613a:	601a      	str	r2, [r3, #0]
}
 800613c:	46c0      	nop			; (mov r8, r8)
 800613e:	46bd      	mov	sp, r7
 8006140:	b003      	add	sp, #12
 8006142:	bd90      	pop	{r4, r7, pc}
 8006144:	e000e100 	.word	0xe000e100
 8006148:	e000ed00 	.word	0xe000ed00

0800614c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3b01      	subs	r3, #1
 8006158:	4a0c      	ldr	r2, [pc, #48]	; (800618c <SysTick_Config+0x40>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d901      	bls.n	8006162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800615e:	2301      	movs	r3, #1
 8006160:	e010      	b.n	8006184 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <SysTick_Config+0x44>)
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	3a01      	subs	r2, #1
 8006168:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800616a:	2301      	movs	r3, #1
 800616c:	425b      	negs	r3, r3
 800616e:	2103      	movs	r1, #3
 8006170:	0018      	movs	r0, r3
 8006172:	f7ff ff7d 	bl	8006070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006176:	4b06      	ldr	r3, [pc, #24]	; (8006190 <SysTick_Config+0x44>)
 8006178:	2200      	movs	r2, #0
 800617a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800617c:	4b04      	ldr	r3, [pc, #16]	; (8006190 <SysTick_Config+0x44>)
 800617e:	2207      	movs	r2, #7
 8006180:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006182:	2300      	movs	r3, #0
}
 8006184:	0018      	movs	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	b002      	add	sp, #8
 800618a:	bd80      	pop	{r7, pc}
 800618c:	00ffffff 	.word	0x00ffffff
 8006190:	e000e010 	.word	0xe000e010

08006194 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	210f      	movs	r1, #15
 80061a0:	187b      	adds	r3, r7, r1
 80061a2:	1c02      	adds	r2, r0, #0
 80061a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	187b      	adds	r3, r7, r1
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	b25b      	sxtb	r3, r3
 80061ae:	0011      	movs	r1, r2
 80061b0:	0018      	movs	r0, r3
 80061b2:	f7ff ff5d 	bl	8006070 <__NVIC_SetPriority>
}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b004      	add	sp, #16
 80061bc:	bd80      	pop	{r7, pc}

080061be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b082      	sub	sp, #8
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	0002      	movs	r2, r0
 80061c6:	1dfb      	adds	r3, r7, #7
 80061c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061ca:	1dfb      	adds	r3, r7, #7
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b25b      	sxtb	r3, r3
 80061d0:	0018      	movs	r0, r3
 80061d2:	f7ff ff33 	bl	800603c <__NVIC_EnableIRQ>
}
 80061d6:	46c0      	nop			; (mov r8, r8)
 80061d8:	46bd      	mov	sp, r7
 80061da:	b002      	add	sp, #8
 80061dc:	bd80      	pop	{r7, pc}

080061de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	0018      	movs	r0, r3
 80061ea:	f7ff ffaf 	bl	800614c <SysTick_Config>
 80061ee:	0003      	movs	r3, r0
}
 80061f0:	0018      	movs	r0, r3
 80061f2:	46bd      	mov	sp, r7
 80061f4:	b002      	add	sp, #8
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e077      	b.n	80062fa <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a3d      	ldr	r2, [pc, #244]	; (8006304 <HAL_DMA_Init+0x10c>)
 8006210:	4694      	mov	ip, r2
 8006212:	4463      	add	r3, ip
 8006214:	2114      	movs	r1, #20
 8006216:	0018      	movs	r0, r3
 8006218:	f7f9 ff7e 	bl	8000118 <__udivsi3>
 800621c:	0003      	movs	r3, r0
 800621e:	009a      	lsls	r2, r3, #2
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2225      	movs	r2, #37	; 0x25
 8006228:	2102      	movs	r1, #2
 800622a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4934      	ldr	r1, [pc, #208]	; (8006308 <HAL_DMA_Init+0x110>)
 8006238:	400a      	ands	r2, r1
 800623a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0018      	movs	r0, r3
 8006276:	f000 fa9f 	bl	80067b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	2380      	movs	r3, #128	; 0x80
 8006280:	01db      	lsls	r3, r3, #7
 8006282:	429a      	cmp	r2, r3
 8006284:	d102      	bne.n	800628c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006294:	21ff      	movs	r1, #255	; 0xff
 8006296:	400a      	ands	r2, r1
 8006298:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80062a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d011      	beq.n	80062d0 <HAL_DMA_Init+0xd8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d80d      	bhi.n	80062d0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0018      	movs	r0, r3
 80062b8:	f000 faaa 	bl	8006810 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80062cc:	605a      	str	r2, [r3, #4]
 80062ce:	e008      	b.n	80062e2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2225      	movs	r2, #37	; 0x25
 80062ec:	2101      	movs	r1, #1
 80062ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2224      	movs	r2, #36	; 0x24
 80062f4:	2100      	movs	r1, #0
 80062f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	0018      	movs	r0, r3
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b002      	add	sp, #8
 8006300:	bd80      	pop	{r7, pc}
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	bffdfff8 	.word	0xbffdfff8
 8006308:	ffff800f 	.word	0xffff800f

0800630c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800631a:	2317      	movs	r3, #23
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	2200      	movs	r2, #0
 8006320:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2224      	movs	r2, #36	; 0x24
 8006326:	5c9b      	ldrb	r3, [r3, r2]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_DMA_Start_IT+0x24>
 800632c:	2302      	movs	r3, #2
 800632e:	e070      	b.n	8006412 <HAL_DMA_Start_IT+0x106>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2224      	movs	r2, #36	; 0x24
 8006334:	2101      	movs	r1, #1
 8006336:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2225      	movs	r2, #37	; 0x25
 800633c:	5c9b      	ldrb	r3, [r3, r2]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	d157      	bne.n	80063f4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2225      	movs	r2, #37	; 0x25
 8006348:	2102      	movs	r1, #2
 800634a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2101      	movs	r1, #1
 800635e:	438a      	bics	r2, r1
 8006360:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f9e5 	bl	8006738 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	210e      	movs	r1, #14
 8006382:	430a      	orrs	r2, r1
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	e00f      	b.n	80063a8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2104      	movs	r1, #4
 8006394:	438a      	bics	r2, r1
 8006396:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	210a      	movs	r1, #10
 80063a4:	430a      	orrs	r2, r1
 80063a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	2380      	movs	r3, #128	; 0x80
 80063b0:	025b      	lsls	r3, r3, #9
 80063b2:	4013      	ands	r3, r2
 80063b4:	d008      	beq.n	80063c8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c0:	2180      	movs	r1, #128	; 0x80
 80063c2:	0049      	lsls	r1, r1, #1
 80063c4:	430a      	orrs	r2, r1
 80063c6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063da:	2180      	movs	r1, #128	; 0x80
 80063dc:	0049      	lsls	r1, r1, #1
 80063de:	430a      	orrs	r2, r1
 80063e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2101      	movs	r1, #1
 80063ee:	430a      	orrs	r2, r1
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	e007      	b.n	8006404 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2224      	movs	r2, #36	; 0x24
 80063f8:	2100      	movs	r1, #0
 80063fa:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80063fc:	2317      	movs	r3, #23
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	2202      	movs	r2, #2
 8006402:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2224      	movs	r2, #36	; 0x24
 8006408:	2100      	movs	r1, #0
 800640a:	5499      	strb	r1, [r3, r2]

  return status;
 800640c:	2317      	movs	r3, #23
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	781b      	ldrb	r3, [r3, #0]
}
 8006412:	0018      	movs	r0, r3
 8006414:	46bd      	mov	sp, r7
 8006416:	b006      	add	sp, #24
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e050      	b.n	80064d0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2225      	movs	r2, #37	; 0x25
 8006432:	5c9b      	ldrb	r3, [r3, r2]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d008      	beq.n	800644c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2204      	movs	r2, #4
 800643e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2224      	movs	r2, #36	; 0x24
 8006444:	2100      	movs	r1, #0
 8006446:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e041      	b.n	80064d0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	210e      	movs	r1, #14
 8006458:	438a      	bics	r2, r1
 800645a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006466:	491c      	ldr	r1, [pc, #112]	; (80064d8 <HAL_DMA_Abort+0xbc>)
 8006468:	400a      	ands	r2, r1
 800646a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2101      	movs	r1, #1
 8006478:	438a      	bics	r2, r1
 800647a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 800647c:	4b17      	ldr	r3, [pc, #92]	; (80064dc <HAL_DMA_Abort+0xc0>)
 800647e:	6859      	ldr	r1, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	221c      	movs	r2, #28
 8006486:	4013      	ands	r3, r2
 8006488:	2201      	movs	r2, #1
 800648a:	409a      	lsls	r2, r3
 800648c:	4b13      	ldr	r3, [pc, #76]	; (80064dc <HAL_DMA_Abort+0xc0>)
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800649a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00c      	beq.n	80064be <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ae:	490a      	ldr	r1, [pc, #40]	; (80064d8 <HAL_DMA_Abort+0xbc>)
 80064b0:	400a      	ands	r2, r1
 80064b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80064bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2225      	movs	r2, #37	; 0x25
 80064c2:	2101      	movs	r1, #1
 80064c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2224      	movs	r2, #36	; 0x24
 80064ca:	2100      	movs	r1, #0
 80064cc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	0018      	movs	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b002      	add	sp, #8
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	fffffeff 	.word	0xfffffeff
 80064dc:	40020000 	.word	0x40020000

080064e0 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064e8:	230f      	movs	r3, #15
 80064ea:	18fb      	adds	r3, r7, r3
 80064ec:	2200      	movs	r2, #0
 80064ee:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2224      	movs	r2, #36	; 0x24
 80064f4:	2100      	movs	r1, #0
 80064f6:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2224      	movs	r2, #36	; 0x24
 80064fc:	5c9b      	ldrb	r3, [r3, r2]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_DMA_Abort_IT+0x26>
 8006502:	2302      	movs	r3, #2
 8006504:	e05e      	b.n	80065c4 <HAL_DMA_Abort_IT+0xe4>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2224      	movs	r2, #36	; 0x24
 800650a:	2101      	movs	r1, #1
 800650c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2225      	movs	r2, #37	; 0x25
 8006512:	5c9b      	ldrb	r3, [r3, r2]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d007      	beq.n	800652a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2204      	movs	r2, #4
 800651e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006520:	230f      	movs	r3, #15
 8006522:	18fb      	adds	r3, r7, r3
 8006524:	2201      	movs	r2, #1
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	e049      	b.n	80065be <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	210e      	movs	r1, #14
 8006536:	438a      	bics	r2, r1
 8006538:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2101      	movs	r1, #1
 8006546:	438a      	bics	r2, r1
 8006548:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006554:	491d      	ldr	r1, [pc, #116]	; (80065cc <HAL_DMA_Abort_IT+0xec>)
 8006556:	400a      	ands	r2, r1
 8006558:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800655a:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <HAL_DMA_Abort_IT+0xf0>)
 800655c:	6859      	ldr	r1, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	221c      	movs	r2, #28
 8006564:	4013      	ands	r3, r2
 8006566:	2201      	movs	r2, #1
 8006568:	409a      	lsls	r2, r3
 800656a:	4b19      	ldr	r3, [pc, #100]	; (80065d0 <HAL_DMA_Abort_IT+0xf0>)
 800656c:	430a      	orrs	r2, r1
 800656e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006578:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00c      	beq.n	800659c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658c:	490f      	ldr	r1, [pc, #60]	; (80065cc <HAL_DMA_Abort_IT+0xec>)
 800658e:	400a      	ands	r2, r1
 8006590:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800659a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2225      	movs	r2, #37	; 0x25
 80065a0:	2101      	movs	r1, #1
 80065a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2224      	movs	r2, #36	; 0x24
 80065a8:	2100      	movs	r1, #0
 80065aa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	0010      	movs	r0, r2
 80065bc:	4798      	blx	r3
    }
  }
  return status;
 80065be:	230f      	movs	r3, #15
 80065c0:	18fb      	adds	r3, r7, r3
 80065c2:	781b      	ldrb	r3, [r3, #0]
}
 80065c4:	0018      	movs	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b004      	add	sp, #16
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	fffffeff 	.word	0xfffffeff
 80065d0:	40020000 	.word	0x40020000

080065d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80065dc:	4b55      	ldr	r3, [pc, #340]	; (8006734 <HAL_DMA_IRQHandler+0x160>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	221c      	movs	r2, #28
 80065f0:	4013      	ands	r3, r2
 80065f2:	2204      	movs	r2, #4
 80065f4:	409a      	lsls	r2, r3
 80065f6:	0013      	movs	r3, r2
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4013      	ands	r3, r2
 80065fc:	d027      	beq.n	800664e <HAL_DMA_IRQHandler+0x7a>
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2204      	movs	r2, #4
 8006602:	4013      	ands	r3, r2
 8006604:	d023      	beq.n	800664e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2220      	movs	r2, #32
 800660e:	4013      	ands	r3, r2
 8006610:	d107      	bne.n	8006622 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2104      	movs	r1, #4
 800661e:	438a      	bics	r2, r1
 8006620:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8006622:	4b44      	ldr	r3, [pc, #272]	; (8006734 <HAL_DMA_IRQHandler+0x160>)
 8006624:	6859      	ldr	r1, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	221c      	movs	r2, #28
 800662c:	4013      	ands	r3, r2
 800662e:	2204      	movs	r2, #4
 8006630:	409a      	lsls	r2, r3
 8006632:	4b40      	ldr	r3, [pc, #256]	; (8006734 <HAL_DMA_IRQHandler+0x160>)
 8006634:	430a      	orrs	r2, r1
 8006636:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663c:	2b00      	cmp	r3, #0
 800663e:	d100      	bne.n	8006642 <HAL_DMA_IRQHandler+0x6e>
 8006640:	e073      	b.n	800672a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	0010      	movs	r0, r2
 800664a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800664c:	e06d      	b.n	800672a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	221c      	movs	r2, #28
 8006654:	4013      	ands	r3, r2
 8006656:	2202      	movs	r2, #2
 8006658:	409a      	lsls	r2, r3
 800665a:	0013      	movs	r3, r2
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4013      	ands	r3, r2
 8006660:	d02e      	beq.n	80066c0 <HAL_DMA_IRQHandler+0xec>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2202      	movs	r2, #2
 8006666:	4013      	ands	r3, r2
 8006668:	d02a      	beq.n	80066c0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2220      	movs	r2, #32
 8006672:	4013      	ands	r3, r2
 8006674:	d10b      	bne.n	800668e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	210a      	movs	r1, #10
 8006682:	438a      	bics	r2, r1
 8006684:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2225      	movs	r2, #37	; 0x25
 800668a:	2101      	movs	r1, #1
 800668c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800668e:	4b29      	ldr	r3, [pc, #164]	; (8006734 <HAL_DMA_IRQHandler+0x160>)
 8006690:	6859      	ldr	r1, [r3, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	221c      	movs	r2, #28
 8006698:	4013      	ands	r3, r2
 800669a:	2202      	movs	r2, #2
 800669c:	409a      	lsls	r2, r3
 800669e:	4b25      	ldr	r3, [pc, #148]	; (8006734 <HAL_DMA_IRQHandler+0x160>)
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2224      	movs	r2, #36	; 0x24
 80066a8:	2100      	movs	r1, #0
 80066aa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d03a      	beq.n	800672a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	0010      	movs	r0, r2
 80066bc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80066be:	e034      	b.n	800672a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	221c      	movs	r2, #28
 80066c6:	4013      	ands	r3, r2
 80066c8:	2208      	movs	r2, #8
 80066ca:	409a      	lsls	r2, r3
 80066cc:	0013      	movs	r3, r2
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4013      	ands	r3, r2
 80066d2:	d02b      	beq.n	800672c <HAL_DMA_IRQHandler+0x158>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2208      	movs	r2, #8
 80066d8:	4013      	ands	r3, r2
 80066da:	d027      	beq.n	800672c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	210e      	movs	r1, #14
 80066e8:	438a      	bics	r2, r1
 80066ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 80066ec:	4b11      	ldr	r3, [pc, #68]	; (8006734 <HAL_DMA_IRQHandler+0x160>)
 80066ee:	6859      	ldr	r1, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	221c      	movs	r2, #28
 80066f6:	4013      	ands	r3, r2
 80066f8:	2201      	movs	r2, #1
 80066fa:	409a      	lsls	r2, r3
 80066fc:	4b0d      	ldr	r3, [pc, #52]	; (8006734 <HAL_DMA_IRQHandler+0x160>)
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2225      	movs	r2, #37	; 0x25
 800670c:	2101      	movs	r1, #1
 800670e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2224      	movs	r2, #36	; 0x24
 8006714:	2100      	movs	r1, #0
 8006716:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	0010      	movs	r0, r2
 8006728:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	46c0      	nop			; (mov r8, r8)
}
 800672e:	46bd      	mov	sp, r7
 8006730:	b004      	add	sp, #16
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40020000 	.word	0x40020000

08006738 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800674e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006754:	2b00      	cmp	r3, #0
 8006756:	d004      	beq.n	8006762 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006760:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8006762:	4b14      	ldr	r3, [pc, #80]	; (80067b4 <DMA_SetConfig+0x7c>)
 8006764:	6859      	ldr	r1, [r3, #4]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	221c      	movs	r2, #28
 800676c:	4013      	ands	r3, r2
 800676e:	2201      	movs	r2, #1
 8006770:	409a      	lsls	r2, r3
 8006772:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <DMA_SetConfig+0x7c>)
 8006774:	430a      	orrs	r2, r1
 8006776:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	2b10      	cmp	r3, #16
 8006786:	d108      	bne.n	800679a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006798:	e007      	b.n	80067aa <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	60da      	str	r2, [r3, #12]
}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	46bd      	mov	sp, r7
 80067ae:	b004      	add	sp, #16
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	40020000 	.word	0x40020000

080067b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	001a      	movs	r2, r3
 80067c6:	23ff      	movs	r3, #255	; 0xff
 80067c8:	4013      	ands	r3, r2
 80067ca:	3b08      	subs	r3, #8
 80067cc:	2114      	movs	r1, #20
 80067ce:	0018      	movs	r0, r3
 80067d0:	f7f9 fca2 	bl	8000118 <__udivsi3>
 80067d4:	0003      	movs	r3, r0
 80067d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	089b      	lsrs	r3, r3, #2
 80067de:	4a0a      	ldr	r2, [pc, #40]	; (8006808 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80067e0:	4694      	mov	ip, r2
 80067e2:	4463      	add	r3, ip
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	001a      	movs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a07      	ldr	r2, [pc, #28]	; (800680c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80067f0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	221c      	movs	r2, #28
 80067f6:	4013      	ands	r3, r2
 80067f8:	2201      	movs	r2, #1
 80067fa:	409a      	lsls	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006800:	46c0      	nop			; (mov r8, r8)
 8006802:	46bd      	mov	sp, r7
 8006804:	b004      	add	sp, #16
 8006806:	bd80      	pop	{r7, pc}
 8006808:	10008200 	.word	0x10008200
 800680c:	40020880 	.word	0x40020880

08006810 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	22ff      	movs	r2, #255	; 0xff
 800681e:	4013      	ands	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4a0a      	ldr	r2, [pc, #40]	; (8006850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006826:	4694      	mov	ip, r2
 8006828:	4463      	add	r3, ip
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	001a      	movs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a07      	ldr	r2, [pc, #28]	; (8006854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006836:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3b01      	subs	r3, #1
 800683c:	2203      	movs	r2, #3
 800683e:	4013      	ands	r3, r2
 8006840:	2201      	movs	r2, #1
 8006842:	409a      	lsls	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006848:	46c0      	nop			; (mov r8, r8)
 800684a:	46bd      	mov	sp, r7
 800684c:	b004      	add	sp, #16
 800684e:	bd80      	pop	{r7, pc}
 8006850:	1000823f 	.word	0x1000823f
 8006854:	40020940 	.word	0x40020940

08006858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006862:	2300      	movs	r3, #0
 8006864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006866:	e147      	b.n	8006af8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2101      	movs	r1, #1
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4091      	lsls	r1, r2
 8006872:	000a      	movs	r2, r1
 8006874:	4013      	ands	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d100      	bne.n	8006880 <HAL_GPIO_Init+0x28>
 800687e:	e138      	b.n	8006af2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d003      	beq.n	8006890 <HAL_GPIO_Init+0x38>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b12      	cmp	r3, #18
 800688e:	d123      	bne.n	80068d8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	08da      	lsrs	r2, r3, #3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3208      	adds	r2, #8
 8006898:	0092      	lsls	r2, r2, #2
 800689a:	58d3      	ldr	r3, [r2, r3]
 800689c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2207      	movs	r2, #7
 80068a2:	4013      	ands	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	220f      	movs	r2, #15
 80068a8:	409a      	lsls	r2, r3
 80068aa:	0013      	movs	r3, r2
 80068ac:	43da      	mvns	r2, r3
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	4013      	ands	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2107      	movs	r1, #7
 80068bc:	400b      	ands	r3, r1
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	409a      	lsls	r2, r3
 80068c2:	0013      	movs	r3, r2
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	08da      	lsrs	r2, r3, #3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3208      	adds	r2, #8
 80068d2:	0092      	lsls	r2, r2, #2
 80068d4:	6939      	ldr	r1, [r7, #16]
 80068d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	2203      	movs	r2, #3
 80068e4:	409a      	lsls	r2, r3
 80068e6:	0013      	movs	r3, r2
 80068e8:	43da      	mvns	r2, r3
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4013      	ands	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2203      	movs	r2, #3
 80068f6:	401a      	ands	r2, r3
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	409a      	lsls	r2, r3
 80068fe:	0013      	movs	r3, r2
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d00b      	beq.n	800692c <HAL_GPIO_Init+0xd4>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2b02      	cmp	r3, #2
 800691a:	d007      	beq.n	800692c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006920:	2b11      	cmp	r3, #17
 8006922:	d003      	beq.n	800692c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b12      	cmp	r3, #18
 800692a:	d130      	bne.n	800698e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	2203      	movs	r2, #3
 8006938:	409a      	lsls	r2, r3
 800693a:	0013      	movs	r3, r2
 800693c:	43da      	mvns	r2, r3
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4013      	ands	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	409a      	lsls	r2, r3
 800694e:	0013      	movs	r3, r2
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006962:	2201      	movs	r2, #1
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	409a      	lsls	r2, r3
 8006968:	0013      	movs	r3, r2
 800696a:	43da      	mvns	r2, r3
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4013      	ands	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	091b      	lsrs	r3, r3, #4
 8006978:	2201      	movs	r2, #1
 800697a:	401a      	ands	r2, r3
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	409a      	lsls	r2, r3
 8006980:	0013      	movs	r3, r2
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	2203      	movs	r2, #3
 800699a:	409a      	lsls	r2, r3
 800699c:	0013      	movs	r3, r2
 800699e:	43da      	mvns	r2, r3
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4013      	ands	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	409a      	lsls	r2, r3
 80069b0:	0013      	movs	r3, r2
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	2380      	movs	r3, #128	; 0x80
 80069c4:	055b      	lsls	r3, r3, #21
 80069c6:	4013      	ands	r3, r2
 80069c8:	d100      	bne.n	80069cc <HAL_GPIO_Init+0x174>
 80069ca:	e092      	b.n	8006af2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80069cc:	4a50      	ldr	r2, [pc, #320]	; (8006b10 <HAL_GPIO_Init+0x2b8>)
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	089b      	lsrs	r3, r3, #2
 80069d2:	3318      	adds	r3, #24
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	589b      	ldr	r3, [r3, r2]
 80069d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2203      	movs	r2, #3
 80069de:	4013      	ands	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	220f      	movs	r2, #15
 80069e4:	409a      	lsls	r2, r3
 80069e6:	0013      	movs	r3, r2
 80069e8:	43da      	mvns	r2, r3
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	4013      	ands	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	23a0      	movs	r3, #160	; 0xa0
 80069f4:	05db      	lsls	r3, r3, #23
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d013      	beq.n	8006a22 <HAL_GPIO_Init+0x1ca>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a45      	ldr	r2, [pc, #276]	; (8006b14 <HAL_GPIO_Init+0x2bc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00d      	beq.n	8006a1e <HAL_GPIO_Init+0x1c6>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a44      	ldr	r2, [pc, #272]	; (8006b18 <HAL_GPIO_Init+0x2c0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <HAL_GPIO_Init+0x1c2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a43      	ldr	r2, [pc, #268]	; (8006b1c <HAL_GPIO_Init+0x2c4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d101      	bne.n	8006a16 <HAL_GPIO_Init+0x1be>
 8006a12:	2303      	movs	r3, #3
 8006a14:	e006      	b.n	8006a24 <HAL_GPIO_Init+0x1cc>
 8006a16:	2305      	movs	r3, #5
 8006a18:	e004      	b.n	8006a24 <HAL_GPIO_Init+0x1cc>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e002      	b.n	8006a24 <HAL_GPIO_Init+0x1cc>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <HAL_GPIO_Init+0x1cc>
 8006a22:	2300      	movs	r3, #0
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	2103      	movs	r1, #3
 8006a28:	400a      	ands	r2, r1
 8006a2a:	00d2      	lsls	r2, r2, #3
 8006a2c:	4093      	lsls	r3, r2
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006a34:	4936      	ldr	r1, [pc, #216]	; (8006b10 <HAL_GPIO_Init+0x2b8>)
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	089b      	lsrs	r3, r3, #2
 8006a3a:	3318      	adds	r3, #24
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006a42:	4a33      	ldr	r2, [pc, #204]	; (8006b10 <HAL_GPIO_Init+0x2b8>)
 8006a44:	2380      	movs	r3, #128	; 0x80
 8006a46:	58d3      	ldr	r3, [r2, r3]
 8006a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	43da      	mvns	r2, r3
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	4013      	ands	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	2380      	movs	r3, #128	; 0x80
 8006a5a:	025b      	lsls	r3, r3, #9
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006a68:	4929      	ldr	r1, [pc, #164]	; (8006b10 <HAL_GPIO_Init+0x2b8>)
 8006a6a:	2280      	movs	r2, #128	; 0x80
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8006a70:	4a27      	ldr	r2, [pc, #156]	; (8006b10 <HAL_GPIO_Init+0x2b8>)
 8006a72:	2384      	movs	r3, #132	; 0x84
 8006a74:	58d3      	ldr	r3, [r2, r3]
 8006a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	43da      	mvns	r2, r3
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	2380      	movs	r3, #128	; 0x80
 8006a88:	029b      	lsls	r3, r3, #10
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006a96:	491e      	ldr	r1, [pc, #120]	; (8006b10 <HAL_GPIO_Init+0x2b8>)
 8006a98:	2284      	movs	r2, #132	; 0x84
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a9e:	4b1c      	ldr	r3, [pc, #112]	; (8006b10 <HAL_GPIO_Init+0x2b8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	43da      	mvns	r2, r3
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	2380      	movs	r3, #128	; 0x80
 8006ab4:	035b      	lsls	r3, r3, #13
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	d003      	beq.n	8006ac2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006ac2:	4b13      	ldr	r3, [pc, #76]	; (8006b10 <HAL_GPIO_Init+0x2b8>)
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006ac8:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <HAL_GPIO_Init+0x2b8>)
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	43da      	mvns	r2, r3
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	2380      	movs	r3, #128	; 0x80
 8006ade:	039b      	lsls	r3, r3, #14
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	d003      	beq.n	8006aec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006aec:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <HAL_GPIO_Init+0x2b8>)
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	3301      	adds	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	40da      	lsrs	r2, r3
 8006b00:	1e13      	subs	r3, r2, #0
 8006b02:	d000      	beq.n	8006b06 <HAL_GPIO_Init+0x2ae>
 8006b04:	e6b0      	b.n	8006868 <HAL_GPIO_Init+0x10>
  }
}
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	b006      	add	sp, #24
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	46c0      	nop			; (mov r8, r8)
 8006b10:	40021800 	.word	0x40021800
 8006b14:	50000400 	.word	0x50000400
 8006b18:	50000800 	.word	0x50000800
 8006b1c:	50000c00 	.word	0x50000c00

08006b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	000a      	movs	r2, r1
 8006b2a:	1cbb      	adds	r3, r7, #2
 8006b2c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	1cba      	adds	r2, r7, #2
 8006b34:	8812      	ldrh	r2, [r2, #0]
 8006b36:	4013      	ands	r3, r2
 8006b38:	d004      	beq.n	8006b44 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006b3a:	230f      	movs	r3, #15
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	2201      	movs	r2, #1
 8006b40:	701a      	strb	r2, [r3, #0]
 8006b42:	e003      	b.n	8006b4c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b44:	230f      	movs	r3, #15
 8006b46:	18fb      	adds	r3, r7, r3
 8006b48:	2200      	movs	r2, #0
 8006b4a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006b4c:	230f      	movs	r3, #15
 8006b4e:	18fb      	adds	r3, r7, r3
 8006b50:	781b      	ldrb	r3, [r3, #0]
}
 8006b52:	0018      	movs	r0, r3
 8006b54:	46bd      	mov	sp, r7
 8006b56:	b004      	add	sp, #16
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	0008      	movs	r0, r1
 8006b64:	0011      	movs	r1, r2
 8006b66:	1cbb      	adds	r3, r7, #2
 8006b68:	1c02      	adds	r2, r0, #0
 8006b6a:	801a      	strh	r2, [r3, #0]
 8006b6c:	1c7b      	adds	r3, r7, #1
 8006b6e:	1c0a      	adds	r2, r1, #0
 8006b70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b72:	1c7b      	adds	r3, r7, #1
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d004      	beq.n	8006b84 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b7a:	1cbb      	adds	r3, r7, #2
 8006b7c:	881a      	ldrh	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b82:	e003      	b.n	8006b8c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b84:	1cbb      	adds	r3, r7, #2
 8006b86:	881a      	ldrh	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006b8c:	46c0      	nop			; (mov r8, r8)
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b002      	add	sp, #8
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	0002      	movs	r2, r0
 8006b9c:	1dbb      	adds	r3, r7, #6
 8006b9e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006ba0:	4b10      	ldr	r3, [pc, #64]	; (8006be4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	1dba      	adds	r2, r7, #6
 8006ba6:	8812      	ldrh	r2, [r2, #0]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	d008      	beq.n	8006bbe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006bac:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006bae:	1dba      	adds	r2, r7, #6
 8006bb0:	8812      	ldrh	r2, [r2, #0]
 8006bb2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006bb4:	1dbb      	adds	r3, r7, #6
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f000 f815 	bl	8006be8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8006bbe:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	1dba      	adds	r2, r7, #6
 8006bc4:	8812      	ldrh	r2, [r2, #0]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d008      	beq.n	8006bdc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006bcc:	1dba      	adds	r2, r7, #6
 8006bce:	8812      	ldrh	r2, [r2, #0]
 8006bd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8006bd2:	1dbb      	adds	r3, r7, #6
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f7fc fe62 	bl	80038a0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006bdc:	46c0      	nop			; (mov r8, r8)
 8006bde:	46bd      	mov	sp, r7
 8006be0:	b002      	add	sp, #8
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40021800 	.word	0x40021800

08006be8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	0002      	movs	r2, r0
 8006bf0:	1dbb      	adds	r3, r7, #6
 8006bf2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8006bf4:	46c0      	nop			; (mov r8, r8)
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	b002      	add	sp, #8
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006c04:	4b19      	ldr	r3, [pc, #100]	; (8006c6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a19      	ldr	r2, [pc, #100]	; (8006c70 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	0019      	movs	r1, r3
 8006c0e:	4b17      	ldr	r3, [pc, #92]	; (8006c6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	2380      	movs	r3, #128	; 0x80
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d11f      	bne.n	8006c60 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8006c20:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	0013      	movs	r3, r2
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	189b      	adds	r3, r3, r2
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	4912      	ldr	r1, [pc, #72]	; (8006c78 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f7f9 fa72 	bl	8000118 <__udivsi3>
 8006c34:	0003      	movs	r3, r0
 8006c36:	3301      	adds	r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c3a:	e008      	b.n	8006c4e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	e001      	b.n	8006c4e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e009      	b.n	8006c62 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c4e:	4b07      	ldr	r3, [pc, #28]	; (8006c6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006c50:	695a      	ldr	r2, [r3, #20]
 8006c52:	2380      	movs	r3, #128	; 0x80
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	401a      	ands	r2, r3
 8006c58:	2380      	movs	r3, #128	; 0x80
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d0ed      	beq.n	8006c3c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	0018      	movs	r0, r3
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b004      	add	sp, #16
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	40007000 	.word	0x40007000
 8006c70:	fffff9ff 	.word	0xfffff9ff
 8006c74:	20000008 	.word	0x20000008
 8006c78:	000f4240 	.word	0x000f4240

08006c7c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006c80:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	23e0      	movs	r3, #224	; 0xe0
 8006c86:	01db      	lsls	r3, r3, #7
 8006c88:	4013      	ands	r3, r2
}
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40021000 	.word	0x40021000

08006c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e304      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2201      	movs	r2, #1
 8006cac:	4013      	ands	r3, r2
 8006cae:	d100      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x1e>
 8006cb0:	e07c      	b.n	8006dac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cb2:	4bc3      	ldr	r3, [pc, #780]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	2238      	movs	r2, #56	; 0x38
 8006cb8:	4013      	ands	r3, r2
 8006cba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cbc:	4bc0      	ldr	r3, [pc, #768]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	2203      	movs	r2, #3
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	2b10      	cmp	r3, #16
 8006cca:	d102      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x3e>
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d002      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x44>
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b08      	cmp	r3, #8
 8006cd6:	d10b      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cd8:	4bb9      	ldr	r3, [pc, #740]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	2380      	movs	r3, #128	; 0x80
 8006cde:	029b      	lsls	r3, r3, #10
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	d062      	beq.n	8006daa <HAL_RCC_OscConfig+0x116>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d15e      	bne.n	8006daa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e2df      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	2380      	movs	r3, #128	; 0x80
 8006cf6:	025b      	lsls	r3, r3, #9
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d107      	bne.n	8006d0c <HAL_RCC_OscConfig+0x78>
 8006cfc:	4bb0      	ldr	r3, [pc, #704]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	4baf      	ldr	r3, [pc, #700]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006d02:	2180      	movs	r1, #128	; 0x80
 8006d04:	0249      	lsls	r1, r1, #9
 8006d06:	430a      	orrs	r2, r1
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	e020      	b.n	8006d4e <HAL_RCC_OscConfig+0xba>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	23a0      	movs	r3, #160	; 0xa0
 8006d12:	02db      	lsls	r3, r3, #11
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d10e      	bne.n	8006d36 <HAL_RCC_OscConfig+0xa2>
 8006d18:	4ba9      	ldr	r3, [pc, #676]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	4ba8      	ldr	r3, [pc, #672]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006d1e:	2180      	movs	r1, #128	; 0x80
 8006d20:	02c9      	lsls	r1, r1, #11
 8006d22:	430a      	orrs	r2, r1
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	4ba6      	ldr	r3, [pc, #664]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4ba5      	ldr	r3, [pc, #660]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006d2c:	2180      	movs	r1, #128	; 0x80
 8006d2e:	0249      	lsls	r1, r1, #9
 8006d30:	430a      	orrs	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	e00b      	b.n	8006d4e <HAL_RCC_OscConfig+0xba>
 8006d36:	4ba2      	ldr	r3, [pc, #648]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4ba1      	ldr	r3, [pc, #644]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006d3c:	49a1      	ldr	r1, [pc, #644]	; (8006fc4 <HAL_RCC_OscConfig+0x330>)
 8006d3e:	400a      	ands	r2, r1
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	4b9f      	ldr	r3, [pc, #636]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4b9e      	ldr	r3, [pc, #632]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006d48:	499f      	ldr	r1, [pc, #636]	; (8006fc8 <HAL_RCC_OscConfig+0x334>)
 8006d4a:	400a      	ands	r2, r1
 8006d4c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d014      	beq.n	8006d80 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d56:	f7fd ff7b 	bl	8004c50 <HAL_GetTick>
 8006d5a:	0003      	movs	r3, r0
 8006d5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d60:	f7fd ff76 	bl	8004c50 <HAL_GetTick>
 8006d64:	0002      	movs	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b64      	cmp	r3, #100	; 0x64
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e29e      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d72:	4b93      	ldr	r3, [pc, #588]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	2380      	movs	r3, #128	; 0x80
 8006d78:	029b      	lsls	r3, r3, #10
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d0f0      	beq.n	8006d60 <HAL_RCC_OscConfig+0xcc>
 8006d7e:	e015      	b.n	8006dac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d80:	f7fd ff66 	bl	8004c50 <HAL_GetTick>
 8006d84:	0003      	movs	r3, r0
 8006d86:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d8a:	f7fd ff61 	bl	8004c50 <HAL_GetTick>
 8006d8e:	0002      	movs	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b64      	cmp	r3, #100	; 0x64
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e289      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d9c:	4b88      	ldr	r3, [pc, #544]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	029b      	lsls	r3, r3, #10
 8006da4:	4013      	ands	r3, r2
 8006da6:	d1f0      	bne.n	8006d8a <HAL_RCC_OscConfig+0xf6>
 8006da8:	e000      	b.n	8006dac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006daa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2202      	movs	r2, #2
 8006db2:	4013      	ands	r3, r2
 8006db4:	d100      	bne.n	8006db8 <HAL_RCC_OscConfig+0x124>
 8006db6:	e099      	b.n	8006eec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006db8:	4b81      	ldr	r3, [pc, #516]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	2238      	movs	r2, #56	; 0x38
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dc2:	4b7f      	ldr	r3, [pc, #508]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	2203      	movs	r2, #3
 8006dc8:	4013      	ands	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d102      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x144>
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d002      	beq.n	8006dde <HAL_RCC_OscConfig+0x14a>
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d135      	bne.n	8006e4a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dde:	4b78      	ldr	r3, [pc, #480]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	2380      	movs	r3, #128	; 0x80
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	4013      	ands	r3, r2
 8006de8:	d005      	beq.n	8006df6 <HAL_RCC_OscConfig+0x162>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e25c      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006df6:	4b72      	ldr	r3, [pc, #456]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	4a74      	ldr	r2, [pc, #464]	; (8006fcc <HAL_RCC_OscConfig+0x338>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	0019      	movs	r1, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	021a      	lsls	r2, r3, #8
 8006e06:	4b6e      	ldr	r3, [pc, #440]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d112      	bne.n	8006e38 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006e12:	4b6b      	ldr	r3, [pc, #428]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a6e      	ldr	r2, [pc, #440]	; (8006fd0 <HAL_RCC_OscConfig+0x33c>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	0019      	movs	r1, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	691a      	ldr	r2, [r3, #16]
 8006e20:	4b67      	ldr	r3, [pc, #412]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006e22:	430a      	orrs	r2, r1
 8006e24:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006e26:	4b66      	ldr	r3, [pc, #408]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	0adb      	lsrs	r3, r3, #11
 8006e2c:	2207      	movs	r2, #7
 8006e2e:	4013      	ands	r3, r2
 8006e30:	4a68      	ldr	r2, [pc, #416]	; (8006fd4 <HAL_RCC_OscConfig+0x340>)
 8006e32:	40da      	lsrs	r2, r3
 8006e34:	4b68      	ldr	r3, [pc, #416]	; (8006fd8 <HAL_RCC_OscConfig+0x344>)
 8006e36:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e38:	4b68      	ldr	r3, [pc, #416]	; (8006fdc <HAL_RCC_OscConfig+0x348>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7fd fead 	bl	8004b9c <HAL_InitTick>
 8006e42:	1e03      	subs	r3, r0, #0
 8006e44:	d051      	beq.n	8006eea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e232      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d030      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006e52:	4b5b      	ldr	r3, [pc, #364]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a5e      	ldr	r2, [pc, #376]	; (8006fd0 <HAL_RCC_OscConfig+0x33c>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	0019      	movs	r1, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	4b57      	ldr	r3, [pc, #348]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006e62:	430a      	orrs	r2, r1
 8006e64:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006e66:	4b56      	ldr	r3, [pc, #344]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	4b55      	ldr	r3, [pc, #340]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006e6c:	2180      	movs	r1, #128	; 0x80
 8006e6e:	0049      	lsls	r1, r1, #1
 8006e70:	430a      	orrs	r2, r1
 8006e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e74:	f7fd feec 	bl	8004c50 <HAL_GetTick>
 8006e78:	0003      	movs	r3, r0
 8006e7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e7c:	e008      	b.n	8006e90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e7e:	f7fd fee7 	bl	8004c50 <HAL_GetTick>
 8006e82:	0002      	movs	r2, r0
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e20f      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e90:	4b4b      	ldr	r3, [pc, #300]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	2380      	movs	r3, #128	; 0x80
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	4013      	ands	r3, r2
 8006e9a:	d0f0      	beq.n	8006e7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e9c:	4b48      	ldr	r3, [pc, #288]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a4a      	ldr	r2, [pc, #296]	; (8006fcc <HAL_RCC_OscConfig+0x338>)
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	0019      	movs	r1, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	021a      	lsls	r2, r3, #8
 8006eac:	4b44      	ldr	r3, [pc, #272]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
 8006eb2:	e01b      	b.n	8006eec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006eb4:	4b42      	ldr	r3, [pc, #264]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4b41      	ldr	r3, [pc, #260]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006eba:	4949      	ldr	r1, [pc, #292]	; (8006fe0 <HAL_RCC_OscConfig+0x34c>)
 8006ebc:	400a      	ands	r2, r1
 8006ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec0:	f7fd fec6 	bl	8004c50 <HAL_GetTick>
 8006ec4:	0003      	movs	r3, r0
 8006ec6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ec8:	e008      	b.n	8006edc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eca:	f7fd fec1 	bl	8004c50 <HAL_GetTick>
 8006ece:	0002      	movs	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e1e9      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006edc:	4b38      	ldr	r3, [pc, #224]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	2380      	movs	r3, #128	; 0x80
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	d1f0      	bne.n	8006eca <HAL_RCC_OscConfig+0x236>
 8006ee8:	e000      	b.n	8006eec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2208      	movs	r2, #8
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	d047      	beq.n	8006f86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8006ef6:	4b32      	ldr	r3, [pc, #200]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	2238      	movs	r2, #56	; 0x38
 8006efc:	4013      	ands	r3, r2
 8006efe:	2b18      	cmp	r3, #24
 8006f00:	d10a      	bne.n	8006f18 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006f02:	4b2f      	ldr	r3, [pc, #188]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f06:	2202      	movs	r2, #2
 8006f08:	4013      	ands	r3, r2
 8006f0a:	d03c      	beq.n	8006f86 <HAL_RCC_OscConfig+0x2f2>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d138      	bne.n	8006f86 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e1cb      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d019      	beq.n	8006f54 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006f20:	4b27      	ldr	r3, [pc, #156]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006f22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f24:	4b26      	ldr	r3, [pc, #152]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006f26:	2101      	movs	r1, #1
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2c:	f7fd fe90 	bl	8004c50 <HAL_GetTick>
 8006f30:	0003      	movs	r3, r0
 8006f32:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f36:	f7fd fe8b 	bl	8004c50 <HAL_GetTick>
 8006f3a:	0002      	movs	r2, r0
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e1b3      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f48:	4b1d      	ldr	r3, [pc, #116]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	4013      	ands	r3, r2
 8006f50:	d0f1      	beq.n	8006f36 <HAL_RCC_OscConfig+0x2a2>
 8006f52:	e018      	b.n	8006f86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006f54:	4b1a      	ldr	r3, [pc, #104]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006f56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f58:	4b19      	ldr	r3, [pc, #100]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	438a      	bics	r2, r1
 8006f5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f60:	f7fd fe76 	bl	8004c50 <HAL_GetTick>
 8006f64:	0003      	movs	r3, r0
 8006f66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f6a:	f7fd fe71 	bl	8004c50 <HAL_GetTick>
 8006f6e:	0002      	movs	r2, r0
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e199      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f7c:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f80:	2202      	movs	r2, #2
 8006f82:	4013      	ands	r3, r2
 8006f84:	d1f1      	bne.n	8006f6a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	d100      	bne.n	8006f92 <HAL_RCC_OscConfig+0x2fe>
 8006f90:	e0c6      	b.n	8007120 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f92:	231f      	movs	r3, #31
 8006f94:	18fb      	adds	r3, r7, r3
 8006f96:	2200      	movs	r2, #0
 8006f98:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8006f9a:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2238      	movs	r2, #56	; 0x38
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	d11e      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006fa6:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <HAL_RCC_OscConfig+0x32c>)
 8006fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006faa:	2202      	movs	r2, #2
 8006fac:	4013      	ands	r3, r2
 8006fae:	d100      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x31e>
 8006fb0:	e0b6      	b.n	8007120 <HAL_RCC_OscConfig+0x48c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d000      	beq.n	8006fbc <HAL_RCC_OscConfig+0x328>
 8006fba:	e0b1      	b.n	8007120 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e177      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
 8006fc0:	40021000 	.word	0x40021000
 8006fc4:	fffeffff 	.word	0xfffeffff
 8006fc8:	fffbffff 	.word	0xfffbffff
 8006fcc:	ffff80ff 	.word	0xffff80ff
 8006fd0:	ffffc7ff 	.word	0xffffc7ff
 8006fd4:	00f42400 	.word	0x00f42400
 8006fd8:	20000008 	.word	0x20000008
 8006fdc:	2000000c 	.word	0x2000000c
 8006fe0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006fe4:	4bb4      	ldr	r3, [pc, #720]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8006fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fe8:	2380      	movs	r3, #128	; 0x80
 8006fea:	055b      	lsls	r3, r3, #21
 8006fec:	4013      	ands	r3, r2
 8006fee:	d101      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x360>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCC_OscConfig+0x362>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d011      	beq.n	800701e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006ffa:	4baf      	ldr	r3, [pc, #700]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8006ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ffe:	4bae      	ldr	r3, [pc, #696]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8007000:	2180      	movs	r1, #128	; 0x80
 8007002:	0549      	lsls	r1, r1, #21
 8007004:	430a      	orrs	r2, r1
 8007006:	63da      	str	r2, [r3, #60]	; 0x3c
 8007008:	4bab      	ldr	r3, [pc, #684]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 800700a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800700c:	2380      	movs	r3, #128	; 0x80
 800700e:	055b      	lsls	r3, r3, #21
 8007010:	4013      	ands	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8007016:	231f      	movs	r3, #31
 8007018:	18fb      	adds	r3, r7, r3
 800701a:	2201      	movs	r2, #1
 800701c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800701e:	4ba7      	ldr	r3, [pc, #668]	; (80072bc <HAL_RCC_OscConfig+0x628>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	2380      	movs	r3, #128	; 0x80
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	4013      	ands	r3, r2
 8007028:	d11a      	bne.n	8007060 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800702a:	4ba4      	ldr	r3, [pc, #656]	; (80072bc <HAL_RCC_OscConfig+0x628>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	4ba3      	ldr	r3, [pc, #652]	; (80072bc <HAL_RCC_OscConfig+0x628>)
 8007030:	2180      	movs	r1, #128	; 0x80
 8007032:	0049      	lsls	r1, r1, #1
 8007034:	430a      	orrs	r2, r1
 8007036:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007038:	f7fd fe0a 	bl	8004c50 <HAL_GetTick>
 800703c:	0003      	movs	r3, r0
 800703e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007040:	e008      	b.n	8007054 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007042:	f7fd fe05 	bl	8004c50 <HAL_GetTick>
 8007046:	0002      	movs	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e12d      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007054:	4b99      	ldr	r3, [pc, #612]	; (80072bc <HAL_RCC_OscConfig+0x628>)
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	2380      	movs	r3, #128	; 0x80
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	4013      	ands	r3, r2
 800705e:	d0f0      	beq.n	8007042 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d106      	bne.n	8007076 <HAL_RCC_OscConfig+0x3e2>
 8007068:	4b93      	ldr	r3, [pc, #588]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 800706a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800706c:	4b92      	ldr	r3, [pc, #584]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 800706e:	2101      	movs	r1, #1
 8007070:	430a      	orrs	r2, r1
 8007072:	65da      	str	r2, [r3, #92]	; 0x5c
 8007074:	e01c      	b.n	80070b0 <HAL_RCC_OscConfig+0x41c>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	2b05      	cmp	r3, #5
 800707c:	d10c      	bne.n	8007098 <HAL_RCC_OscConfig+0x404>
 800707e:	4b8e      	ldr	r3, [pc, #568]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8007080:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007082:	4b8d      	ldr	r3, [pc, #564]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8007084:	2104      	movs	r1, #4
 8007086:	430a      	orrs	r2, r1
 8007088:	65da      	str	r2, [r3, #92]	; 0x5c
 800708a:	4b8b      	ldr	r3, [pc, #556]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 800708c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800708e:	4b8a      	ldr	r3, [pc, #552]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8007090:	2101      	movs	r1, #1
 8007092:	430a      	orrs	r2, r1
 8007094:	65da      	str	r2, [r3, #92]	; 0x5c
 8007096:	e00b      	b.n	80070b0 <HAL_RCC_OscConfig+0x41c>
 8007098:	4b87      	ldr	r3, [pc, #540]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 800709a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800709c:	4b86      	ldr	r3, [pc, #536]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 800709e:	2101      	movs	r1, #1
 80070a0:	438a      	bics	r2, r1
 80070a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80070a4:	4b84      	ldr	r3, [pc, #528]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 80070a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070a8:	4b83      	ldr	r3, [pc, #524]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 80070aa:	2104      	movs	r1, #4
 80070ac:	438a      	bics	r2, r1
 80070ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d014      	beq.n	80070e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b8:	f7fd fdca 	bl	8004c50 <HAL_GetTick>
 80070bc:	0003      	movs	r3, r0
 80070be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070c0:	e009      	b.n	80070d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070c2:	f7fd fdc5 	bl	8004c50 <HAL_GetTick>
 80070c6:	0002      	movs	r2, r0
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	4a7c      	ldr	r2, [pc, #496]	; (80072c0 <HAL_RCC_OscConfig+0x62c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e0ec      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070d6:	4b78      	ldr	r3, [pc, #480]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 80070d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070da:	2202      	movs	r2, #2
 80070dc:	4013      	ands	r3, r2
 80070de:	d0f0      	beq.n	80070c2 <HAL_RCC_OscConfig+0x42e>
 80070e0:	e013      	b.n	800710a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e2:	f7fd fdb5 	bl	8004c50 <HAL_GetTick>
 80070e6:	0003      	movs	r3, r0
 80070e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070ea:	e009      	b.n	8007100 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ec:	f7fd fdb0 	bl	8004c50 <HAL_GetTick>
 80070f0:	0002      	movs	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	4a72      	ldr	r2, [pc, #456]	; (80072c0 <HAL_RCC_OscConfig+0x62c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d901      	bls.n	8007100 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e0d7      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007100:	4b6d      	ldr	r3, [pc, #436]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8007102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007104:	2202      	movs	r2, #2
 8007106:	4013      	ands	r3, r2
 8007108:	d1f0      	bne.n	80070ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800710a:	231f      	movs	r3, #31
 800710c:	18fb      	adds	r3, r7, r3
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d105      	bne.n	8007120 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007114:	4b68      	ldr	r3, [pc, #416]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8007116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007118:	4b67      	ldr	r3, [pc, #412]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 800711a:	496a      	ldr	r1, [pc, #424]	; (80072c4 <HAL_RCC_OscConfig+0x630>)
 800711c:	400a      	ands	r2, r1
 800711e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d100      	bne.n	800712a <HAL_RCC_OscConfig+0x496>
 8007128:	e0c1      	b.n	80072ae <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800712a:	4b63      	ldr	r3, [pc, #396]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2238      	movs	r2, #56	; 0x38
 8007130:	4013      	ands	r3, r2
 8007132:	2b10      	cmp	r3, #16
 8007134:	d100      	bne.n	8007138 <HAL_RCC_OscConfig+0x4a4>
 8007136:	e081      	b.n	800723c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	2b02      	cmp	r3, #2
 800713e:	d156      	bne.n	80071ee <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007140:	4b5d      	ldr	r3, [pc, #372]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	4b5c      	ldr	r3, [pc, #368]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8007146:	4960      	ldr	r1, [pc, #384]	; (80072c8 <HAL_RCC_OscConfig+0x634>)
 8007148:	400a      	ands	r2, r1
 800714a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714c:	f7fd fd80 	bl	8004c50 <HAL_GetTick>
 8007150:	0003      	movs	r3, r0
 8007152:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007154:	e008      	b.n	8007168 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007156:	f7fd fd7b 	bl	8004c50 <HAL_GetTick>
 800715a:	0002      	movs	r2, r0
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b02      	cmp	r3, #2
 8007162:	d901      	bls.n	8007168 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e0a3      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007168:	4b53      	ldr	r3, [pc, #332]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	2380      	movs	r3, #128	; 0x80
 800716e:	049b      	lsls	r3, r3, #18
 8007170:	4013      	ands	r3, r2
 8007172:	d1f0      	bne.n	8007156 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007174:	4b50      	ldr	r3, [pc, #320]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	4a54      	ldr	r2, [pc, #336]	; (80072cc <HAL_RCC_OscConfig+0x638>)
 800717a:	4013      	ands	r3, r2
 800717c:	0019      	movs	r1, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1a      	ldr	r2, [r3, #32]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718c:	021b      	lsls	r3, r3, #8
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a0:	431a      	orrs	r2, r3
 80071a2:	4b45      	ldr	r3, [pc, #276]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 80071a4:	430a      	orrs	r2, r1
 80071a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071a8:	4b43      	ldr	r3, [pc, #268]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	4b42      	ldr	r3, [pc, #264]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 80071ae:	2180      	movs	r1, #128	; 0x80
 80071b0:	0449      	lsls	r1, r1, #17
 80071b2:	430a      	orrs	r2, r1
 80071b4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80071b6:	4b40      	ldr	r3, [pc, #256]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	4b3f      	ldr	r3, [pc, #252]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 80071bc:	2180      	movs	r1, #128	; 0x80
 80071be:	0549      	lsls	r1, r1, #21
 80071c0:	430a      	orrs	r2, r1
 80071c2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c4:	f7fd fd44 	bl	8004c50 <HAL_GetTick>
 80071c8:	0003      	movs	r3, r0
 80071ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071cc:	e008      	b.n	80071e0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071ce:	f7fd fd3f 	bl	8004c50 <HAL_GetTick>
 80071d2:	0002      	movs	r2, r0
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d901      	bls.n	80071e0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e067      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071e0:	4b35      	ldr	r3, [pc, #212]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	2380      	movs	r3, #128	; 0x80
 80071e6:	049b      	lsls	r3, r3, #18
 80071e8:	4013      	ands	r3, r2
 80071ea:	d0f0      	beq.n	80071ce <HAL_RCC_OscConfig+0x53a>
 80071ec:	e05f      	b.n	80072ae <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ee:	4b32      	ldr	r3, [pc, #200]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b31      	ldr	r3, [pc, #196]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 80071f4:	4934      	ldr	r1, [pc, #208]	; (80072c8 <HAL_RCC_OscConfig+0x634>)
 80071f6:	400a      	ands	r2, r1
 80071f8:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80071fa:	4b2f      	ldr	r3, [pc, #188]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	4b2e      	ldr	r3, [pc, #184]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8007200:	2103      	movs	r1, #3
 8007202:	438a      	bics	r2, r1
 8007204:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8007206:	4b2c      	ldr	r3, [pc, #176]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	4b2b      	ldr	r3, [pc, #172]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 800720c:	4930      	ldr	r1, [pc, #192]	; (80072d0 <HAL_RCC_OscConfig+0x63c>)
 800720e:	400a      	ands	r2, r1
 8007210:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007212:	f7fd fd1d 	bl	8004c50 <HAL_GetTick>
 8007216:	0003      	movs	r3, r0
 8007218:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800721c:	f7fd fd18 	bl	8004c50 <HAL_GetTick>
 8007220:	0002      	movs	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e040      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800722e:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	2380      	movs	r3, #128	; 0x80
 8007234:	049b      	lsls	r3, r3, #18
 8007236:	4013      	ands	r3, r2
 8007238:	d1f0      	bne.n	800721c <HAL_RCC_OscConfig+0x588>
 800723a:	e038      	b.n	80072ae <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e033      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007248:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <HAL_RCC_OscConfig+0x624>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2203      	movs	r2, #3
 8007252:	401a      	ands	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	429a      	cmp	r2, r3
 800725a:	d126      	bne.n	80072aa <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2270      	movs	r2, #112	; 0x70
 8007260:	401a      	ands	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007266:	429a      	cmp	r2, r3
 8007268:	d11f      	bne.n	80072aa <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	23fe      	movs	r3, #254	; 0xfe
 800726e:	01db      	lsls	r3, r3, #7
 8007270:	401a      	ands	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007276:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007278:	429a      	cmp	r2, r3
 800727a:	d116      	bne.n	80072aa <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	23f8      	movs	r3, #248	; 0xf8
 8007280:	039b      	lsls	r3, r3, #14
 8007282:	401a      	ands	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007288:	429a      	cmp	r2, r3
 800728a:	d10e      	bne.n	80072aa <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	23e0      	movs	r3, #224	; 0xe0
 8007290:	051b      	lsls	r3, r3, #20
 8007292:	401a      	ands	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007298:	429a      	cmp	r2, r3
 800729a:	d106      	bne.n	80072aa <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	0f5b      	lsrs	r3, r3, #29
 80072a0:	075a      	lsls	r2, r3, #29
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d001      	beq.n	80072ae <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	0018      	movs	r0, r3
 80072b2:	46bd      	mov	sp, r7
 80072b4:	b008      	add	sp, #32
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	40021000 	.word	0x40021000
 80072bc:	40007000 	.word	0x40007000
 80072c0:	00001388 	.word	0x00001388
 80072c4:	efffffff 	.word	0xefffffff
 80072c8:	feffffff 	.word	0xfeffffff
 80072cc:	11c1808c 	.word	0x11c1808c
 80072d0:	eefeffff 	.word	0xeefeffff

080072d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e0e9      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072e8:	4b76      	ldr	r3, [pc, #472]	; (80074c4 <HAL_RCC_ClockConfig+0x1f0>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2207      	movs	r2, #7
 80072ee:	4013      	ands	r3, r2
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d91e      	bls.n	8007334 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072f6:	4b73      	ldr	r3, [pc, #460]	; (80074c4 <HAL_RCC_ClockConfig+0x1f0>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2207      	movs	r2, #7
 80072fc:	4393      	bics	r3, r2
 80072fe:	0019      	movs	r1, r3
 8007300:	4b70      	ldr	r3, [pc, #448]	; (80074c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007308:	f7fd fca2 	bl	8004c50 <HAL_GetTick>
 800730c:	0003      	movs	r3, r0
 800730e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007310:	e009      	b.n	8007326 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007312:	f7fd fc9d 	bl	8004c50 <HAL_GetTick>
 8007316:	0002      	movs	r2, r0
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	4a6a      	ldr	r2, [pc, #424]	; (80074c8 <HAL_RCC_ClockConfig+0x1f4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e0ca      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007326:	4b67      	ldr	r3, [pc, #412]	; (80074c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2207      	movs	r2, #7
 800732c:	4013      	ands	r3, r2
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	429a      	cmp	r2, r3
 8007332:	d1ee      	bne.n	8007312 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2202      	movs	r2, #2
 800733a:	4013      	ands	r3, r2
 800733c:	d015      	beq.n	800736a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2204      	movs	r2, #4
 8007344:	4013      	ands	r3, r2
 8007346:	d006      	beq.n	8007356 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007348:	4b60      	ldr	r3, [pc, #384]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	4b5f      	ldr	r3, [pc, #380]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 800734e:	21e0      	movs	r1, #224	; 0xe0
 8007350:	01c9      	lsls	r1, r1, #7
 8007352:	430a      	orrs	r2, r1
 8007354:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007356:	4b5d      	ldr	r3, [pc, #372]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	4a5d      	ldr	r2, [pc, #372]	; (80074d0 <HAL_RCC_ClockConfig+0x1fc>)
 800735c:	4013      	ands	r3, r2
 800735e:	0019      	movs	r1, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	4b59      	ldr	r3, [pc, #356]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 8007366:	430a      	orrs	r2, r1
 8007368:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2201      	movs	r2, #1
 8007370:	4013      	ands	r3, r2
 8007372:	d057      	beq.n	8007424 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d107      	bne.n	800738c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800737c:	4b53      	ldr	r3, [pc, #332]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	2380      	movs	r3, #128	; 0x80
 8007382:	029b      	lsls	r3, r3, #10
 8007384:	4013      	ands	r3, r2
 8007386:	d12b      	bne.n	80073e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e097      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d107      	bne.n	80073a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007394:	4b4d      	ldr	r3, [pc, #308]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	2380      	movs	r3, #128	; 0x80
 800739a:	049b      	lsls	r3, r3, #18
 800739c:	4013      	ands	r3, r2
 800739e:	d11f      	bne.n	80073e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e08b      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d107      	bne.n	80073bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073ac:	4b47      	ldr	r3, [pc, #284]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	2380      	movs	r3, #128	; 0x80
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	4013      	ands	r3, r2
 80073b6:	d113      	bne.n	80073e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e07f      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d106      	bne.n	80073d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073c4:	4b41      	ldr	r3, [pc, #260]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 80073c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c8:	2202      	movs	r2, #2
 80073ca:	4013      	ands	r3, r2
 80073cc:	d108      	bne.n	80073e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e074      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073d2:	4b3e      	ldr	r3, [pc, #248]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 80073d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d6:	2202      	movs	r2, #2
 80073d8:	4013      	ands	r3, r2
 80073da:	d101      	bne.n	80073e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e06d      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073e0:	4b3a      	ldr	r3, [pc, #232]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	2207      	movs	r2, #7
 80073e6:	4393      	bics	r3, r2
 80073e8:	0019      	movs	r1, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	4b37      	ldr	r3, [pc, #220]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 80073f0:	430a      	orrs	r2, r1
 80073f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f4:	f7fd fc2c 	bl	8004c50 <HAL_GetTick>
 80073f8:	0003      	movs	r3, r0
 80073fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073fc:	e009      	b.n	8007412 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073fe:	f7fd fc27 	bl	8004c50 <HAL_GetTick>
 8007402:	0002      	movs	r2, r0
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	4a2f      	ldr	r2, [pc, #188]	; (80074c8 <HAL_RCC_ClockConfig+0x1f4>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e054      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007412:	4b2e      	ldr	r3, [pc, #184]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2238      	movs	r2, #56	; 0x38
 8007418:	401a      	ands	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	429a      	cmp	r2, r3
 8007422:	d1ec      	bne.n	80073fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007424:	4b27      	ldr	r3, [pc, #156]	; (80074c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2207      	movs	r2, #7
 800742a:	4013      	ands	r3, r2
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d21e      	bcs.n	8007470 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007432:	4b24      	ldr	r3, [pc, #144]	; (80074c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2207      	movs	r2, #7
 8007438:	4393      	bics	r3, r2
 800743a:	0019      	movs	r1, r3
 800743c:	4b21      	ldr	r3, [pc, #132]	; (80074c4 <HAL_RCC_ClockConfig+0x1f0>)
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007444:	f7fd fc04 	bl	8004c50 <HAL_GetTick>
 8007448:	0003      	movs	r3, r0
 800744a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800744c:	e009      	b.n	8007462 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800744e:	f7fd fbff 	bl	8004c50 <HAL_GetTick>
 8007452:	0002      	movs	r2, r0
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	4a1b      	ldr	r2, [pc, #108]	; (80074c8 <HAL_RCC_ClockConfig+0x1f4>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e02c      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007462:	4b18      	ldr	r3, [pc, #96]	; (80074c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2207      	movs	r2, #7
 8007468:	4013      	ands	r3, r2
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d1ee      	bne.n	800744e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2204      	movs	r2, #4
 8007476:	4013      	ands	r3, r2
 8007478:	d009      	beq.n	800748e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800747a:	4b14      	ldr	r3, [pc, #80]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	4a15      	ldr	r2, [pc, #84]	; (80074d4 <HAL_RCC_ClockConfig+0x200>)
 8007480:	4013      	ands	r3, r2
 8007482:	0019      	movs	r1, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68da      	ldr	r2, [r3, #12]
 8007488:	4b10      	ldr	r3, [pc, #64]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 800748a:	430a      	orrs	r2, r1
 800748c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800748e:	f000 f829 	bl	80074e4 <HAL_RCC_GetSysClockFreq>
 8007492:	0001      	movs	r1, r0
 8007494:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <HAL_RCC_ClockConfig+0x1f8>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	0a1b      	lsrs	r3, r3, #8
 800749a:	220f      	movs	r2, #15
 800749c:	401a      	ands	r2, r3
 800749e:	4b0e      	ldr	r3, [pc, #56]	; (80074d8 <HAL_RCC_ClockConfig+0x204>)
 80074a0:	0092      	lsls	r2, r2, #2
 80074a2:	58d3      	ldr	r3, [r2, r3]
 80074a4:	221f      	movs	r2, #31
 80074a6:	4013      	ands	r3, r2
 80074a8:	000a      	movs	r2, r1
 80074aa:	40da      	lsrs	r2, r3
 80074ac:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <HAL_RCC_ClockConfig+0x208>)
 80074ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80074b0:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <HAL_RCC_ClockConfig+0x20c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	0018      	movs	r0, r3
 80074b6:	f7fd fb71 	bl	8004b9c <HAL_InitTick>
 80074ba:	0003      	movs	r3, r0
}
 80074bc:	0018      	movs	r0, r3
 80074be:	46bd      	mov	sp, r7
 80074c0:	b004      	add	sp, #16
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	40022000 	.word	0x40022000
 80074c8:	00001388 	.word	0x00001388
 80074cc:	40021000 	.word	0x40021000
 80074d0:	fffff0ff 	.word	0xfffff0ff
 80074d4:	ffff8fff 	.word	0xffff8fff
 80074d8:	0800b3b8 	.word	0x0800b3b8
 80074dc:	20000008 	.word	0x20000008
 80074e0:	2000000c 	.word	0x2000000c

080074e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80074ea:	4b3c      	ldr	r3, [pc, #240]	; (80075dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	2238      	movs	r2, #56	; 0x38
 80074f0:	4013      	ands	r3, r2
 80074f2:	d10f      	bne.n	8007514 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80074f4:	4b39      	ldr	r3, [pc, #228]	; (80075dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	0adb      	lsrs	r3, r3, #11
 80074fa:	2207      	movs	r2, #7
 80074fc:	4013      	ands	r3, r2
 80074fe:	2201      	movs	r2, #1
 8007500:	409a      	lsls	r2, r3
 8007502:	0013      	movs	r3, r2
 8007504:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	4835      	ldr	r0, [pc, #212]	; (80075e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800750a:	f7f8 fe05 	bl	8000118 <__udivsi3>
 800750e:	0003      	movs	r3, r0
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	e05d      	b.n	80075d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007514:	4b31      	ldr	r3, [pc, #196]	; (80075dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2238      	movs	r2, #56	; 0x38
 800751a:	4013      	ands	r3, r2
 800751c:	2b08      	cmp	r3, #8
 800751e:	d102      	bne.n	8007526 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007520:	4b30      	ldr	r3, [pc, #192]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	e054      	b.n	80075d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007526:	4b2d      	ldr	r3, [pc, #180]	; (80075dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	2238      	movs	r2, #56	; 0x38
 800752c:	4013      	ands	r3, r2
 800752e:	2b10      	cmp	r3, #16
 8007530:	d138      	bne.n	80075a4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007532:	4b2a      	ldr	r3, [pc, #168]	; (80075dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2203      	movs	r2, #3
 8007538:	4013      	ands	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800753c:	4b27      	ldr	r3, [pc, #156]	; (80075dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	091b      	lsrs	r3, r3, #4
 8007542:	2207      	movs	r2, #7
 8007544:	4013      	ands	r3, r2
 8007546:	3301      	adds	r3, #1
 8007548:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b03      	cmp	r3, #3
 800754e:	d10d      	bne.n	800756c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	4824      	ldr	r0, [pc, #144]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8007554:	f7f8 fde0 	bl	8000118 <__udivsi3>
 8007558:	0003      	movs	r3, r0
 800755a:	0019      	movs	r1, r3
 800755c:	4b1f      	ldr	r3, [pc, #124]	; (80075dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	0a1b      	lsrs	r3, r3, #8
 8007562:	227f      	movs	r2, #127	; 0x7f
 8007564:	4013      	ands	r3, r2
 8007566:	434b      	muls	r3, r1
 8007568:	617b      	str	r3, [r7, #20]
        break;
 800756a:	e00d      	b.n	8007588 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800756c:	68b9      	ldr	r1, [r7, #8]
 800756e:	481c      	ldr	r0, [pc, #112]	; (80075e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007570:	f7f8 fdd2 	bl	8000118 <__udivsi3>
 8007574:	0003      	movs	r3, r0
 8007576:	0019      	movs	r1, r3
 8007578:	4b18      	ldr	r3, [pc, #96]	; (80075dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	0a1b      	lsrs	r3, r3, #8
 800757e:	227f      	movs	r2, #127	; 0x7f
 8007580:	4013      	ands	r3, r2
 8007582:	434b      	muls	r3, r1
 8007584:	617b      	str	r3, [r7, #20]
        break;
 8007586:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007588:	4b14      	ldr	r3, [pc, #80]	; (80075dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	0f5b      	lsrs	r3, r3, #29
 800758e:	2207      	movs	r2, #7
 8007590:	4013      	ands	r3, r2
 8007592:	3301      	adds	r3, #1
 8007594:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	6978      	ldr	r0, [r7, #20]
 800759a:	f7f8 fdbd 	bl	8000118 <__udivsi3>
 800759e:	0003      	movs	r3, r0
 80075a0:	613b      	str	r3, [r7, #16]
 80075a2:	e015      	b.n	80075d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80075a4:	4b0d      	ldr	r3, [pc, #52]	; (80075dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2238      	movs	r2, #56	; 0x38
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b20      	cmp	r3, #32
 80075ae:	d103      	bne.n	80075b8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80075b0:	2380      	movs	r3, #128	; 0x80
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	613b      	str	r3, [r7, #16]
 80075b6:	e00b      	b.n	80075d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80075b8:	4b08      	ldr	r3, [pc, #32]	; (80075dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	2238      	movs	r2, #56	; 0x38
 80075be:	4013      	ands	r3, r2
 80075c0:	2b18      	cmp	r3, #24
 80075c2:	d103      	bne.n	80075cc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80075c4:	23fa      	movs	r3, #250	; 0xfa
 80075c6:	01db      	lsls	r3, r3, #7
 80075c8:	613b      	str	r3, [r7, #16]
 80075ca:	e001      	b.n	80075d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80075d0:	693b      	ldr	r3, [r7, #16]
}
 80075d2:	0018      	movs	r0, r3
 80075d4:	46bd      	mov	sp, r7
 80075d6:	b006      	add	sp, #24
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	40021000 	.word	0x40021000
 80075e0:	00f42400 	.word	0x00f42400
 80075e4:	007a1200 	.word	0x007a1200

080075e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075ec:	4b02      	ldr	r3, [pc, #8]	; (80075f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80075ee:	681b      	ldr	r3, [r3, #0]
}
 80075f0:	0018      	movs	r0, r3
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	46c0      	nop			; (mov r8, r8)
 80075f8:	20000008 	.word	0x20000008

080075fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075fc:	b5b0      	push	{r4, r5, r7, lr}
 80075fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007600:	f7ff fff2 	bl	80075e8 <HAL_RCC_GetHCLKFreq>
 8007604:	0004      	movs	r4, r0
 8007606:	f7ff fb39 	bl	8006c7c <LL_RCC_GetAPB1Prescaler>
 800760a:	0003      	movs	r3, r0
 800760c:	0b1a      	lsrs	r2, r3, #12
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007610:	0092      	lsls	r2, r2, #2
 8007612:	58d3      	ldr	r3, [r2, r3]
 8007614:	221f      	movs	r2, #31
 8007616:	4013      	ands	r3, r2
 8007618:	40dc      	lsrs	r4, r3
 800761a:	0023      	movs	r3, r4
}
 800761c:	0018      	movs	r0, r3
 800761e:	46bd      	mov	sp, r7
 8007620:	bdb0      	pop	{r4, r5, r7, pc}
 8007622:	46c0      	nop			; (mov r8, r8)
 8007624:	0800b3f8 	.word	0x0800b3f8

08007628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007630:	2313      	movs	r3, #19
 8007632:	18fb      	adds	r3, r7, r3
 8007634:	2200      	movs	r2, #0
 8007636:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007638:	2312      	movs	r3, #18
 800763a:	18fb      	adds	r3, r7, r3
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	2380      	movs	r3, #128	; 0x80
 8007646:	029b      	lsls	r3, r3, #10
 8007648:	4013      	ands	r3, r2
 800764a:	d100      	bne.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800764c:	e0a4      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800764e:	2311      	movs	r3, #17
 8007650:	18fb      	adds	r3, r7, r3
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007656:	4bc3      	ldr	r3, [pc, #780]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800765a:	2380      	movs	r3, #128	; 0x80
 800765c:	055b      	lsls	r3, r3, #21
 800765e:	4013      	ands	r3, r2
 8007660:	d111      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007662:	4bc0      	ldr	r3, [pc, #768]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007666:	4bbf      	ldr	r3, [pc, #764]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007668:	2180      	movs	r1, #128	; 0x80
 800766a:	0549      	lsls	r1, r1, #21
 800766c:	430a      	orrs	r2, r1
 800766e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007670:	4bbc      	ldr	r3, [pc, #752]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	055b      	lsls	r3, r3, #21
 8007678:	4013      	ands	r3, r2
 800767a:	60bb      	str	r3, [r7, #8]
 800767c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800767e:	2311      	movs	r3, #17
 8007680:	18fb      	adds	r3, r7, r3
 8007682:	2201      	movs	r2, #1
 8007684:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007686:	4bb8      	ldr	r3, [pc, #736]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	4bb7      	ldr	r3, [pc, #732]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800768c:	2180      	movs	r1, #128	; 0x80
 800768e:	0049      	lsls	r1, r1, #1
 8007690:	430a      	orrs	r2, r1
 8007692:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007694:	f7fd fadc 	bl	8004c50 <HAL_GetTick>
 8007698:	0003      	movs	r3, r0
 800769a:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800769c:	e00b      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800769e:	f7fd fad7 	bl	8004c50 <HAL_GetTick>
 80076a2:	0002      	movs	r2, r0
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d904      	bls.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80076ac:	2313      	movs	r3, #19
 80076ae:	18fb      	adds	r3, r7, r3
 80076b0:	2203      	movs	r2, #3
 80076b2:	701a      	strb	r2, [r3, #0]
        break;
 80076b4:	e005      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076b6:	4bac      	ldr	r3, [pc, #688]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	2380      	movs	r3, #128	; 0x80
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	4013      	ands	r3, r2
 80076c0:	d0ed      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80076c2:	2313      	movs	r3, #19
 80076c4:	18fb      	adds	r3, r7, r3
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d154      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80076cc:	4ba5      	ldr	r3, [pc, #660]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80076ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076d0:	23c0      	movs	r3, #192	; 0xc0
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4013      	ands	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d019      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d014      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80076e8:	4b9e      	ldr	r3, [pc, #632]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80076ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ec:	4a9f      	ldr	r2, [pc, #636]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80076ee:	4013      	ands	r3, r2
 80076f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076f2:	4b9c      	ldr	r3, [pc, #624]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80076f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076f6:	4b9b      	ldr	r3, [pc, #620]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80076f8:	2180      	movs	r1, #128	; 0x80
 80076fa:	0249      	lsls	r1, r1, #9
 80076fc:	430a      	orrs	r2, r1
 80076fe:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007700:	4b98      	ldr	r3, [pc, #608]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007702:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007704:	4b97      	ldr	r3, [pc, #604]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007706:	499a      	ldr	r1, [pc, #616]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007708:	400a      	ands	r2, r1
 800770a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800770c:	4b95      	ldr	r3, [pc, #596]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2201      	movs	r2, #1
 8007716:	4013      	ands	r3, r2
 8007718:	d016      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771a:	f7fd fa99 	bl	8004c50 <HAL_GetTick>
 800771e:	0003      	movs	r3, r0
 8007720:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007722:	e00c      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007724:	f7fd fa94 	bl	8004c50 <HAL_GetTick>
 8007728:	0002      	movs	r2, r0
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	4a91      	ldr	r2, [pc, #580]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d904      	bls.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8007734:	2313      	movs	r3, #19
 8007736:	18fb      	adds	r3, r7, r3
 8007738:	2203      	movs	r2, #3
 800773a:	701a      	strb	r2, [r3, #0]
            break;
 800773c:	e004      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800773e:	4b89      	ldr	r3, [pc, #548]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007742:	2202      	movs	r2, #2
 8007744:	4013      	ands	r3, r2
 8007746:	d0ed      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8007748:	2313      	movs	r3, #19
 800774a:	18fb      	adds	r3, r7, r3
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10a      	bne.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007752:	4b84      	ldr	r3, [pc, #528]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007756:	4a85      	ldr	r2, [pc, #532]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007758:	4013      	ands	r3, r2
 800775a:	0019      	movs	r1, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007760:	4b80      	ldr	r3, [pc, #512]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007762:	430a      	orrs	r2, r1
 8007764:	65da      	str	r2, [r3, #92]	; 0x5c
 8007766:	e00c      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007768:	2312      	movs	r3, #18
 800776a:	18fb      	adds	r3, r7, r3
 800776c:	2213      	movs	r2, #19
 800776e:	18ba      	adds	r2, r7, r2
 8007770:	7812      	ldrb	r2, [r2, #0]
 8007772:	701a      	strb	r2, [r3, #0]
 8007774:	e005      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007776:	2312      	movs	r3, #18
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	2213      	movs	r2, #19
 800777c:	18ba      	adds	r2, r7, r2
 800777e:	7812      	ldrb	r2, [r2, #0]
 8007780:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007782:	2311      	movs	r3, #17
 8007784:	18fb      	adds	r3, r7, r3
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d105      	bne.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800778c:	4b75      	ldr	r3, [pc, #468]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800778e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007790:	4b74      	ldr	r3, [pc, #464]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007792:	4979      	ldr	r1, [pc, #484]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8007794:	400a      	ands	r2, r1
 8007796:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2201      	movs	r2, #1
 800779e:	4013      	ands	r3, r2
 80077a0:	d009      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077a2:	4b70      	ldr	r3, [pc, #448]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a6:	2203      	movs	r2, #3
 80077a8:	4393      	bics	r3, r2
 80077aa:	0019      	movs	r1, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	4b6c      	ldr	r3, [pc, #432]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077b2:	430a      	orrs	r2, r1
 80077b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2202      	movs	r2, #2
 80077bc:	4013      	ands	r3, r2
 80077be:	d009      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077c0:	4b68      	ldr	r3, [pc, #416]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c4:	220c      	movs	r2, #12
 80077c6:	4393      	bics	r3, r2
 80077c8:	0019      	movs	r1, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	4b65      	ldr	r3, [pc, #404]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077d0:	430a      	orrs	r2, r1
 80077d2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2220      	movs	r2, #32
 80077da:	4013      	ands	r3, r2
 80077dc:	d009      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077de:	4b61      	ldr	r3, [pc, #388]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e2:	4a66      	ldr	r2, [pc, #408]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	0019      	movs	r1, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	4b5d      	ldr	r3, [pc, #372]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077ee:	430a      	orrs	r2, r1
 80077f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	2380      	movs	r3, #128	; 0x80
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4013      	ands	r3, r2
 80077fc:	d009      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077fe:	4b59      	ldr	r3, [pc, #356]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007802:	4a5f      	ldr	r2, [pc, #380]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007804:	4013      	ands	r3, r2
 8007806:	0019      	movs	r1, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	4b55      	ldr	r3, [pc, #340]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800780e:	430a      	orrs	r2, r1
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	2380      	movs	r3, #128	; 0x80
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4013      	ands	r3, r2
 800781c:	d009      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800781e:	4b51      	ldr	r3, [pc, #324]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007822:	4a58      	ldr	r2, [pc, #352]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007824:	4013      	ands	r3, r2
 8007826:	0019      	movs	r1, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	69da      	ldr	r2, [r3, #28]
 800782c:	4b4d      	ldr	r3, [pc, #308]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800782e:	430a      	orrs	r2, r1
 8007830:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2240      	movs	r2, #64	; 0x40
 8007838:	4013      	ands	r3, r2
 800783a:	d009      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800783c:	4b49      	ldr	r3, [pc, #292]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800783e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007840:	4a51      	ldr	r2, [pc, #324]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8007842:	4013      	ands	r3, r2
 8007844:	0019      	movs	r1, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691a      	ldr	r2, [r3, #16]
 800784a:	4b46      	ldr	r3, [pc, #280]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800784c:	430a      	orrs	r2, r1
 800784e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	2380      	movs	r3, #128	; 0x80
 8007856:	01db      	lsls	r3, r3, #7
 8007858:	4013      	ands	r3, r2
 800785a:	d015      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800785c:	4b41      	ldr	r3, [pc, #260]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800785e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	0899      	lsrs	r1, r3, #2
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1a      	ldr	r2, [r3, #32]
 8007868:	4b3e      	ldr	r3, [pc, #248]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800786a:	430a      	orrs	r2, r1
 800786c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1a      	ldr	r2, [r3, #32]
 8007872:	2380      	movs	r3, #128	; 0x80
 8007874:	05db      	lsls	r3, r3, #23
 8007876:	429a      	cmp	r2, r3
 8007878:	d106      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800787a:	4b3a      	ldr	r3, [pc, #232]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	4b39      	ldr	r3, [pc, #228]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007880:	2180      	movs	r1, #128	; 0x80
 8007882:	0249      	lsls	r1, r1, #9
 8007884:	430a      	orrs	r2, r1
 8007886:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	2380      	movs	r3, #128	; 0x80
 800788e:	031b      	lsls	r3, r3, #12
 8007890:	4013      	ands	r3, r2
 8007892:	d009      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007894:	4b33      	ldr	r3, [pc, #204]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007898:	2240      	movs	r2, #64	; 0x40
 800789a:	4393      	bics	r3, r2
 800789c:	0019      	movs	r1, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078a2:	4b30      	ldr	r3, [pc, #192]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078a4:	430a      	orrs	r2, r1
 80078a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	2380      	movs	r3, #128	; 0x80
 80078ae:	039b      	lsls	r3, r3, #14
 80078b0:	4013      	ands	r3, r2
 80078b2:	d016      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80078b4:	4b2b      	ldr	r3, [pc, #172]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b8:	4a34      	ldr	r2, [pc, #208]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	0019      	movs	r1, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078c2:	4b28      	ldr	r3, [pc, #160]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078c4:	430a      	orrs	r2, r1
 80078c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078cc:	2380      	movs	r3, #128	; 0x80
 80078ce:	03db      	lsls	r3, r3, #15
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d106      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80078d4:	4b23      	ldr	r3, [pc, #140]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	4b22      	ldr	r3, [pc, #136]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078da:	2180      	movs	r1, #128	; 0x80
 80078dc:	0449      	lsls	r1, r1, #17
 80078de:	430a      	orrs	r2, r1
 80078e0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	2380      	movs	r3, #128	; 0x80
 80078e8:	03db      	lsls	r3, r3, #15
 80078ea:	4013      	ands	r3, r2
 80078ec:	d016      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80078ee:	4b1d      	ldr	r3, [pc, #116]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	4a27      	ldr	r2, [pc, #156]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	0019      	movs	r1, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078fe:	430a      	orrs	r2, r1
 8007900:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	2380      	movs	r3, #128	; 0x80
 8007908:	045b      	lsls	r3, r3, #17
 800790a:	429a      	cmp	r2, r3
 800790c:	d106      	bne.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800790e:	4b15      	ldr	r3, [pc, #84]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007914:	2180      	movs	r1, #128	; 0x80
 8007916:	0449      	lsls	r1, r1, #17
 8007918:	430a      	orrs	r2, r1
 800791a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	4013      	ands	r3, r2
 8007926:	d016      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007928:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800792a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792c:	4a19      	ldr	r2, [pc, #100]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800792e:	4013      	ands	r3, r2
 8007930:	0019      	movs	r1, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695a      	ldr	r2, [r3, #20]
 8007936:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007938:	430a      	orrs	r2, r1
 800793a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	695a      	ldr	r2, [r3, #20]
 8007940:	2380      	movs	r3, #128	; 0x80
 8007942:	01db      	lsls	r3, r3, #7
 8007944:	429a      	cmp	r2, r3
 8007946:	d106      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	4b05      	ldr	r3, [pc, #20]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800794e:	2180      	movs	r1, #128	; 0x80
 8007950:	0249      	lsls	r1, r1, #9
 8007952:	430a      	orrs	r2, r1
 8007954:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8007956:	2312      	movs	r3, #18
 8007958:	18fb      	adds	r3, r7, r3
 800795a:	781b      	ldrb	r3, [r3, #0]
}
 800795c:	0018      	movs	r0, r3
 800795e:	46bd      	mov	sp, r7
 8007960:	b006      	add	sp, #24
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40021000 	.word	0x40021000
 8007968:	40007000 	.word	0x40007000
 800796c:	fffffcff 	.word	0xfffffcff
 8007970:	fffeffff 	.word	0xfffeffff
 8007974:	00001388 	.word	0x00001388
 8007978:	efffffff 	.word	0xefffffff
 800797c:	fffff3ff 	.word	0xfffff3ff
 8007980:	fff3ffff 	.word	0xfff3ffff
 8007984:	ffcfffff 	.word	0xffcfffff
 8007988:	ffffcfff 	.word	0xffffcfff
 800798c:	ffbfffff 	.word	0xffbfffff
 8007990:	feffffff 	.word	0xfeffffff
 8007994:	ffff3fff 	.word	0xffff3fff

08007998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e046      	b.n	8007a38 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2280      	movs	r2, #128	; 0x80
 80079ae:	589b      	ldr	r3, [r3, r2]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d107      	bne.n	80079c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	227c      	movs	r2, #124	; 0x7c
 80079b8:	2100      	movs	r1, #0
 80079ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	0018      	movs	r0, r3
 80079c0:	f7fc fed4 	bl	800476c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2280      	movs	r2, #128	; 0x80
 80079c8:	2124      	movs	r1, #36	; 0x24
 80079ca:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2101      	movs	r1, #1
 80079d8:	438a      	bics	r2, r1
 80079da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	0018      	movs	r0, r3
 80079e0:	f000 fb8a 	bl	80080f8 <UART_SetConfig>
 80079e4:	0003      	movs	r3, r0
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d101      	bne.n	80079ee <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e024      	b.n	8007a38 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	0018      	movs	r0, r3
 80079fa:	f001 fc71 	bl	80092e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	490d      	ldr	r1, [pc, #52]	; (8007a40 <HAL_UART_Init+0xa8>)
 8007a0a:	400a      	ands	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	212a      	movs	r1, #42	; 0x2a
 8007a1a:	438a      	bics	r2, r1
 8007a1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2101      	movs	r1, #1
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	0018      	movs	r0, r3
 8007a32:	f001 fd09 	bl	8009448 <UART_CheckIdleState>
 8007a36:	0003      	movs	r3, r0
}
 8007a38:	0018      	movs	r0, r3
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	b002      	add	sp, #8
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	ffffb7ff 	.word	0xffffb7ff

08007a44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08a      	sub	sp, #40	; 0x28
 8007a48:	af02      	add	r7, sp, #8
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	1dbb      	adds	r3, r7, #6
 8007a52:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2280      	movs	r2, #128	; 0x80
 8007a58:	589b      	ldr	r3, [r3, r2]
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	d000      	beq.n	8007a60 <HAL_UART_Transmit+0x1c>
 8007a5e:	e097      	b.n	8007b90 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_UART_Transmit+0x2a>
 8007a66:	1dbb      	adds	r3, r7, #6
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e08f      	b.n	8007b92 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	2380      	movs	r3, #128	; 0x80
 8007a78:	015b      	lsls	r3, r3, #5
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d109      	bne.n	8007a92 <HAL_UART_Transmit+0x4e>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d105      	bne.n	8007a92 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	d001      	beq.n	8007a92 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e07f      	b.n	8007b92 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	227c      	movs	r2, #124	; 0x7c
 8007a96:	5c9b      	ldrb	r3, [r3, r2]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d101      	bne.n	8007aa0 <HAL_UART_Transmit+0x5c>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e078      	b.n	8007b92 <HAL_UART_Transmit+0x14e>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	227c      	movs	r2, #124	; 0x7c
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2288      	movs	r2, #136	; 0x88
 8007aac:	2100      	movs	r1, #0
 8007aae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2280      	movs	r2, #128	; 0x80
 8007ab4:	2121      	movs	r1, #33	; 0x21
 8007ab6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007ab8:	f7fd f8ca 	bl	8004c50 <HAL_GetTick>
 8007abc:	0003      	movs	r3, r0
 8007abe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	1dba      	adds	r2, r7, #6
 8007ac4:	2154      	movs	r1, #84	; 0x54
 8007ac6:	8812      	ldrh	r2, [r2, #0]
 8007ac8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	1dba      	adds	r2, r7, #6
 8007ace:	2156      	movs	r1, #86	; 0x56
 8007ad0:	8812      	ldrh	r2, [r2, #0]
 8007ad2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	2380      	movs	r3, #128	; 0x80
 8007ada:	015b      	lsls	r3, r3, #5
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d108      	bne.n	8007af2 <HAL_UART_Transmit+0xae>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	61bb      	str	r3, [r7, #24]
 8007af0:	e003      	b.n	8007afa <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007af6:	2300      	movs	r3, #0
 8007af8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007afa:	e02c      	b.n	8007b56 <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	0013      	movs	r3, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	2180      	movs	r1, #128	; 0x80
 8007b0a:	f001 fce7 	bl	80094dc <UART_WaitOnFlagUntilTimeout>
 8007b0e:	1e03      	subs	r3, r0, #0
 8007b10:	d001      	beq.n	8007b16 <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e03d      	b.n	8007b92 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10b      	bne.n	8007b34 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	001a      	movs	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	05d2      	lsls	r2, r2, #23
 8007b28:	0dd2      	lsrs	r2, r2, #23
 8007b2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	3302      	adds	r3, #2
 8007b30:	61bb      	str	r3, [r7, #24]
 8007b32:	e007      	b.n	8007b44 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	3301      	adds	r3, #1
 8007b42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2256      	movs	r2, #86	; 0x56
 8007b48:	5a9b      	ldrh	r3, [r3, r2]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	b299      	uxth	r1, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2256      	movs	r2, #86	; 0x56
 8007b54:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2256      	movs	r2, #86	; 0x56
 8007b5a:	5a9b      	ldrh	r3, [r3, r2]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1cc      	bne.n	8007afc <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	0013      	movs	r3, r2
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2140      	movs	r1, #64	; 0x40
 8007b70:	f001 fcb4 	bl	80094dc <UART_WaitOnFlagUntilTimeout>
 8007b74:	1e03      	subs	r3, r0, #0
 8007b76:	d001      	beq.n	8007b7c <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e00a      	b.n	8007b92 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2280      	movs	r2, #128	; 0x80
 8007b80:	2120      	movs	r1, #32
 8007b82:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	227c      	movs	r2, #124	; 0x7c
 8007b88:	2100      	movs	r1, #0
 8007b8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	e000      	b.n	8007b92 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8007b90:	2302      	movs	r3, #2
  }
}
 8007b92:	0018      	movs	r0, r3
 8007b94:	46bd      	mov	sp, r7
 8007b96:	b008      	add	sp, #32
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	1dbb      	adds	r3, r7, #6
 8007ba8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2280      	movs	r2, #128	; 0x80
 8007bae:	589b      	ldr	r3, [r3, r2]
 8007bb0:	2b20      	cmp	r3, #32
 8007bb2:	d000      	beq.n	8007bb6 <HAL_UART_Transmit_DMA+0x1a>
 8007bb4:	e07b      	b.n	8007cae <HAL_UART_Transmit_DMA+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <HAL_UART_Transmit_DMA+0x28>
 8007bbc:	1dbb      	adds	r3, r7, #6
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e073      	b.n	8007cb0 <HAL_UART_Transmit_DMA+0x114>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	2380      	movs	r3, #128	; 0x80
 8007bce:	015b      	lsls	r3, r3, #5
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d109      	bne.n	8007be8 <HAL_UART_Transmit_DMA+0x4c>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d105      	bne.n	8007be8 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2201      	movs	r2, #1
 8007be0:	4013      	ands	r3, r2
 8007be2:	d001      	beq.n	8007be8 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e063      	b.n	8007cb0 <HAL_UART_Transmit_DMA+0x114>
      }
    }

    __HAL_LOCK(huart);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	227c      	movs	r2, #124	; 0x7c
 8007bec:	5c9b      	ldrb	r3, [r3, r2]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_UART_Transmit_DMA+0x5a>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e05c      	b.n	8007cb0 <HAL_UART_Transmit_DMA+0x114>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	227c      	movs	r2, #124	; 0x7c
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	1dba      	adds	r2, r7, #6
 8007c08:	2154      	movs	r1, #84	; 0x54
 8007c0a:	8812      	ldrh	r2, [r2, #0]
 8007c0c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1dba      	adds	r2, r7, #6
 8007c12:	2156      	movs	r1, #86	; 0x56
 8007c14:	8812      	ldrh	r2, [r2, #0]
 8007c16:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2288      	movs	r2, #136	; 0x88
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2280      	movs	r2, #128	; 0x80
 8007c24:	2121      	movs	r1, #33	; 0x21
 8007c26:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d02c      	beq.n	8007c8a <HAL_UART_Transmit_DMA+0xee>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c34:	4a20      	ldr	r2, [pc, #128]	; (8007cb8 <HAL_UART_Transmit_DMA+0x11c>)
 8007c36:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c3c:	4a1f      	ldr	r2, [pc, #124]	; (8007cbc <HAL_UART_Transmit_DMA+0x120>)
 8007c3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c44:	4a1e      	ldr	r2, [pc, #120]	; (8007cc0 <HAL_UART_Transmit_DMA+0x124>)
 8007c46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c58:	0019      	movs	r1, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3328      	adds	r3, #40	; 0x28
 8007c60:	001a      	movs	r2, r3
 8007c62:	1dbb      	adds	r3, r7, #6
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	f7fe fb51 	bl	800630c <HAL_DMA_Start_IT>
 8007c6a:	1e03      	subs	r3, r0, #0
 8007c6c:	d00d      	beq.n	8007c8a <HAL_UART_Transmit_DMA+0xee>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2288      	movs	r2, #136	; 0x88
 8007c72:	2110      	movs	r1, #16
 8007c74:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	227c      	movs	r2, #124	; 0x7c
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2280      	movs	r2, #128	; 0x80
 8007c82:	2120      	movs	r1, #32
 8007c84:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e012      	b.n	8007cb0 <HAL_UART_Transmit_DMA+0x114>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2240      	movs	r2, #64	; 0x40
 8007c90:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	227c      	movs	r2, #124	; 0x7c
 8007c96:	2100      	movs	r1, #0
 8007c98:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2180      	movs	r1, #128	; 0x80
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	e000      	b.n	8007cb0 <HAL_UART_Transmit_DMA+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007cae:	2302      	movs	r3, #2
  }
}
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	b004      	add	sp, #16
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	080095f9 	.word	0x080095f9
 8007cbc:	0800964d 	.word	0x0800964d
 8007cc0:	080096fb 	.word	0x080096fb

08007cc4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	1dbb      	adds	r3, r7, #6
 8007cd0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2284      	movs	r2, #132	; 0x84
 8007cd6:	589b      	ldr	r3, [r3, r2]
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d000      	beq.n	8007cde <HAL_UART_Receive_DMA+0x1a>
 8007cdc:	e083      	b.n	8007de6 <HAL_UART_Receive_DMA+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <HAL_UART_Receive_DMA+0x28>
 8007ce4:	1dbb      	adds	r3, r7, #6
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <HAL_UART_Receive_DMA+0x2c>
    {
      return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e07b      	b.n	8007de8 <HAL_UART_Receive_DMA+0x124>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	2380      	movs	r3, #128	; 0x80
 8007cf6:	015b      	lsls	r3, r3, #5
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d109      	bne.n	8007d10 <HAL_UART_Receive_DMA+0x4c>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d105      	bne.n	8007d10 <HAL_UART_Receive_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2201      	movs	r2, #1
 8007d08:	4013      	ands	r3, r2
 8007d0a:	d001      	beq.n	8007d10 <HAL_UART_Receive_DMA+0x4c>
      {
        return  HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e06b      	b.n	8007de8 <HAL_UART_Receive_DMA+0x124>
      }
    }

    __HAL_LOCK(huart);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	227c      	movs	r2, #124	; 0x7c
 8007d14:	5c9b      	ldrb	r3, [r3, r2]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d101      	bne.n	8007d1e <HAL_UART_Receive_DMA+0x5a>
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e064      	b.n	8007de8 <HAL_UART_Receive_DMA+0x124>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	227c      	movs	r2, #124	; 0x7c
 8007d22:	2101      	movs	r1, #1
 8007d24:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	1dba      	adds	r2, r7, #6
 8007d30:	215c      	movs	r1, #92	; 0x5c
 8007d32:	8812      	ldrh	r2, [r2, #0]
 8007d34:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2288      	movs	r2, #136	; 0x88
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2284      	movs	r2, #132	; 0x84
 8007d42:	2122      	movs	r1, #34	; 0x22
 8007d44:	5099      	str	r1, [r3, r2]

    if (huart->hdmarx != NULL)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d02c      	beq.n	8007da8 <HAL_UART_Receive_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d52:	4a27      	ldr	r2, [pc, #156]	; (8007df0 <HAL_UART_Receive_DMA+0x12c>)
 8007d54:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d5a:	4a26      	ldr	r2, [pc, #152]	; (8007df4 <HAL_UART_Receive_DMA+0x130>)
 8007d5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d62:	4a25      	ldr	r2, [pc, #148]	; (8007df8 <HAL_UART_Receive_DMA+0x134>)
 8007d64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3324      	adds	r3, #36	; 0x24
 8007d78:	0019      	movs	r1, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7e:	001a      	movs	r2, r3
 8007d80:	1dbb      	adds	r3, r7, #6
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	f7fe fac2 	bl	800630c <HAL_DMA_Start_IT>
 8007d88:	1e03      	subs	r3, r0, #0
 8007d8a:	d00d      	beq.n	8007da8 <HAL_UART_Receive_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2288      	movs	r2, #136	; 0x88
 8007d90:	2110      	movs	r1, #16
 8007d92:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	227c      	movs	r2, #124	; 0x7c
 8007d98:	2100      	movs	r1, #0
 8007d9a:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2280      	movs	r2, #128	; 0x80
 8007da0:	2120      	movs	r1, #32
 8007da2:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e01f      	b.n	8007de8 <HAL_UART_Receive_DMA+0x124>
      }
    }
    __HAL_UNLOCK(huart);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	227c      	movs	r2, #124	; 0x7c
 8007dac:	2100      	movs	r1, #0
 8007dae:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2180      	movs	r1, #128	; 0x80
 8007dbc:	0049      	lsls	r1, r1, #1
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2101      	movs	r1, #1
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2140      	movs	r1, #64	; 0x40
 8007dde:	430a      	orrs	r2, r1
 8007de0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	e000      	b.n	8007de8 <HAL_UART_Receive_DMA+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007de6:	2302      	movs	r3, #2
  }
}
 8007de8:	0018      	movs	r0, r3
 8007dea:	46bd      	mov	sp, r7
 8007dec:	b004      	add	sp, #16
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	0800966d 	.word	0x0800966d
 8007df4:	080096dd 	.word	0x080096dd
 8007df8:	080096fb 	.word	0x080096fb

08007dfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	220f      	movs	r2, #15
 8007e20:	4013      	ands	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d117      	bne.n	8007e5a <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	4013      	ands	r3, r2
 8007e30:	d013      	beq.n	8007e5a <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	2220      	movs	r2, #32
 8007e36:	4013      	ands	r3, r2
 8007e38:	d104      	bne.n	8007e44 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	2380      	movs	r3, #128	; 0x80
 8007e3e:	055b      	lsls	r3, r3, #21
 8007e40:	4013      	ands	r3, r2
 8007e42:	d00a      	beq.n	8007e5a <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d100      	bne.n	8007e4e <HAL_UART_IRQHandler+0x52>
 8007e4c:	e127      	b.n	800809e <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	0010      	movs	r0, r2
 8007e56:	4798      	blx	r3
      }
      return;
 8007e58:	e121      	b.n	800809e <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d100      	bne.n	8007e62 <HAL_UART_IRQHandler+0x66>
 8007e60:	e0c8      	b.n	8007ff4 <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	4a92      	ldr	r2, [pc, #584]	; (80080b0 <HAL_UART_IRQHandler+0x2b4>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	d105      	bne.n	8007e76 <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	2390      	movs	r3, #144	; 0x90
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	4013      	ands	r3, r2
 8007e72:	d100      	bne.n	8007e76 <HAL_UART_IRQHandler+0x7a>
 8007e74:	e0be      	b.n	8007ff4 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	d010      	beq.n	8007ea0 <HAL_UART_IRQHandler+0xa4>
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	2380      	movs	r3, #128	; 0x80
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	4013      	ands	r3, r2
 8007e86:	d00b      	beq.n	8007ea0 <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2288      	movs	r2, #136	; 0x88
 8007e94:	589b      	ldr	r3, [r3, r2]
 8007e96:	2201      	movs	r2, #1
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2188      	movs	r1, #136	; 0x88
 8007e9e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	d00f      	beq.n	8007ec8 <HAL_UART_IRQHandler+0xcc>
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	4013      	ands	r3, r2
 8007eae:	d00b      	beq.n	8007ec8 <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2288      	movs	r2, #136	; 0x88
 8007ebc:	589b      	ldr	r3, [r3, r2]
 8007ebe:	2204      	movs	r2, #4
 8007ec0:	431a      	orrs	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2188      	movs	r1, #136	; 0x88
 8007ec6:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	2204      	movs	r2, #4
 8007ecc:	4013      	ands	r3, r2
 8007ece:	d00f      	beq.n	8007ef0 <HAL_UART_IRQHandler+0xf4>
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	d00b      	beq.n	8007ef0 <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2204      	movs	r2, #4
 8007ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2288      	movs	r2, #136	; 0x88
 8007ee4:	589b      	ldr	r3, [r3, r2]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2188      	movs	r1, #136	; 0x88
 8007eee:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	2208      	movs	r2, #8
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	d013      	beq.n	8007f20 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	2220      	movs	r2, #32
 8007efc:	4013      	ands	r3, r2
 8007efe:	d103      	bne.n	8007f08 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	4a6b      	ldr	r2, [pc, #428]	; (80080b0 <HAL_UART_IRQHandler+0x2b4>)
 8007f04:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f06:	d00b      	beq.n	8007f20 <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2288      	movs	r2, #136	; 0x88
 8007f14:	589b      	ldr	r3, [r3, r2]
 8007f16:	2208      	movs	r2, #8
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2188      	movs	r1, #136	; 0x88
 8007f1e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2288      	movs	r2, #136	; 0x88
 8007f24:	589b      	ldr	r3, [r3, r2]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d100      	bne.n	8007f2c <HAL_UART_IRQHandler+0x130>
 8007f2a:	e0ba      	b.n	80080a2 <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	4013      	ands	r3, r2
 8007f32:	d011      	beq.n	8007f58 <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	2220      	movs	r2, #32
 8007f38:	4013      	ands	r3, r2
 8007f3a:	d104      	bne.n	8007f46 <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	2380      	movs	r3, #128	; 0x80
 8007f40:	055b      	lsls	r3, r3, #21
 8007f42:	4013      	ands	r3, r2
 8007f44:	d008      	beq.n	8007f58 <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d004      	beq.n	8007f58 <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	0010      	movs	r0, r2
 8007f56:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2288      	movs	r2, #136	; 0x88
 8007f5c:	589b      	ldr	r3, [r3, r2]
 8007f5e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	2240      	movs	r2, #64	; 0x40
 8007f68:	4013      	ands	r3, r2
 8007f6a:	2b40      	cmp	r3, #64	; 0x40
 8007f6c:	d003      	beq.n	8007f76 <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2208      	movs	r2, #8
 8007f72:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f74:	d033      	beq.n	8007fde <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	0018      	movs	r0, r3
 8007f7a:	f001 fb19 	bl	80095b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	2240      	movs	r2, #64	; 0x40
 8007f86:	4013      	ands	r3, r2
 8007f88:	2b40      	cmp	r3, #64	; 0x40
 8007f8a:	d123      	bne.n	8007fd4 <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2140      	movs	r1, #64	; 0x40
 8007f98:	438a      	bics	r2, r1
 8007f9a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d012      	beq.n	8007fca <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa8:	4a42      	ldr	r2, [pc, #264]	; (80080b4 <HAL_UART_IRQHandler+0x2b8>)
 8007faa:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	f7fe fa95 	bl	80064e0 <HAL_DMA_Abort_IT>
 8007fb6:	1e03      	subs	r3, r0, #0
 8007fb8:	d01a      	beq.n	8007ff0 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc8:	e012      	b.n	8007ff0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	0018      	movs	r0, r3
 8007fce:	f000 f88b 	bl	80080e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd2:	e00d      	b.n	8007ff0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	f000 f886 	bl	80080e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fdc:	e008      	b.n	8007ff0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	f000 f881 	bl	80080e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2288      	movs	r2, #136	; 0x88
 8007fea:	2100      	movs	r1, #0
 8007fec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007fee:	e058      	b.n	80080a2 <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff0:	46c0      	nop			; (mov r8, r8)
    return;
 8007ff2:	e056      	b.n	80080a2 <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	2380      	movs	r3, #128	; 0x80
 8007ff8:	035b      	lsls	r3, r3, #13
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	d00e      	beq.n	800801c <HAL_UART_IRQHandler+0x220>
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	2380      	movs	r3, #128	; 0x80
 8008002:	03db      	lsls	r3, r3, #15
 8008004:	4013      	ands	r3, r2
 8008006:	d009      	beq.n	800801c <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2280      	movs	r2, #128	; 0x80
 800800e:	0352      	lsls	r2, r2, #13
 8008010:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	0018      	movs	r0, r3
 8008016:	f001 fbe5 	bl	80097e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800801a:	e045      	b.n	80080a8 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	2280      	movs	r2, #128	; 0x80
 8008020:	4013      	ands	r3, r2
 8008022:	d012      	beq.n	800804a <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	2280      	movs	r2, #128	; 0x80
 8008028:	4013      	ands	r3, r2
 800802a:	d104      	bne.n	8008036 <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	2380      	movs	r3, #128	; 0x80
 8008030:	041b      	lsls	r3, r3, #16
 8008032:	4013      	ands	r3, r2
 8008034:	d009      	beq.n	800804a <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803a:	2b00      	cmp	r3, #0
 800803c:	d033      	beq.n	80080a6 <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	0010      	movs	r0, r2
 8008046:	4798      	blx	r3
    }
    return;
 8008048:	e02d      	b.n	80080a6 <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	2240      	movs	r2, #64	; 0x40
 800804e:	4013      	ands	r3, r2
 8008050:	d008      	beq.n	8008064 <HAL_UART_IRQHandler+0x268>
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	2240      	movs	r2, #64	; 0x40
 8008056:	4013      	ands	r3, r2
 8008058:	d004      	beq.n	8008064 <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	0018      	movs	r0, r3
 800805e:	f001 fba6 	bl	80097ae <UART_EndTransmit_IT>
    return;
 8008062:	e021      	b.n	80080a8 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	2380      	movs	r3, #128	; 0x80
 8008068:	041b      	lsls	r3, r3, #16
 800806a:	4013      	ands	r3, r2
 800806c:	d009      	beq.n	8008082 <HAL_UART_IRQHandler+0x286>
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	2380      	movs	r3, #128	; 0x80
 8008072:	05db      	lsls	r3, r3, #23
 8008074:	4013      	ands	r3, r2
 8008076:	d004      	beq.n	8008082 <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	0018      	movs	r0, r3
 800807c:	f001 fbc2 	bl	8009804 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008080:	e012      	b.n	80080a8 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008082:	69fa      	ldr	r2, [r7, #28]
 8008084:	2380      	movs	r3, #128	; 0x80
 8008086:	045b      	lsls	r3, r3, #17
 8008088:	4013      	ands	r3, r2
 800808a:	d00d      	beq.n	80080a8 <HAL_UART_IRQHandler+0x2ac>
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	da0a      	bge.n	80080a8 <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	0018      	movs	r0, r3
 8008096:	f001 fbad 	bl	80097f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	e004      	b.n	80080a8 <HAL_UART_IRQHandler+0x2ac>
      return;
 800809e:	46c0      	nop			; (mov r8, r8)
 80080a0:	e002      	b.n	80080a8 <HAL_UART_IRQHandler+0x2ac>
    return;
 80080a2:	46c0      	nop			; (mov r8, r8)
 80080a4:	e000      	b.n	80080a8 <HAL_UART_IRQHandler+0x2ac>
    return;
 80080a6:	46c0      	nop			; (mov r8, r8)
  }
}
 80080a8:	46bd      	mov	sp, r7
 80080aa:	b008      	add	sp, #32
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	46c0      	nop			; (mov r8, r8)
 80080b0:	10000001 	.word	0x10000001
 80080b4:	08009781 	.word	0x08009781

080080b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80080c0:	46c0      	nop			; (mov r8, r8)
 80080c2:	46bd      	mov	sp, r7
 80080c4:	b002      	add	sp, #8
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80080d0:	46c0      	nop			; (mov r8, r8)
 80080d2:	46bd      	mov	sp, r7
 80080d4:	b002      	add	sp, #8
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80080e0:	46c0      	nop			; (mov r8, r8)
 80080e2:	46bd      	mov	sp, r7
 80080e4:	b002      	add	sp, #8
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080f0:	46c0      	nop			; (mov r8, r8)
 80080f2:	46bd      	mov	sp, r7
 80080f4:	b002      	add	sp, #8
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080fa:	b0a1      	sub	sp, #132	; 0x84
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008100:	2300      	movs	r3, #0
 8008102:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8008104:	231b      	movs	r3, #27
 8008106:	2258      	movs	r2, #88	; 0x58
 8008108:	18ba      	adds	r2, r7, r2
 800810a:	18d2      	adds	r2, r2, r3
 800810c:	2300      	movs	r3, #0
 800810e:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008110:	2300      	movs	r3, #0
 8008112:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	431a      	orrs	r2, r3
 800811e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	431a      	orrs	r2, r3
 8008124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	4313      	orrs	r3, r2
 800812a:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 800812c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800812e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008130:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008132:	4313      	orrs	r3, r2
 8008134:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	4bba      	ldr	r3, [pc, #744]	; (8008428 <UART_SetConfig+0x330>)
 800813e:	401a      	ands	r2, r3
 8008140:	0011      	movs	r1, r2
 8008142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008148:	430b      	orrs	r3, r1
 800814a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800814c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	4bb6      	ldr	r3, [pc, #728]	; (800842c <UART_SetConfig+0x334>)
 8008154:	401a      	ands	r2, r3
 8008156:	0010      	movs	r0, r2
 8008158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800815a:	68d9      	ldr	r1, [r3, #12]
 800815c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	0003      	movs	r3, r0
 8008162:	430b      	orrs	r3, r1
 8008164:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800816c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	4baf      	ldr	r3, [pc, #700]	; (8008430 <UART_SetConfig+0x338>)
 8008172:	429a      	cmp	r2, r3
 8008174:	d004      	beq.n	8008180 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008178:	6a1a      	ldr	r2, [r3, #32]
 800817a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800817c:	4313      	orrs	r3, r2
 800817e:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	4bab      	ldr	r3, [pc, #684]	; (8008434 <UART_SetConfig+0x33c>)
 8008188:	401a      	ands	r2, r3
 800818a:	0011      	movs	r1, r2
 800818c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008192:	430b      	orrs	r3, r1
 8008194:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800819c:	230f      	movs	r3, #15
 800819e:	439a      	bics	r2, r3
 80081a0:	0010      	movs	r0, r2
 80081a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80081a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	0003      	movs	r3, r0
 80081ac:	430b      	orrs	r3, r1
 80081ae:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	4ba0      	ldr	r3, [pc, #640]	; (8008438 <UART_SetConfig+0x340>)
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d12f      	bne.n	800821a <UART_SetConfig+0x122>
 80081ba:	4ba0      	ldr	r3, [pc, #640]	; (800843c <UART_SetConfig+0x344>)
 80081bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081be:	2303      	movs	r3, #3
 80081c0:	4013      	ands	r3, r2
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d013      	beq.n	80081ee <UART_SetConfig+0xf6>
 80081c6:	d304      	bcc.n	80081d2 <UART_SetConfig+0xda>
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d009      	beq.n	80081e0 <UART_SetConfig+0xe8>
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d015      	beq.n	80081fc <UART_SetConfig+0x104>
 80081d0:	e01b      	b.n	800820a <UART_SetConfig+0x112>
 80081d2:	2323      	movs	r3, #35	; 0x23
 80081d4:	2258      	movs	r2, #88	; 0x58
 80081d6:	18ba      	adds	r2, r7, r2
 80081d8:	18d2      	adds	r2, r2, r3
 80081da:	2300      	movs	r3, #0
 80081dc:	7013      	strb	r3, [r2, #0]
 80081de:	e0b4      	b.n	800834a <UART_SetConfig+0x252>
 80081e0:	2323      	movs	r3, #35	; 0x23
 80081e2:	2258      	movs	r2, #88	; 0x58
 80081e4:	18ba      	adds	r2, r7, r2
 80081e6:	18d2      	adds	r2, r2, r3
 80081e8:	2302      	movs	r3, #2
 80081ea:	7013      	strb	r3, [r2, #0]
 80081ec:	e0ad      	b.n	800834a <UART_SetConfig+0x252>
 80081ee:	2323      	movs	r3, #35	; 0x23
 80081f0:	2258      	movs	r2, #88	; 0x58
 80081f2:	18ba      	adds	r2, r7, r2
 80081f4:	18d2      	adds	r2, r2, r3
 80081f6:	2304      	movs	r3, #4
 80081f8:	7013      	strb	r3, [r2, #0]
 80081fa:	e0a6      	b.n	800834a <UART_SetConfig+0x252>
 80081fc:	2323      	movs	r3, #35	; 0x23
 80081fe:	2258      	movs	r2, #88	; 0x58
 8008200:	18ba      	adds	r2, r7, r2
 8008202:	18d2      	adds	r2, r2, r3
 8008204:	2308      	movs	r3, #8
 8008206:	7013      	strb	r3, [r2, #0]
 8008208:	e09f      	b.n	800834a <UART_SetConfig+0x252>
 800820a:	2323      	movs	r3, #35	; 0x23
 800820c:	2258      	movs	r2, #88	; 0x58
 800820e:	18ba      	adds	r2, r7, r2
 8008210:	18d2      	adds	r2, r2, r3
 8008212:	2310      	movs	r3, #16
 8008214:	7013      	strb	r3, [r2, #0]
 8008216:	46c0      	nop			; (mov r8, r8)
 8008218:	e097      	b.n	800834a <UART_SetConfig+0x252>
 800821a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	4b88      	ldr	r3, [pc, #544]	; (8008440 <UART_SetConfig+0x348>)
 8008220:	429a      	cmp	r2, r3
 8008222:	d132      	bne.n	800828a <UART_SetConfig+0x192>
 8008224:	4b85      	ldr	r3, [pc, #532]	; (800843c <UART_SetConfig+0x344>)
 8008226:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008228:	230c      	movs	r3, #12
 800822a:	4013      	ands	r3, r2
 800822c:	2b04      	cmp	r3, #4
 800822e:	d016      	beq.n	800825e <UART_SetConfig+0x166>
 8008230:	d802      	bhi.n	8008238 <UART_SetConfig+0x140>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <UART_SetConfig+0x14a>
 8008236:	e020      	b.n	800827a <UART_SetConfig+0x182>
 8008238:	2b08      	cmp	r3, #8
 800823a:	d009      	beq.n	8008250 <UART_SetConfig+0x158>
 800823c:	2b0c      	cmp	r3, #12
 800823e:	d015      	beq.n	800826c <UART_SetConfig+0x174>
 8008240:	e01b      	b.n	800827a <UART_SetConfig+0x182>
 8008242:	2323      	movs	r3, #35	; 0x23
 8008244:	2258      	movs	r2, #88	; 0x58
 8008246:	18ba      	adds	r2, r7, r2
 8008248:	18d2      	adds	r2, r2, r3
 800824a:	2300      	movs	r3, #0
 800824c:	7013      	strb	r3, [r2, #0]
 800824e:	e07c      	b.n	800834a <UART_SetConfig+0x252>
 8008250:	2323      	movs	r3, #35	; 0x23
 8008252:	2258      	movs	r2, #88	; 0x58
 8008254:	18ba      	adds	r2, r7, r2
 8008256:	18d2      	adds	r2, r2, r3
 8008258:	2302      	movs	r3, #2
 800825a:	7013      	strb	r3, [r2, #0]
 800825c:	e075      	b.n	800834a <UART_SetConfig+0x252>
 800825e:	2323      	movs	r3, #35	; 0x23
 8008260:	2258      	movs	r2, #88	; 0x58
 8008262:	18ba      	adds	r2, r7, r2
 8008264:	18d2      	adds	r2, r2, r3
 8008266:	2304      	movs	r3, #4
 8008268:	7013      	strb	r3, [r2, #0]
 800826a:	e06e      	b.n	800834a <UART_SetConfig+0x252>
 800826c:	2323      	movs	r3, #35	; 0x23
 800826e:	2258      	movs	r2, #88	; 0x58
 8008270:	18ba      	adds	r2, r7, r2
 8008272:	18d2      	adds	r2, r2, r3
 8008274:	2308      	movs	r3, #8
 8008276:	7013      	strb	r3, [r2, #0]
 8008278:	e067      	b.n	800834a <UART_SetConfig+0x252>
 800827a:	2323      	movs	r3, #35	; 0x23
 800827c:	2258      	movs	r2, #88	; 0x58
 800827e:	18ba      	adds	r2, r7, r2
 8008280:	18d2      	adds	r2, r2, r3
 8008282:	2310      	movs	r3, #16
 8008284:	7013      	strb	r3, [r2, #0]
 8008286:	46c0      	nop			; (mov r8, r8)
 8008288:	e05f      	b.n	800834a <UART_SetConfig+0x252>
 800828a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	4b6d      	ldr	r3, [pc, #436]	; (8008444 <UART_SetConfig+0x34c>)
 8008290:	429a      	cmp	r2, r3
 8008292:	d106      	bne.n	80082a2 <UART_SetConfig+0x1aa>
 8008294:	2323      	movs	r3, #35	; 0x23
 8008296:	2258      	movs	r2, #88	; 0x58
 8008298:	18ba      	adds	r2, r7, r2
 800829a:	18d2      	adds	r2, r2, r3
 800829c:	2300      	movs	r3, #0
 800829e:	7013      	strb	r3, [r2, #0]
 80082a0:	e053      	b.n	800834a <UART_SetConfig+0x252>
 80082a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	4b68      	ldr	r3, [pc, #416]	; (8008448 <UART_SetConfig+0x350>)
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d106      	bne.n	80082ba <UART_SetConfig+0x1c2>
 80082ac:	2323      	movs	r3, #35	; 0x23
 80082ae:	2258      	movs	r2, #88	; 0x58
 80082b0:	18ba      	adds	r2, r7, r2
 80082b2:	18d2      	adds	r2, r2, r3
 80082b4:	2300      	movs	r3, #0
 80082b6:	7013      	strb	r3, [r2, #0]
 80082b8:	e047      	b.n	800834a <UART_SetConfig+0x252>
 80082ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	4b5c      	ldr	r3, [pc, #368]	; (8008430 <UART_SetConfig+0x338>)
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d13c      	bne.n	800833e <UART_SetConfig+0x246>
 80082c4:	4b5d      	ldr	r3, [pc, #372]	; (800843c <UART_SetConfig+0x344>)
 80082c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082c8:	23c0      	movs	r3, #192	; 0xc0
 80082ca:	011b      	lsls	r3, r3, #4
 80082cc:	401a      	ands	r2, r3
 80082ce:	2380      	movs	r3, #128	; 0x80
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d01d      	beq.n	8008312 <UART_SetConfig+0x21a>
 80082d6:	2380      	movs	r3, #128	; 0x80
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	429a      	cmp	r2, r3
 80082dc:	d802      	bhi.n	80082e4 <UART_SetConfig+0x1ec>
 80082de:	2a00      	cmp	r2, #0
 80082e0:	d009      	beq.n	80082f6 <UART_SetConfig+0x1fe>
 80082e2:	e024      	b.n	800832e <UART_SetConfig+0x236>
 80082e4:	2380      	movs	r3, #128	; 0x80
 80082e6:	011b      	lsls	r3, r3, #4
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d00b      	beq.n	8008304 <UART_SetConfig+0x20c>
 80082ec:	23c0      	movs	r3, #192	; 0xc0
 80082ee:	011b      	lsls	r3, r3, #4
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d015      	beq.n	8008320 <UART_SetConfig+0x228>
 80082f4:	e01b      	b.n	800832e <UART_SetConfig+0x236>
 80082f6:	2323      	movs	r3, #35	; 0x23
 80082f8:	2258      	movs	r2, #88	; 0x58
 80082fa:	18ba      	adds	r2, r7, r2
 80082fc:	18d2      	adds	r2, r2, r3
 80082fe:	2300      	movs	r3, #0
 8008300:	7013      	strb	r3, [r2, #0]
 8008302:	e022      	b.n	800834a <UART_SetConfig+0x252>
 8008304:	2323      	movs	r3, #35	; 0x23
 8008306:	2258      	movs	r2, #88	; 0x58
 8008308:	18ba      	adds	r2, r7, r2
 800830a:	18d2      	adds	r2, r2, r3
 800830c:	2302      	movs	r3, #2
 800830e:	7013      	strb	r3, [r2, #0]
 8008310:	e01b      	b.n	800834a <UART_SetConfig+0x252>
 8008312:	2323      	movs	r3, #35	; 0x23
 8008314:	2258      	movs	r2, #88	; 0x58
 8008316:	18ba      	adds	r2, r7, r2
 8008318:	18d2      	adds	r2, r2, r3
 800831a:	2304      	movs	r3, #4
 800831c:	7013      	strb	r3, [r2, #0]
 800831e:	e014      	b.n	800834a <UART_SetConfig+0x252>
 8008320:	2323      	movs	r3, #35	; 0x23
 8008322:	2258      	movs	r2, #88	; 0x58
 8008324:	18ba      	adds	r2, r7, r2
 8008326:	18d2      	adds	r2, r2, r3
 8008328:	2308      	movs	r3, #8
 800832a:	7013      	strb	r3, [r2, #0]
 800832c:	e00d      	b.n	800834a <UART_SetConfig+0x252>
 800832e:	2323      	movs	r3, #35	; 0x23
 8008330:	2258      	movs	r2, #88	; 0x58
 8008332:	18ba      	adds	r2, r7, r2
 8008334:	18d2      	adds	r2, r2, r3
 8008336:	2310      	movs	r3, #16
 8008338:	7013      	strb	r3, [r2, #0]
 800833a:	46c0      	nop			; (mov r8, r8)
 800833c:	e005      	b.n	800834a <UART_SetConfig+0x252>
 800833e:	2323      	movs	r3, #35	; 0x23
 8008340:	2258      	movs	r2, #88	; 0x58
 8008342:	18ba      	adds	r2, r7, r2
 8008344:	18d2      	adds	r2, r2, r3
 8008346:	2310      	movs	r3, #16
 8008348:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800834a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	4b38      	ldr	r3, [pc, #224]	; (8008430 <UART_SetConfig+0x338>)
 8008350:	429a      	cmp	r2, r3
 8008352:	d001      	beq.n	8008358 <UART_SetConfig+0x260>
 8008354:	f000 fbd0 	bl	8008af8 <UART_SetConfig+0xa00>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008358:	2323      	movs	r3, #35	; 0x23
 800835a:	2258      	movs	r2, #88	; 0x58
 800835c:	4694      	mov	ip, r2
 800835e:	44bc      	add	ip, r7
 8008360:	4463      	add	r3, ip
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b02      	cmp	r3, #2
 8008366:	d100      	bne.n	800836a <UART_SetConfig+0x272>
 8008368:	e070      	b.n	800844c <UART_SetConfig+0x354>
 800836a:	dc02      	bgt.n	8008372 <UART_SetConfig+0x27a>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d007      	beq.n	8008380 <UART_SetConfig+0x288>
 8008370:	e15f      	b.n	8008632 <UART_SetConfig+0x53a>
 8008372:	2b04      	cmp	r3, #4
 8008374:	d100      	bne.n	8008378 <UART_SetConfig+0x280>
 8008376:	e0b4      	b.n	80084e2 <UART_SetConfig+0x3ea>
 8008378:	2b08      	cmp	r3, #8
 800837a:	d100      	bne.n	800837e <UART_SetConfig+0x286>
 800837c:	e105      	b.n	800858a <UART_SetConfig+0x492>
 800837e:	e158      	b.n	8008632 <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008380:	f7ff f93c 	bl	80075fc <HAL_RCC_GetPCLK1Freq>
 8008384:	0002      	movs	r2, r0
 8008386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	d044      	beq.n	8008418 <UART_SetConfig+0x320>
 800838e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	2b01      	cmp	r3, #1
 8008394:	d03e      	beq.n	8008414 <UART_SetConfig+0x31c>
 8008396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	2b02      	cmp	r3, #2
 800839c:	d038      	beq.n	8008410 <UART_SetConfig+0x318>
 800839e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d032      	beq.n	800840c <UART_SetConfig+0x314>
 80083a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d02c      	beq.n	8008408 <UART_SetConfig+0x310>
 80083ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	2b05      	cmp	r3, #5
 80083b4:	d026      	beq.n	8008404 <UART_SetConfig+0x30c>
 80083b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	2b06      	cmp	r3, #6
 80083bc:	d020      	beq.n	8008400 <UART_SetConfig+0x308>
 80083be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	2b07      	cmp	r3, #7
 80083c4:	d01a      	beq.n	80083fc <UART_SetConfig+0x304>
 80083c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d014      	beq.n	80083f8 <UART_SetConfig+0x300>
 80083ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	2b09      	cmp	r3, #9
 80083d4:	d00e      	beq.n	80083f4 <UART_SetConfig+0x2fc>
 80083d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	2b0a      	cmp	r3, #10
 80083dc:	d008      	beq.n	80083f0 <UART_SetConfig+0x2f8>
 80083de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	2b0b      	cmp	r3, #11
 80083e4:	d102      	bne.n	80083ec <UART_SetConfig+0x2f4>
 80083e6:	2380      	movs	r3, #128	; 0x80
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	e016      	b.n	800841a <UART_SetConfig+0x322>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e014      	b.n	800841a <UART_SetConfig+0x322>
 80083f0:	2380      	movs	r3, #128	; 0x80
 80083f2:	e012      	b.n	800841a <UART_SetConfig+0x322>
 80083f4:	2340      	movs	r3, #64	; 0x40
 80083f6:	e010      	b.n	800841a <UART_SetConfig+0x322>
 80083f8:	2320      	movs	r3, #32
 80083fa:	e00e      	b.n	800841a <UART_SetConfig+0x322>
 80083fc:	2310      	movs	r3, #16
 80083fe:	e00c      	b.n	800841a <UART_SetConfig+0x322>
 8008400:	230c      	movs	r3, #12
 8008402:	e00a      	b.n	800841a <UART_SetConfig+0x322>
 8008404:	230a      	movs	r3, #10
 8008406:	e008      	b.n	800841a <UART_SetConfig+0x322>
 8008408:	2308      	movs	r3, #8
 800840a:	e006      	b.n	800841a <UART_SetConfig+0x322>
 800840c:	2306      	movs	r3, #6
 800840e:	e004      	b.n	800841a <UART_SetConfig+0x322>
 8008410:	2304      	movs	r3, #4
 8008412:	e002      	b.n	800841a <UART_SetConfig+0x322>
 8008414:	2302      	movs	r3, #2
 8008416:	e000      	b.n	800841a <UART_SetConfig+0x322>
 8008418:	2301      	movs	r3, #1
 800841a:	0019      	movs	r1, r3
 800841c:	0010      	movs	r0, r2
 800841e:	f7f7 fe7b 	bl	8000118 <__udivsi3>
 8008422:	0003      	movs	r3, r0
 8008424:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8008426:	e10b      	b.n	8008640 <UART_SetConfig+0x548>
 8008428:	cfff69f3 	.word	0xcfff69f3
 800842c:	ffffcfff 	.word	0xffffcfff
 8008430:	40008000 	.word	0x40008000
 8008434:	11fff4ff 	.word	0x11fff4ff
 8008438:	40013800 	.word	0x40013800
 800843c:	40021000 	.word	0x40021000
 8008440:	40004400 	.word	0x40004400
 8008444:	40004800 	.word	0x40004800
 8008448:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800844c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	d043      	beq.n	80084dc <UART_SetConfig+0x3e4>
 8008454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	2b01      	cmp	r3, #1
 800845a:	d03d      	beq.n	80084d8 <UART_SetConfig+0x3e0>
 800845c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	2b02      	cmp	r3, #2
 8008462:	d037      	beq.n	80084d4 <UART_SetConfig+0x3dc>
 8008464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	2b03      	cmp	r3, #3
 800846a:	d031      	beq.n	80084d0 <UART_SetConfig+0x3d8>
 800846c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	2b04      	cmp	r3, #4
 8008472:	d02b      	beq.n	80084cc <UART_SetConfig+0x3d4>
 8008474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	2b05      	cmp	r3, #5
 800847a:	d025      	beq.n	80084c8 <UART_SetConfig+0x3d0>
 800847c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	2b06      	cmp	r3, #6
 8008482:	d01f      	beq.n	80084c4 <UART_SetConfig+0x3cc>
 8008484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	2b07      	cmp	r3, #7
 800848a:	d019      	beq.n	80084c0 <UART_SetConfig+0x3c8>
 800848c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	2b08      	cmp	r3, #8
 8008492:	d013      	beq.n	80084bc <UART_SetConfig+0x3c4>
 8008494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	2b09      	cmp	r3, #9
 800849a:	d00d      	beq.n	80084b8 <UART_SetConfig+0x3c0>
 800849c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	2b0a      	cmp	r3, #10
 80084a2:	d007      	beq.n	80084b4 <UART_SetConfig+0x3bc>
 80084a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	2b0b      	cmp	r3, #11
 80084aa:	d101      	bne.n	80084b0 <UART_SetConfig+0x3b8>
 80084ac:	4bab      	ldr	r3, [pc, #684]	; (800875c <UART_SetConfig+0x664>)
 80084ae:	e016      	b.n	80084de <UART_SetConfig+0x3e6>
 80084b0:	4bab      	ldr	r3, [pc, #684]	; (8008760 <UART_SetConfig+0x668>)
 80084b2:	e014      	b.n	80084de <UART_SetConfig+0x3e6>
 80084b4:	4bab      	ldr	r3, [pc, #684]	; (8008764 <UART_SetConfig+0x66c>)
 80084b6:	e012      	b.n	80084de <UART_SetConfig+0x3e6>
 80084b8:	4bab      	ldr	r3, [pc, #684]	; (8008768 <UART_SetConfig+0x670>)
 80084ba:	e010      	b.n	80084de <UART_SetConfig+0x3e6>
 80084bc:	4bab      	ldr	r3, [pc, #684]	; (800876c <UART_SetConfig+0x674>)
 80084be:	e00e      	b.n	80084de <UART_SetConfig+0x3e6>
 80084c0:	4bab      	ldr	r3, [pc, #684]	; (8008770 <UART_SetConfig+0x678>)
 80084c2:	e00c      	b.n	80084de <UART_SetConfig+0x3e6>
 80084c4:	4bab      	ldr	r3, [pc, #684]	; (8008774 <UART_SetConfig+0x67c>)
 80084c6:	e00a      	b.n	80084de <UART_SetConfig+0x3e6>
 80084c8:	4bab      	ldr	r3, [pc, #684]	; (8008778 <UART_SetConfig+0x680>)
 80084ca:	e008      	b.n	80084de <UART_SetConfig+0x3e6>
 80084cc:	4bab      	ldr	r3, [pc, #684]	; (800877c <UART_SetConfig+0x684>)
 80084ce:	e006      	b.n	80084de <UART_SetConfig+0x3e6>
 80084d0:	4bab      	ldr	r3, [pc, #684]	; (8008780 <UART_SetConfig+0x688>)
 80084d2:	e004      	b.n	80084de <UART_SetConfig+0x3e6>
 80084d4:	4bab      	ldr	r3, [pc, #684]	; (8008784 <UART_SetConfig+0x68c>)
 80084d6:	e002      	b.n	80084de <UART_SetConfig+0x3e6>
 80084d8:	4bab      	ldr	r3, [pc, #684]	; (8008788 <UART_SetConfig+0x690>)
 80084da:	e000      	b.n	80084de <UART_SetConfig+0x3e6>
 80084dc:	4ba0      	ldr	r3, [pc, #640]	; (8008760 <UART_SetConfig+0x668>)
 80084de:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80084e0:	e0ae      	b.n	8008640 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80084e2:	f7fe ffff 	bl	80074e4 <HAL_RCC_GetSysClockFreq>
 80084e6:	0002      	movs	r2, r0
 80084e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d044      	beq.n	800857a <UART_SetConfig+0x482>
 80084f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d03e      	beq.n	8008576 <UART_SetConfig+0x47e>
 80084f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d038      	beq.n	8008572 <UART_SetConfig+0x47a>
 8008500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	2b03      	cmp	r3, #3
 8008506:	d032      	beq.n	800856e <UART_SetConfig+0x476>
 8008508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850c:	2b04      	cmp	r3, #4
 800850e:	d02c      	beq.n	800856a <UART_SetConfig+0x472>
 8008510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008514:	2b05      	cmp	r3, #5
 8008516:	d026      	beq.n	8008566 <UART_SetConfig+0x46e>
 8008518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851c:	2b06      	cmp	r3, #6
 800851e:	d020      	beq.n	8008562 <UART_SetConfig+0x46a>
 8008520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008524:	2b07      	cmp	r3, #7
 8008526:	d01a      	beq.n	800855e <UART_SetConfig+0x466>
 8008528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800852a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852c:	2b08      	cmp	r3, #8
 800852e:	d014      	beq.n	800855a <UART_SetConfig+0x462>
 8008530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008534:	2b09      	cmp	r3, #9
 8008536:	d00e      	beq.n	8008556 <UART_SetConfig+0x45e>
 8008538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	2b0a      	cmp	r3, #10
 800853e:	d008      	beq.n	8008552 <UART_SetConfig+0x45a>
 8008540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	2b0b      	cmp	r3, #11
 8008546:	d102      	bne.n	800854e <UART_SetConfig+0x456>
 8008548:	2380      	movs	r3, #128	; 0x80
 800854a:	005b      	lsls	r3, r3, #1
 800854c:	e016      	b.n	800857c <UART_SetConfig+0x484>
 800854e:	2301      	movs	r3, #1
 8008550:	e014      	b.n	800857c <UART_SetConfig+0x484>
 8008552:	2380      	movs	r3, #128	; 0x80
 8008554:	e012      	b.n	800857c <UART_SetConfig+0x484>
 8008556:	2340      	movs	r3, #64	; 0x40
 8008558:	e010      	b.n	800857c <UART_SetConfig+0x484>
 800855a:	2320      	movs	r3, #32
 800855c:	e00e      	b.n	800857c <UART_SetConfig+0x484>
 800855e:	2310      	movs	r3, #16
 8008560:	e00c      	b.n	800857c <UART_SetConfig+0x484>
 8008562:	230c      	movs	r3, #12
 8008564:	e00a      	b.n	800857c <UART_SetConfig+0x484>
 8008566:	230a      	movs	r3, #10
 8008568:	e008      	b.n	800857c <UART_SetConfig+0x484>
 800856a:	2308      	movs	r3, #8
 800856c:	e006      	b.n	800857c <UART_SetConfig+0x484>
 800856e:	2306      	movs	r3, #6
 8008570:	e004      	b.n	800857c <UART_SetConfig+0x484>
 8008572:	2304      	movs	r3, #4
 8008574:	e002      	b.n	800857c <UART_SetConfig+0x484>
 8008576:	2302      	movs	r3, #2
 8008578:	e000      	b.n	800857c <UART_SetConfig+0x484>
 800857a:	2301      	movs	r3, #1
 800857c:	0019      	movs	r1, r3
 800857e:	0010      	movs	r0, r2
 8008580:	f7f7 fdca 	bl	8000118 <__udivsi3>
 8008584:	0003      	movs	r3, r0
 8008586:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8008588:	e05a      	b.n	8008640 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800858a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	2b00      	cmp	r3, #0
 8008590:	d04b      	beq.n	800862a <UART_SetConfig+0x532>
 8008592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	2b01      	cmp	r3, #1
 8008598:	d044      	beq.n	8008624 <UART_SetConfig+0x52c>
 800859a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d03d      	beq.n	800861e <UART_SetConfig+0x526>
 80085a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d037      	beq.n	800861a <UART_SetConfig+0x522>
 80085aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	d030      	beq.n	8008614 <UART_SetConfig+0x51c>
 80085b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	2b05      	cmp	r3, #5
 80085b8:	d02a      	beq.n	8008610 <UART_SetConfig+0x518>
 80085ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	2b06      	cmp	r3, #6
 80085c0:	d024      	beq.n	800860c <UART_SetConfig+0x514>
 80085c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	2b07      	cmp	r3, #7
 80085c8:	d01d      	beq.n	8008606 <UART_SetConfig+0x50e>
 80085ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	2b08      	cmp	r3, #8
 80085d0:	d016      	beq.n	8008600 <UART_SetConfig+0x508>
 80085d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2b09      	cmp	r3, #9
 80085d8:	d00f      	beq.n	80085fa <UART_SetConfig+0x502>
 80085da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	2b0a      	cmp	r3, #10
 80085e0:	d008      	beq.n	80085f4 <UART_SetConfig+0x4fc>
 80085e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	2b0b      	cmp	r3, #11
 80085e8:	d101      	bne.n	80085ee <UART_SetConfig+0x4f6>
 80085ea:	2380      	movs	r3, #128	; 0x80
 80085ec:	e01f      	b.n	800862e <UART_SetConfig+0x536>
 80085ee:	2380      	movs	r3, #128	; 0x80
 80085f0:	021b      	lsls	r3, r3, #8
 80085f2:	e01c      	b.n	800862e <UART_SetConfig+0x536>
 80085f4:	2380      	movs	r3, #128	; 0x80
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	e019      	b.n	800862e <UART_SetConfig+0x536>
 80085fa:	2380      	movs	r3, #128	; 0x80
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	e016      	b.n	800862e <UART_SetConfig+0x536>
 8008600:	2380      	movs	r3, #128	; 0x80
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	e013      	b.n	800862e <UART_SetConfig+0x536>
 8008606:	2380      	movs	r3, #128	; 0x80
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	e010      	b.n	800862e <UART_SetConfig+0x536>
 800860c:	4b5f      	ldr	r3, [pc, #380]	; (800878c <UART_SetConfig+0x694>)
 800860e:	e00e      	b.n	800862e <UART_SetConfig+0x536>
 8008610:	4b5f      	ldr	r3, [pc, #380]	; (8008790 <UART_SetConfig+0x698>)
 8008612:	e00c      	b.n	800862e <UART_SetConfig+0x536>
 8008614:	2380      	movs	r3, #128	; 0x80
 8008616:	015b      	lsls	r3, r3, #5
 8008618:	e009      	b.n	800862e <UART_SetConfig+0x536>
 800861a:	4b5e      	ldr	r3, [pc, #376]	; (8008794 <UART_SetConfig+0x69c>)
 800861c:	e007      	b.n	800862e <UART_SetConfig+0x536>
 800861e:	2380      	movs	r3, #128	; 0x80
 8008620:	019b      	lsls	r3, r3, #6
 8008622:	e004      	b.n	800862e <UART_SetConfig+0x536>
 8008624:	2380      	movs	r3, #128	; 0x80
 8008626:	01db      	lsls	r3, r3, #7
 8008628:	e001      	b.n	800862e <UART_SetConfig+0x536>
 800862a:	2380      	movs	r3, #128	; 0x80
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8008630:	e006      	b.n	8008640 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 8008632:	231b      	movs	r3, #27
 8008634:	2258      	movs	r2, #88	; 0x58
 8008636:	18ba      	adds	r2, r7, r2
 8008638:	18d2      	adds	r2, r2, r3
 800863a:	2301      	movs	r3, #1
 800863c:	7013      	strb	r3, [r2, #0]
        break;
 800863e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <UART_SetConfig+0x552>
 8008646:	f000 fe12 	bl	800926e <UART_SetConfig+0x1176>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800864a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	0013      	movs	r3, r2
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	189a      	adds	r2, r3, r2
 8008654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008656:	4293      	cmp	r3, r2
 8008658:	d305      	bcc.n	8008666 <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800865a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008662:	4293      	cmp	r3, r2
 8008664:	d908      	bls.n	8008678 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 8008666:	231b      	movs	r3, #27
 8008668:	2258      	movs	r2, #88	; 0x58
 800866a:	4694      	mov	ip, r2
 800866c:	44bc      	add	ip, r7
 800866e:	4463      	add	r3, ip
 8008670:	2201      	movs	r2, #1
 8008672:	701a      	strb	r2, [r3, #0]
 8008674:	f000 fdfb 	bl	800926e <UART_SetConfig+0x1176>
      }
      else
      {
        switch (clocksource)
 8008678:	2323      	movs	r3, #35	; 0x23
 800867a:	2258      	movs	r2, #88	; 0x58
 800867c:	4694      	mov	ip, r2
 800867e:	44bc      	add	ip, r7
 8008680:	4463      	add	r3, ip
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d100      	bne.n	800868a <UART_SetConfig+0x592>
 8008688:	e0ab      	b.n	80087e2 <UART_SetConfig+0x6ea>
 800868a:	dc02      	bgt.n	8008692 <UART_SetConfig+0x59a>
 800868c:	2b00      	cmp	r3, #0
 800868e:	d007      	beq.n	80086a0 <UART_SetConfig+0x5a8>
 8008690:	e213      	b.n	8008aba <UART_SetConfig+0x9c2>
 8008692:	2b04      	cmp	r3, #4
 8008694:	d100      	bne.n	8008698 <UART_SetConfig+0x5a0>
 8008696:	e111      	b.n	80088bc <UART_SetConfig+0x7c4>
 8008698:	2b08      	cmp	r3, #8
 800869a:	d100      	bne.n	800869e <UART_SetConfig+0x5a6>
 800869c:	e196      	b.n	80089cc <UART_SetConfig+0x8d4>
 800869e:	e20c      	b.n	8008aba <UART_SetConfig+0x9c2>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80086a0:	f7fe ffac 	bl	80075fc <HAL_RCC_GetPCLK1Freq>
 80086a4:	0003      	movs	r3, r0
 80086a6:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ac:	2300      	movs	r3, #0
 80086ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d100      	bne.n	80086ba <UART_SetConfig+0x5c2>
 80086b8:	e06e      	b.n	8008798 <UART_SetConfig+0x6a0>
 80086ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d049      	beq.n	8008756 <UART_SetConfig+0x65e>
 80086c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d042      	beq.n	8008750 <UART_SetConfig+0x658>
 80086ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d03b      	beq.n	800874a <UART_SetConfig+0x652>
 80086d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d034      	beq.n	8008744 <UART_SetConfig+0x64c>
 80086da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086de:	2b05      	cmp	r3, #5
 80086e0:	d02d      	beq.n	800873e <UART_SetConfig+0x646>
 80086e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	2b06      	cmp	r3, #6
 80086e8:	d026      	beq.n	8008738 <UART_SetConfig+0x640>
 80086ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	2b07      	cmp	r3, #7
 80086f0:	d01f      	beq.n	8008732 <UART_SetConfig+0x63a>
 80086f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	2b08      	cmp	r3, #8
 80086f8:	d018      	beq.n	800872c <UART_SetConfig+0x634>
 80086fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	2b09      	cmp	r3, #9
 8008700:	d011      	beq.n	8008726 <UART_SetConfig+0x62e>
 8008702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	2b0a      	cmp	r3, #10
 8008708:	d00a      	beq.n	8008720 <UART_SetConfig+0x628>
 800870a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	2b0b      	cmp	r3, #11
 8008710:	d103      	bne.n	800871a <UART_SetConfig+0x622>
 8008712:	2380      	movs	r3, #128	; 0x80
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	2400      	movs	r4, #0
 8008718:	e040      	b.n	800879c <UART_SetConfig+0x6a4>
 800871a:	2301      	movs	r3, #1
 800871c:	2400      	movs	r4, #0
 800871e:	e03d      	b.n	800879c <UART_SetConfig+0x6a4>
 8008720:	2380      	movs	r3, #128	; 0x80
 8008722:	2400      	movs	r4, #0
 8008724:	e03a      	b.n	800879c <UART_SetConfig+0x6a4>
 8008726:	2340      	movs	r3, #64	; 0x40
 8008728:	2400      	movs	r4, #0
 800872a:	e037      	b.n	800879c <UART_SetConfig+0x6a4>
 800872c:	2320      	movs	r3, #32
 800872e:	2400      	movs	r4, #0
 8008730:	e034      	b.n	800879c <UART_SetConfig+0x6a4>
 8008732:	2310      	movs	r3, #16
 8008734:	2400      	movs	r4, #0
 8008736:	e031      	b.n	800879c <UART_SetConfig+0x6a4>
 8008738:	230c      	movs	r3, #12
 800873a:	2400      	movs	r4, #0
 800873c:	e02e      	b.n	800879c <UART_SetConfig+0x6a4>
 800873e:	230a      	movs	r3, #10
 8008740:	2400      	movs	r4, #0
 8008742:	e02b      	b.n	800879c <UART_SetConfig+0x6a4>
 8008744:	2308      	movs	r3, #8
 8008746:	2400      	movs	r4, #0
 8008748:	e028      	b.n	800879c <UART_SetConfig+0x6a4>
 800874a:	2306      	movs	r3, #6
 800874c:	2400      	movs	r4, #0
 800874e:	e025      	b.n	800879c <UART_SetConfig+0x6a4>
 8008750:	2304      	movs	r3, #4
 8008752:	2400      	movs	r4, #0
 8008754:	e022      	b.n	800879c <UART_SetConfig+0x6a4>
 8008756:	2302      	movs	r3, #2
 8008758:	2400      	movs	r4, #0
 800875a:	e01f      	b.n	800879c <UART_SetConfig+0x6a4>
 800875c:	0000f424 	.word	0x0000f424
 8008760:	00f42400 	.word	0x00f42400
 8008764:	0001e848 	.word	0x0001e848
 8008768:	0003d090 	.word	0x0003d090
 800876c:	0007a120 	.word	0x0007a120
 8008770:	000f4240 	.word	0x000f4240
 8008774:	00145855 	.word	0x00145855
 8008778:	00186a00 	.word	0x00186a00
 800877c:	001e8480 	.word	0x001e8480
 8008780:	0028b0aa 	.word	0x0028b0aa
 8008784:	003d0900 	.word	0x003d0900
 8008788:	007a1200 	.word	0x007a1200
 800878c:	00000aaa 	.word	0x00000aaa
 8008790:	00000ccc 	.word	0x00000ccc
 8008794:	00001555 	.word	0x00001555
 8008798:	2301      	movs	r3, #1
 800879a:	2400      	movs	r4, #0
 800879c:	001a      	movs	r2, r3
 800879e:	0023      	movs	r3, r4
 80087a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80087a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80087a4:	f7f7 fe68 	bl	8000478 <__aeabi_uldivmod>
 80087a8:	0003      	movs	r3, r0
 80087aa:	000c      	movs	r4, r1
 80087ac:	0e1a      	lsrs	r2, r3, #24
 80087ae:	0226      	lsls	r6, r4, #8
 80087b0:	4316      	orrs	r6, r2
 80087b2:	021d      	lsls	r5, r3, #8
 80087b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	085b      	lsrs	r3, r3, #1
 80087ba:	643b      	str	r3, [r7, #64]	; 0x40
 80087bc:	2300      	movs	r3, #0
 80087be:	647b      	str	r3, [r7, #68]	; 0x44
 80087c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80087c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087c4:	1940      	adds	r0, r0, r5
 80087c6:	4171      	adcs	r1, r6
 80087c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80087ce:	2300      	movs	r3, #0
 80087d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d6:	f7f7 fe4f 	bl	8000478 <__aeabi_uldivmod>
 80087da:	0003      	movs	r3, r0
 80087dc:	000c      	movs	r4, r1
 80087de:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80087e0:	e173      	b.n	8008aca <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d04f      	beq.n	800888a <UART_SetConfig+0x792>
 80087ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d048      	beq.n	8008884 <UART_SetConfig+0x78c>
 80087f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d041      	beq.n	800887e <UART_SetConfig+0x786>
 80087fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d03a      	beq.n	8008878 <UART_SetConfig+0x780>
 8008802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	2b04      	cmp	r3, #4
 8008808:	d033      	beq.n	8008872 <UART_SetConfig+0x77a>
 800880a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	2b05      	cmp	r3, #5
 8008810:	d02c      	beq.n	800886c <UART_SetConfig+0x774>
 8008812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008816:	2b06      	cmp	r3, #6
 8008818:	d025      	beq.n	8008866 <UART_SetConfig+0x76e>
 800881a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	2b07      	cmp	r3, #7
 8008820:	d01e      	beq.n	8008860 <UART_SetConfig+0x768>
 8008822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	2b08      	cmp	r3, #8
 8008828:	d017      	beq.n	800885a <UART_SetConfig+0x762>
 800882a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	2b09      	cmp	r3, #9
 8008830:	d010      	beq.n	8008854 <UART_SetConfig+0x75c>
 8008832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	2b0a      	cmp	r3, #10
 8008838:	d009      	beq.n	800884e <UART_SetConfig+0x756>
 800883a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	2b0b      	cmp	r3, #11
 8008840:	d102      	bne.n	8008848 <UART_SetConfig+0x750>
 8008842:	4bbb      	ldr	r3, [pc, #748]	; (8008b30 <UART_SetConfig+0xa38>)
 8008844:	2400      	movs	r4, #0
 8008846:	e022      	b.n	800888e <UART_SetConfig+0x796>
 8008848:	4bba      	ldr	r3, [pc, #744]	; (8008b34 <UART_SetConfig+0xa3c>)
 800884a:	2400      	movs	r4, #0
 800884c:	e01f      	b.n	800888e <UART_SetConfig+0x796>
 800884e:	4bba      	ldr	r3, [pc, #744]	; (8008b38 <UART_SetConfig+0xa40>)
 8008850:	2400      	movs	r4, #0
 8008852:	e01c      	b.n	800888e <UART_SetConfig+0x796>
 8008854:	4bb9      	ldr	r3, [pc, #740]	; (8008b3c <UART_SetConfig+0xa44>)
 8008856:	2400      	movs	r4, #0
 8008858:	e019      	b.n	800888e <UART_SetConfig+0x796>
 800885a:	4bb9      	ldr	r3, [pc, #740]	; (8008b40 <UART_SetConfig+0xa48>)
 800885c:	2400      	movs	r4, #0
 800885e:	e016      	b.n	800888e <UART_SetConfig+0x796>
 8008860:	4bb8      	ldr	r3, [pc, #736]	; (8008b44 <UART_SetConfig+0xa4c>)
 8008862:	2400      	movs	r4, #0
 8008864:	e013      	b.n	800888e <UART_SetConfig+0x796>
 8008866:	4bb8      	ldr	r3, [pc, #736]	; (8008b48 <UART_SetConfig+0xa50>)
 8008868:	2400      	movs	r4, #0
 800886a:	e010      	b.n	800888e <UART_SetConfig+0x796>
 800886c:	4bb7      	ldr	r3, [pc, #732]	; (8008b4c <UART_SetConfig+0xa54>)
 800886e:	2400      	movs	r4, #0
 8008870:	e00d      	b.n	800888e <UART_SetConfig+0x796>
 8008872:	4bb7      	ldr	r3, [pc, #732]	; (8008b50 <UART_SetConfig+0xa58>)
 8008874:	2400      	movs	r4, #0
 8008876:	e00a      	b.n	800888e <UART_SetConfig+0x796>
 8008878:	4bb6      	ldr	r3, [pc, #728]	; (8008b54 <UART_SetConfig+0xa5c>)
 800887a:	2400      	movs	r4, #0
 800887c:	e007      	b.n	800888e <UART_SetConfig+0x796>
 800887e:	4bb6      	ldr	r3, [pc, #728]	; (8008b58 <UART_SetConfig+0xa60>)
 8008880:	2400      	movs	r4, #0
 8008882:	e004      	b.n	800888e <UART_SetConfig+0x796>
 8008884:	4bb5      	ldr	r3, [pc, #724]	; (8008b5c <UART_SetConfig+0xa64>)
 8008886:	2400      	movs	r4, #0
 8008888:	e001      	b.n	800888e <UART_SetConfig+0x796>
 800888a:	4baa      	ldr	r3, [pc, #680]	; (8008b34 <UART_SetConfig+0xa3c>)
 800888c:	2400      	movs	r4, #0
 800888e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008890:	6852      	ldr	r2, [r2, #4]
 8008892:	0852      	lsrs	r2, r2, #1
 8008894:	633a      	str	r2, [r7, #48]	; 0x30
 8008896:	2200      	movs	r2, #0
 8008898:	637a      	str	r2, [r7, #52]	; 0x34
 800889a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800889c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800889e:	18c0      	adds	r0, r0, r3
 80088a0:	4161      	adcs	r1, r4
 80088a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80088a8:	2300      	movs	r3, #0
 80088aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b0:	f7f7 fde2 	bl	8000478 <__aeabi_uldivmod>
 80088b4:	0003      	movs	r3, r0
 80088b6:	000c      	movs	r4, r1
 80088b8:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80088ba:	e106      	b.n	8008aca <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80088bc:	f7fe fe12 	bl	80074e4 <HAL_RCC_GetSysClockFreq>
 80088c0:	0003      	movs	r3, r0
 80088c2:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088c6:	623b      	str	r3, [r7, #32]
 80088c8:	2300      	movs	r3, #0
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24
 80088cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d050      	beq.n	8008976 <UART_SetConfig+0x87e>
 80088d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d049      	beq.n	8008970 <UART_SetConfig+0x878>
 80088dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d042      	beq.n	800896a <UART_SetConfig+0x872>
 80088e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	d03b      	beq.n	8008964 <UART_SetConfig+0x86c>
 80088ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	d034      	beq.n	800895e <UART_SetConfig+0x866>
 80088f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	2b05      	cmp	r3, #5
 80088fa:	d02d      	beq.n	8008958 <UART_SetConfig+0x860>
 80088fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008900:	2b06      	cmp	r3, #6
 8008902:	d026      	beq.n	8008952 <UART_SetConfig+0x85a>
 8008904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	2b07      	cmp	r3, #7
 800890a:	d01f      	beq.n	800894c <UART_SetConfig+0x854>
 800890c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	2b08      	cmp	r3, #8
 8008912:	d018      	beq.n	8008946 <UART_SetConfig+0x84e>
 8008914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	2b09      	cmp	r3, #9
 800891a:	d011      	beq.n	8008940 <UART_SetConfig+0x848>
 800891c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	2b0a      	cmp	r3, #10
 8008922:	d00a      	beq.n	800893a <UART_SetConfig+0x842>
 8008924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	2b0b      	cmp	r3, #11
 800892a:	d103      	bne.n	8008934 <UART_SetConfig+0x83c>
 800892c:	2380      	movs	r3, #128	; 0x80
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	2400      	movs	r4, #0
 8008932:	e022      	b.n	800897a <UART_SetConfig+0x882>
 8008934:	2301      	movs	r3, #1
 8008936:	2400      	movs	r4, #0
 8008938:	e01f      	b.n	800897a <UART_SetConfig+0x882>
 800893a:	2380      	movs	r3, #128	; 0x80
 800893c:	2400      	movs	r4, #0
 800893e:	e01c      	b.n	800897a <UART_SetConfig+0x882>
 8008940:	2340      	movs	r3, #64	; 0x40
 8008942:	2400      	movs	r4, #0
 8008944:	e019      	b.n	800897a <UART_SetConfig+0x882>
 8008946:	2320      	movs	r3, #32
 8008948:	2400      	movs	r4, #0
 800894a:	e016      	b.n	800897a <UART_SetConfig+0x882>
 800894c:	2310      	movs	r3, #16
 800894e:	2400      	movs	r4, #0
 8008950:	e013      	b.n	800897a <UART_SetConfig+0x882>
 8008952:	230c      	movs	r3, #12
 8008954:	2400      	movs	r4, #0
 8008956:	e010      	b.n	800897a <UART_SetConfig+0x882>
 8008958:	230a      	movs	r3, #10
 800895a:	2400      	movs	r4, #0
 800895c:	e00d      	b.n	800897a <UART_SetConfig+0x882>
 800895e:	2308      	movs	r3, #8
 8008960:	2400      	movs	r4, #0
 8008962:	e00a      	b.n	800897a <UART_SetConfig+0x882>
 8008964:	2306      	movs	r3, #6
 8008966:	2400      	movs	r4, #0
 8008968:	e007      	b.n	800897a <UART_SetConfig+0x882>
 800896a:	2304      	movs	r3, #4
 800896c:	2400      	movs	r4, #0
 800896e:	e004      	b.n	800897a <UART_SetConfig+0x882>
 8008970:	2302      	movs	r3, #2
 8008972:	2400      	movs	r4, #0
 8008974:	e001      	b.n	800897a <UART_SetConfig+0x882>
 8008976:	2301      	movs	r3, #1
 8008978:	2400      	movs	r4, #0
 800897a:	001a      	movs	r2, r3
 800897c:	0023      	movs	r3, r4
 800897e:	6a38      	ldr	r0, [r7, #32]
 8008980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008982:	f7f7 fd79 	bl	8000478 <__aeabi_uldivmod>
 8008986:	0003      	movs	r3, r0
 8008988:	000c      	movs	r4, r1
 800898a:	0e1a      	lsrs	r2, r3, #24
 800898c:	0221      	lsls	r1, r4, #8
 800898e:	6579      	str	r1, [r7, #84]	; 0x54
 8008990:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008992:	4311      	orrs	r1, r2
 8008994:	6579      	str	r1, [r7, #84]	; 0x54
 8008996:	021b      	lsls	r3, r3, #8
 8008998:	653b      	str	r3, [r7, #80]	; 0x50
 800899a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	085b      	lsrs	r3, r3, #1
 80089a0:	61bb      	str	r3, [r7, #24]
 80089a2:	2300      	movs	r3, #0
 80089a4:	61fb      	str	r3, [r7, #28]
 80089a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80089a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	69fc      	ldr	r4, [r7, #28]
 80089ae:	18c0      	adds	r0, r0, r3
 80089b0:	4161      	adcs	r1, r4
 80089b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	613b      	str	r3, [r7, #16]
 80089b8:	2300      	movs	r3, #0
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f7f7 fd5a 	bl	8000478 <__aeabi_uldivmod>
 80089c4:	0003      	movs	r3, r0
 80089c6:	000c      	movs	r4, r1
 80089c8:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80089ca:	e07e      	b.n	8008aca <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d058      	beq.n	8008a86 <UART_SetConfig+0x98e>
 80089d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d050      	beq.n	8008a7e <UART_SetConfig+0x986>
 80089dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d048      	beq.n	8008a76 <UART_SetConfig+0x97e>
 80089e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d041      	beq.n	8008a70 <UART_SetConfig+0x978>
 80089ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	d039      	beq.n	8008a68 <UART_SetConfig+0x970>
 80089f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	2b05      	cmp	r3, #5
 80089fa:	d032      	beq.n	8008a62 <UART_SetConfig+0x96a>
 80089fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	2b06      	cmp	r3, #6
 8008a02:	d02b      	beq.n	8008a5c <UART_SetConfig+0x964>
 8008a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	2b07      	cmp	r3, #7
 8008a0a:	d023      	beq.n	8008a54 <UART_SetConfig+0x95c>
 8008a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d01b      	beq.n	8008a4c <UART_SetConfig+0x954>
 8008a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	2b09      	cmp	r3, #9
 8008a1a:	d013      	beq.n	8008a44 <UART_SetConfig+0x94c>
 8008a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	2b0a      	cmp	r3, #10
 8008a22:	d00b      	beq.n	8008a3c <UART_SetConfig+0x944>
 8008a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	2b0b      	cmp	r3, #11
 8008a2a:	d103      	bne.n	8008a34 <UART_SetConfig+0x93c>
 8008a2c:	2380      	movs	r3, #128	; 0x80
 8008a2e:	021b      	lsls	r3, r3, #8
 8008a30:	2400      	movs	r4, #0
 8008a32:	e02b      	b.n	8008a8c <UART_SetConfig+0x994>
 8008a34:	2380      	movs	r3, #128	; 0x80
 8008a36:	041b      	lsls	r3, r3, #16
 8008a38:	2400      	movs	r4, #0
 8008a3a:	e027      	b.n	8008a8c <UART_SetConfig+0x994>
 8008a3c:	2380      	movs	r3, #128	; 0x80
 8008a3e:	025b      	lsls	r3, r3, #9
 8008a40:	2400      	movs	r4, #0
 8008a42:	e023      	b.n	8008a8c <UART_SetConfig+0x994>
 8008a44:	2380      	movs	r3, #128	; 0x80
 8008a46:	029b      	lsls	r3, r3, #10
 8008a48:	2400      	movs	r4, #0
 8008a4a:	e01f      	b.n	8008a8c <UART_SetConfig+0x994>
 8008a4c:	2380      	movs	r3, #128	; 0x80
 8008a4e:	02db      	lsls	r3, r3, #11
 8008a50:	2400      	movs	r4, #0
 8008a52:	e01b      	b.n	8008a8c <UART_SetConfig+0x994>
 8008a54:	2380      	movs	r3, #128	; 0x80
 8008a56:	031b      	lsls	r3, r3, #12
 8008a58:	2400      	movs	r4, #0
 8008a5a:	e017      	b.n	8008a8c <UART_SetConfig+0x994>
 8008a5c:	4b40      	ldr	r3, [pc, #256]	; (8008b60 <UART_SetConfig+0xa68>)
 8008a5e:	2400      	movs	r4, #0
 8008a60:	e014      	b.n	8008a8c <UART_SetConfig+0x994>
 8008a62:	4b40      	ldr	r3, [pc, #256]	; (8008b64 <UART_SetConfig+0xa6c>)
 8008a64:	2400      	movs	r4, #0
 8008a66:	e011      	b.n	8008a8c <UART_SetConfig+0x994>
 8008a68:	2380      	movs	r3, #128	; 0x80
 8008a6a:	035b      	lsls	r3, r3, #13
 8008a6c:	2400      	movs	r4, #0
 8008a6e:	e00d      	b.n	8008a8c <UART_SetConfig+0x994>
 8008a70:	4b3d      	ldr	r3, [pc, #244]	; (8008b68 <UART_SetConfig+0xa70>)
 8008a72:	2400      	movs	r4, #0
 8008a74:	e00a      	b.n	8008a8c <UART_SetConfig+0x994>
 8008a76:	2380      	movs	r3, #128	; 0x80
 8008a78:	039b      	lsls	r3, r3, #14
 8008a7a:	2400      	movs	r4, #0
 8008a7c:	e006      	b.n	8008a8c <UART_SetConfig+0x994>
 8008a7e:	2380      	movs	r3, #128	; 0x80
 8008a80:	03db      	lsls	r3, r3, #15
 8008a82:	2400      	movs	r4, #0
 8008a84:	e002      	b.n	8008a8c <UART_SetConfig+0x994>
 8008a86:	2380      	movs	r3, #128	; 0x80
 8008a88:	041b      	lsls	r3, r3, #16
 8008a8a:	2400      	movs	r4, #0
 8008a8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a8e:	6852      	ldr	r2, [r2, #4]
 8008a90:	0852      	lsrs	r2, r2, #1
 8008a92:	60ba      	str	r2, [r7, #8]
 8008a94:	2200      	movs	r2, #0
 8008a96:	60fa      	str	r2, [r7, #12]
 8008a98:	68b8      	ldr	r0, [r7, #8]
 8008a9a:	68f9      	ldr	r1, [r7, #12]
 8008a9c:	18c0      	adds	r0, r0, r3
 8008a9e:	4161      	adcs	r1, r4
 8008aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	603b      	str	r3, [r7, #0]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	607b      	str	r3, [r7, #4]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f7f7 fce3 	bl	8000478 <__aeabi_uldivmod>
 8008ab2:	0003      	movs	r3, r0
 8008ab4:	000c      	movs	r4, r1
 8008ab6:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8008ab8:	e007      	b.n	8008aca <UART_SetConfig+0x9d2>
          default:
            ret = HAL_ERROR;
 8008aba:	231b      	movs	r3, #27
 8008abc:	2258      	movs	r2, #88	; 0x58
 8008abe:	4694      	mov	ip, r2
 8008ac0:	44bc      	add	ip, r7
 8008ac2:	4463      	add	r3, ip
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	701a      	strb	r2, [r3, #0]
            break;
 8008ac8:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008acc:	4a27      	ldr	r2, [pc, #156]	; (8008b6c <UART_SetConfig+0xa74>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d909      	bls.n	8008ae6 <UART_SetConfig+0x9ee>
 8008ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ad4:	4a26      	ldr	r2, [pc, #152]	; (8008b70 <UART_SetConfig+0xa78>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d805      	bhi.n	8008ae6 <UART_SetConfig+0x9ee>
        {
          huart->Instance->BRR = usartdiv;
 8008ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008ae0:	60da      	str	r2, [r3, #12]
 8008ae2:	f000 fbc4 	bl	800926e <UART_SetConfig+0x1176>
        }
        else
        {
          ret = HAL_ERROR;
 8008ae6:	231b      	movs	r3, #27
 8008ae8:	2258      	movs	r2, #88	; 0x58
 8008aea:	4694      	mov	ip, r2
 8008aec:	44bc      	add	ip, r7
 8008aee:	4463      	add	r3, ip
 8008af0:	2201      	movs	r2, #1
 8008af2:	701a      	strb	r2, [r3, #0]
 8008af4:	f000 fbbb 	bl	800926e <UART_SetConfig+0x1176>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008afa:	69da      	ldr	r2, [r3, #28]
 8008afc:	2380      	movs	r3, #128	; 0x80
 8008afe:	021b      	lsls	r3, r3, #8
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d000      	beq.n	8008b06 <UART_SetConfig+0xa0e>
 8008b04:	e1e6      	b.n	8008ed4 <UART_SetConfig+0xddc>
  {
    switch (clocksource)
 8008b06:	2323      	movs	r3, #35	; 0x23
 8008b08:	2258      	movs	r2, #88	; 0x58
 8008b0a:	4694      	mov	ip, r2
 8008b0c:	44bc      	add	ip, r7
 8008b0e:	4463      	add	r3, ip
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d100      	bne.n	8008b18 <UART_SetConfig+0xa20>
 8008b16:	e08f      	b.n	8008c38 <UART_SetConfig+0xb40>
 8008b18:	dc02      	bgt.n	8008b20 <UART_SetConfig+0xa28>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d02a      	beq.n	8008b74 <UART_SetConfig+0xa7c>
 8008b1e:	e1a5      	b.n	8008e6c <UART_SetConfig+0xd74>
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d100      	bne.n	8008b26 <UART_SetConfig+0xa2e>
 8008b24:	e0df      	b.n	8008ce6 <UART_SetConfig+0xbee>
 8008b26:	2b08      	cmp	r3, #8
 8008b28:	d100      	bne.n	8008b2c <UART_SetConfig+0xa34>
 8008b2a:	e13e      	b.n	8008daa <UART_SetConfig+0xcb2>
 8008b2c:	e19e      	b.n	8008e6c <UART_SetConfig+0xd74>
 8008b2e:	46c0      	nop			; (mov r8, r8)
 8008b30:	00f42400 	.word	0x00f42400
 8008b34:	f4240000 	.word	0xf4240000
 8008b38:	01e84800 	.word	0x01e84800
 8008b3c:	03d09000 	.word	0x03d09000
 8008b40:	07a12000 	.word	0x07a12000
 8008b44:	0f424000 	.word	0x0f424000
 8008b48:	14585500 	.word	0x14585500
 8008b4c:	186a0000 	.word	0x186a0000
 8008b50:	1e848000 	.word	0x1e848000
 8008b54:	28b0aa00 	.word	0x28b0aa00
 8008b58:	3d090000 	.word	0x3d090000
 8008b5c:	7a120000 	.word	0x7a120000
 8008b60:	000aaa00 	.word	0x000aaa00
 8008b64:	000ccc00 	.word	0x000ccc00
 8008b68:	00155500 	.word	0x00155500
 8008b6c:	000002ff 	.word	0x000002ff
 8008b70:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b74:	f7fe fd42 	bl	80075fc <HAL_RCC_GetPCLK1Freq>
 8008b78:	0003      	movs	r3, r0
 8008b7a:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d044      	beq.n	8008c0e <UART_SetConfig+0xb16>
 8008b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d03e      	beq.n	8008c0a <UART_SetConfig+0xb12>
 8008b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d038      	beq.n	8008c06 <UART_SetConfig+0xb0e>
 8008b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	d032      	beq.n	8008c02 <UART_SetConfig+0xb0a>
 8008b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	2b04      	cmp	r3, #4
 8008ba2:	d02c      	beq.n	8008bfe <UART_SetConfig+0xb06>
 8008ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	2b05      	cmp	r3, #5
 8008baa:	d026      	beq.n	8008bfa <UART_SetConfig+0xb02>
 8008bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	2b06      	cmp	r3, #6
 8008bb2:	d020      	beq.n	8008bf6 <UART_SetConfig+0xafe>
 8008bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	2b07      	cmp	r3, #7
 8008bba:	d01a      	beq.n	8008bf2 <UART_SetConfig+0xafa>
 8008bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	2b08      	cmp	r3, #8
 8008bc2:	d014      	beq.n	8008bee <UART_SetConfig+0xaf6>
 8008bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2b09      	cmp	r3, #9
 8008bca:	d00e      	beq.n	8008bea <UART_SetConfig+0xaf2>
 8008bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2b0a      	cmp	r3, #10
 8008bd2:	d008      	beq.n	8008be6 <UART_SetConfig+0xaee>
 8008bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	2b0b      	cmp	r3, #11
 8008bda:	d102      	bne.n	8008be2 <UART_SetConfig+0xaea>
 8008bdc:	2380      	movs	r3, #128	; 0x80
 8008bde:	005b      	lsls	r3, r3, #1
 8008be0:	e016      	b.n	8008c10 <UART_SetConfig+0xb18>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e014      	b.n	8008c10 <UART_SetConfig+0xb18>
 8008be6:	2380      	movs	r3, #128	; 0x80
 8008be8:	e012      	b.n	8008c10 <UART_SetConfig+0xb18>
 8008bea:	2340      	movs	r3, #64	; 0x40
 8008bec:	e010      	b.n	8008c10 <UART_SetConfig+0xb18>
 8008bee:	2320      	movs	r3, #32
 8008bf0:	e00e      	b.n	8008c10 <UART_SetConfig+0xb18>
 8008bf2:	2310      	movs	r3, #16
 8008bf4:	e00c      	b.n	8008c10 <UART_SetConfig+0xb18>
 8008bf6:	230c      	movs	r3, #12
 8008bf8:	e00a      	b.n	8008c10 <UART_SetConfig+0xb18>
 8008bfa:	230a      	movs	r3, #10
 8008bfc:	e008      	b.n	8008c10 <UART_SetConfig+0xb18>
 8008bfe:	2308      	movs	r3, #8
 8008c00:	e006      	b.n	8008c10 <UART_SetConfig+0xb18>
 8008c02:	2306      	movs	r3, #6
 8008c04:	e004      	b.n	8008c10 <UART_SetConfig+0xb18>
 8008c06:	2304      	movs	r3, #4
 8008c08:	e002      	b.n	8008c10 <UART_SetConfig+0xb18>
 8008c0a:	2302      	movs	r3, #2
 8008c0c:	e000      	b.n	8008c10 <UART_SetConfig+0xb18>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	0019      	movs	r1, r3
 8008c12:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008c14:	f7f7 fa80 	bl	8000118 <__udivsi3>
 8008c18:	0003      	movs	r3, r0
 8008c1a:	005a      	lsls	r2, r3, #1
 8008c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	085b      	lsrs	r3, r3, #1
 8008c22:	18d2      	adds	r2, r2, r3
 8008c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	0019      	movs	r1, r3
 8008c2a:	0010      	movs	r0, r2
 8008c2c:	f7f7 fa74 	bl	8000118 <__udivsi3>
 8008c30:	0003      	movs	r3, r0
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8008c36:	e121      	b.n	8008e7c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d043      	beq.n	8008cc8 <UART_SetConfig+0xbd0>
 8008c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d03d      	beq.n	8008cc4 <UART_SetConfig+0xbcc>
 8008c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d037      	beq.n	8008cc0 <UART_SetConfig+0xbc8>
 8008c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	2b03      	cmp	r3, #3
 8008c56:	d031      	beq.n	8008cbc <UART_SetConfig+0xbc4>
 8008c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d02b      	beq.n	8008cb8 <UART_SetConfig+0xbc0>
 8008c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	2b05      	cmp	r3, #5
 8008c66:	d025      	beq.n	8008cb4 <UART_SetConfig+0xbbc>
 8008c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6c:	2b06      	cmp	r3, #6
 8008c6e:	d01f      	beq.n	8008cb0 <UART_SetConfig+0xbb8>
 8008c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	2b07      	cmp	r3, #7
 8008c76:	d019      	beq.n	8008cac <UART_SetConfig+0xbb4>
 8008c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	2b08      	cmp	r3, #8
 8008c7e:	d013      	beq.n	8008ca8 <UART_SetConfig+0xbb0>
 8008c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	2b09      	cmp	r3, #9
 8008c86:	d00d      	beq.n	8008ca4 <UART_SetConfig+0xbac>
 8008c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	2b0a      	cmp	r3, #10
 8008c8e:	d007      	beq.n	8008ca0 <UART_SetConfig+0xba8>
 8008c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	2b0b      	cmp	r3, #11
 8008c96:	d101      	bne.n	8008c9c <UART_SetConfig+0xba4>
 8008c98:	4bba      	ldr	r3, [pc, #744]	; (8008f84 <UART_SetConfig+0xe8c>)
 8008c9a:	e016      	b.n	8008cca <UART_SetConfig+0xbd2>
 8008c9c:	4bba      	ldr	r3, [pc, #744]	; (8008f88 <UART_SetConfig+0xe90>)
 8008c9e:	e014      	b.n	8008cca <UART_SetConfig+0xbd2>
 8008ca0:	4bba      	ldr	r3, [pc, #744]	; (8008f8c <UART_SetConfig+0xe94>)
 8008ca2:	e012      	b.n	8008cca <UART_SetConfig+0xbd2>
 8008ca4:	4bba      	ldr	r3, [pc, #744]	; (8008f90 <UART_SetConfig+0xe98>)
 8008ca6:	e010      	b.n	8008cca <UART_SetConfig+0xbd2>
 8008ca8:	4bba      	ldr	r3, [pc, #744]	; (8008f94 <UART_SetConfig+0xe9c>)
 8008caa:	e00e      	b.n	8008cca <UART_SetConfig+0xbd2>
 8008cac:	4bba      	ldr	r3, [pc, #744]	; (8008f98 <UART_SetConfig+0xea0>)
 8008cae:	e00c      	b.n	8008cca <UART_SetConfig+0xbd2>
 8008cb0:	4bba      	ldr	r3, [pc, #744]	; (8008f9c <UART_SetConfig+0xea4>)
 8008cb2:	e00a      	b.n	8008cca <UART_SetConfig+0xbd2>
 8008cb4:	4bba      	ldr	r3, [pc, #744]	; (8008fa0 <UART_SetConfig+0xea8>)
 8008cb6:	e008      	b.n	8008cca <UART_SetConfig+0xbd2>
 8008cb8:	4bba      	ldr	r3, [pc, #744]	; (8008fa4 <UART_SetConfig+0xeac>)
 8008cba:	e006      	b.n	8008cca <UART_SetConfig+0xbd2>
 8008cbc:	4bba      	ldr	r3, [pc, #744]	; (8008fa8 <UART_SetConfig+0xeb0>)
 8008cbe:	e004      	b.n	8008cca <UART_SetConfig+0xbd2>
 8008cc0:	4bba      	ldr	r3, [pc, #744]	; (8008fac <UART_SetConfig+0xeb4>)
 8008cc2:	e002      	b.n	8008cca <UART_SetConfig+0xbd2>
 8008cc4:	4bba      	ldr	r3, [pc, #744]	; (8008fb0 <UART_SetConfig+0xeb8>)
 8008cc6:	e000      	b.n	8008cca <UART_SetConfig+0xbd2>
 8008cc8:	4baf      	ldr	r3, [pc, #700]	; (8008f88 <UART_SetConfig+0xe90>)
 8008cca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ccc:	6852      	ldr	r2, [r2, #4]
 8008cce:	0852      	lsrs	r2, r2, #1
 8008cd0:	189a      	adds	r2, r3, r2
 8008cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	0019      	movs	r1, r3
 8008cd8:	0010      	movs	r0, r2
 8008cda:	f7f7 fa1d 	bl	8000118 <__udivsi3>
 8008cde:	0003      	movs	r3, r0
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8008ce4:	e0ca      	b.n	8008e7c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ce6:	f7fe fbfd 	bl	80074e4 <HAL_RCC_GetSysClockFreq>
 8008cea:	0003      	movs	r3, r0
 8008cec:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d044      	beq.n	8008d80 <UART_SetConfig+0xc88>
 8008cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d03e      	beq.n	8008d7c <UART_SetConfig+0xc84>
 8008cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d038      	beq.n	8008d78 <UART_SetConfig+0xc80>
 8008d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d032      	beq.n	8008d74 <UART_SetConfig+0xc7c>
 8008d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d02c      	beq.n	8008d70 <UART_SetConfig+0xc78>
 8008d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	2b05      	cmp	r3, #5
 8008d1c:	d026      	beq.n	8008d6c <UART_SetConfig+0xc74>
 8008d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d22:	2b06      	cmp	r3, #6
 8008d24:	d020      	beq.n	8008d68 <UART_SetConfig+0xc70>
 8008d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2a:	2b07      	cmp	r3, #7
 8008d2c:	d01a      	beq.n	8008d64 <UART_SetConfig+0xc6c>
 8008d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	2b08      	cmp	r3, #8
 8008d34:	d014      	beq.n	8008d60 <UART_SetConfig+0xc68>
 8008d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	2b09      	cmp	r3, #9
 8008d3c:	d00e      	beq.n	8008d5c <UART_SetConfig+0xc64>
 8008d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	2b0a      	cmp	r3, #10
 8008d44:	d008      	beq.n	8008d58 <UART_SetConfig+0xc60>
 8008d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4a:	2b0b      	cmp	r3, #11
 8008d4c:	d102      	bne.n	8008d54 <UART_SetConfig+0xc5c>
 8008d4e:	2380      	movs	r3, #128	; 0x80
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	e016      	b.n	8008d82 <UART_SetConfig+0xc8a>
 8008d54:	2301      	movs	r3, #1
 8008d56:	e014      	b.n	8008d82 <UART_SetConfig+0xc8a>
 8008d58:	2380      	movs	r3, #128	; 0x80
 8008d5a:	e012      	b.n	8008d82 <UART_SetConfig+0xc8a>
 8008d5c:	2340      	movs	r3, #64	; 0x40
 8008d5e:	e010      	b.n	8008d82 <UART_SetConfig+0xc8a>
 8008d60:	2320      	movs	r3, #32
 8008d62:	e00e      	b.n	8008d82 <UART_SetConfig+0xc8a>
 8008d64:	2310      	movs	r3, #16
 8008d66:	e00c      	b.n	8008d82 <UART_SetConfig+0xc8a>
 8008d68:	230c      	movs	r3, #12
 8008d6a:	e00a      	b.n	8008d82 <UART_SetConfig+0xc8a>
 8008d6c:	230a      	movs	r3, #10
 8008d6e:	e008      	b.n	8008d82 <UART_SetConfig+0xc8a>
 8008d70:	2308      	movs	r3, #8
 8008d72:	e006      	b.n	8008d82 <UART_SetConfig+0xc8a>
 8008d74:	2306      	movs	r3, #6
 8008d76:	e004      	b.n	8008d82 <UART_SetConfig+0xc8a>
 8008d78:	2304      	movs	r3, #4
 8008d7a:	e002      	b.n	8008d82 <UART_SetConfig+0xc8a>
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	e000      	b.n	8008d82 <UART_SetConfig+0xc8a>
 8008d80:	2301      	movs	r3, #1
 8008d82:	0019      	movs	r1, r3
 8008d84:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008d86:	f7f7 f9c7 	bl	8000118 <__udivsi3>
 8008d8a:	0003      	movs	r3, r0
 8008d8c:	005a      	lsls	r2, r3, #1
 8008d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	085b      	lsrs	r3, r3, #1
 8008d94:	18d2      	adds	r2, r2, r3
 8008d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	0019      	movs	r1, r3
 8008d9c:	0010      	movs	r0, r2
 8008d9e:	f7f7 f9bb 	bl	8000118 <__udivsi3>
 8008da2:	0003      	movs	r3, r0
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8008da8:	e068      	b.n	8008e7c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d04c      	beq.n	8008e4c <UART_SetConfig+0xd54>
 8008db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d045      	beq.n	8008e46 <UART_SetConfig+0xd4e>
 8008dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d03e      	beq.n	8008e40 <UART_SetConfig+0xd48>
 8008dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d038      	beq.n	8008e3c <UART_SetConfig+0xd44>
 8008dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d031      	beq.n	8008e36 <UART_SetConfig+0xd3e>
 8008dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	2b05      	cmp	r3, #5
 8008dd8:	d02b      	beq.n	8008e32 <UART_SetConfig+0xd3a>
 8008dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dde:	2b06      	cmp	r3, #6
 8008de0:	d025      	beq.n	8008e2e <UART_SetConfig+0xd36>
 8008de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de6:	2b07      	cmp	r3, #7
 8008de8:	d01e      	beq.n	8008e28 <UART_SetConfig+0xd30>
 8008dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dee:	2b08      	cmp	r3, #8
 8008df0:	d017      	beq.n	8008e22 <UART_SetConfig+0xd2a>
 8008df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	2b09      	cmp	r3, #9
 8008df8:	d010      	beq.n	8008e1c <UART_SetConfig+0xd24>
 8008dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfe:	2b0a      	cmp	r3, #10
 8008e00:	d009      	beq.n	8008e16 <UART_SetConfig+0xd1e>
 8008e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e06:	2b0b      	cmp	r3, #11
 8008e08:	d102      	bne.n	8008e10 <UART_SetConfig+0xd18>
 8008e0a:	2380      	movs	r3, #128	; 0x80
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	e01f      	b.n	8008e50 <UART_SetConfig+0xd58>
 8008e10:	2380      	movs	r3, #128	; 0x80
 8008e12:	025b      	lsls	r3, r3, #9
 8008e14:	e01c      	b.n	8008e50 <UART_SetConfig+0xd58>
 8008e16:	2380      	movs	r3, #128	; 0x80
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	e019      	b.n	8008e50 <UART_SetConfig+0xd58>
 8008e1c:	2380      	movs	r3, #128	; 0x80
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	e016      	b.n	8008e50 <UART_SetConfig+0xd58>
 8008e22:	2380      	movs	r3, #128	; 0x80
 8008e24:	011b      	lsls	r3, r3, #4
 8008e26:	e013      	b.n	8008e50 <UART_SetConfig+0xd58>
 8008e28:	2380      	movs	r3, #128	; 0x80
 8008e2a:	015b      	lsls	r3, r3, #5
 8008e2c:	e010      	b.n	8008e50 <UART_SetConfig+0xd58>
 8008e2e:	4b61      	ldr	r3, [pc, #388]	; (8008fb4 <UART_SetConfig+0xebc>)
 8008e30:	e00e      	b.n	8008e50 <UART_SetConfig+0xd58>
 8008e32:	4b61      	ldr	r3, [pc, #388]	; (8008fb8 <UART_SetConfig+0xec0>)
 8008e34:	e00c      	b.n	8008e50 <UART_SetConfig+0xd58>
 8008e36:	2380      	movs	r3, #128	; 0x80
 8008e38:	019b      	lsls	r3, r3, #6
 8008e3a:	e009      	b.n	8008e50 <UART_SetConfig+0xd58>
 8008e3c:	4b5f      	ldr	r3, [pc, #380]	; (8008fbc <UART_SetConfig+0xec4>)
 8008e3e:	e007      	b.n	8008e50 <UART_SetConfig+0xd58>
 8008e40:	2380      	movs	r3, #128	; 0x80
 8008e42:	01db      	lsls	r3, r3, #7
 8008e44:	e004      	b.n	8008e50 <UART_SetConfig+0xd58>
 8008e46:	2380      	movs	r3, #128	; 0x80
 8008e48:	021b      	lsls	r3, r3, #8
 8008e4a:	e001      	b.n	8008e50 <UART_SetConfig+0xd58>
 8008e4c:	2380      	movs	r3, #128	; 0x80
 8008e4e:	025b      	lsls	r3, r3, #9
 8008e50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e52:	6852      	ldr	r2, [r2, #4]
 8008e54:	0852      	lsrs	r2, r2, #1
 8008e56:	189a      	adds	r2, r3, r2
 8008e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	0019      	movs	r1, r3
 8008e5e:	0010      	movs	r0, r2
 8008e60:	f7f7 f95a 	bl	8000118 <__udivsi3>
 8008e64:	0003      	movs	r3, r0
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8008e6a:	e007      	b.n	8008e7c <UART_SetConfig+0xd84>
      default:
        ret = HAL_ERROR;
 8008e6c:	231b      	movs	r3, #27
 8008e6e:	2258      	movs	r2, #88	; 0x58
 8008e70:	4694      	mov	ip, r2
 8008e72:	44bc      	add	ip, r7
 8008e74:	4463      	add	r3, ip
 8008e76:	2201      	movs	r2, #1
 8008e78:	701a      	strb	r2, [r3, #0]
        break;
 8008e7a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e7e:	2b0f      	cmp	r3, #15
 8008e80:	d920      	bls.n	8008ec4 <UART_SetConfig+0xdcc>
 8008e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e84:	4a4e      	ldr	r2, [pc, #312]	; (8008fc0 <UART_SetConfig+0xec8>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d81c      	bhi.n	8008ec4 <UART_SetConfig+0xdcc>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	200e      	movs	r0, #14
 8008e90:	2458      	movs	r4, #88	; 0x58
 8008e92:	193b      	adds	r3, r7, r4
 8008e94:	181b      	adds	r3, r3, r0
 8008e96:	210f      	movs	r1, #15
 8008e98:	438a      	bics	r2, r1
 8008e9a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e9e:	085b      	lsrs	r3, r3, #1
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	2207      	movs	r2, #7
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	b299      	uxth	r1, r3
 8008ea8:	193b      	adds	r3, r7, r4
 8008eaa:	181b      	adds	r3, r3, r0
 8008eac:	193a      	adds	r2, r7, r4
 8008eae:	1812      	adds	r2, r2, r0
 8008eb0:	8812      	ldrh	r2, [r2, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8008eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	193a      	adds	r2, r7, r4
 8008ebc:	1812      	adds	r2, r2, r0
 8008ebe:	8812      	ldrh	r2, [r2, #0]
 8008ec0:	60da      	str	r2, [r3, #12]
 8008ec2:	e1d4      	b.n	800926e <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8008ec4:	231b      	movs	r3, #27
 8008ec6:	2258      	movs	r2, #88	; 0x58
 8008ec8:	4694      	mov	ip, r2
 8008eca:	44bc      	add	ip, r7
 8008ecc:	4463      	add	r3, ip
 8008ece:	2201      	movs	r2, #1
 8008ed0:	701a      	strb	r2, [r3, #0]
 8008ed2:	e1cc      	b.n	800926e <UART_SetConfig+0x1176>
    }
  }
  else
  {
    switch (clocksource)
 8008ed4:	2323      	movs	r3, #35	; 0x23
 8008ed6:	2258      	movs	r2, #88	; 0x58
 8008ed8:	4694      	mov	ip, r2
 8008eda:	44bc      	add	ip, r7
 8008edc:	4463      	add	r3, ip
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d100      	bne.n	8008ee6 <UART_SetConfig+0xdee>
 8008ee4:	e08f      	b.n	8009006 <UART_SetConfig+0xf0e>
 8008ee6:	dc02      	bgt.n	8008eee <UART_SetConfig+0xdf6>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d007      	beq.n	8008efc <UART_SetConfig+0xe04>
 8008eec:	e1a4      	b.n	8009238 <UART_SetConfig+0x1140>
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	d100      	bne.n	8008ef4 <UART_SetConfig+0xdfc>
 8008ef2:	e0df      	b.n	80090b4 <UART_SetConfig+0xfbc>
 8008ef4:	2b08      	cmp	r3, #8
 8008ef6:	d100      	bne.n	8008efa <UART_SetConfig+0xe02>
 8008ef8:	e13e      	b.n	8009178 <UART_SetConfig+0x1080>
 8008efa:	e19d      	b.n	8009238 <UART_SetConfig+0x1140>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008efc:	f7fe fb7e 	bl	80075fc <HAL_RCC_GetPCLK1Freq>
 8008f00:	0003      	movs	r3, r0
 8008f02:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d100      	bne.n	8008f0e <UART_SetConfig+0xe16>
 8008f0c:	e066      	b.n	8008fdc <UART_SetConfig+0xee4>
 8008f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d100      	bne.n	8008f18 <UART_SetConfig+0xe20>
 8008f16:	e05f      	b.n	8008fd8 <UART_SetConfig+0xee0>
 8008f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d059      	beq.n	8008fd4 <UART_SetConfig+0xedc>
 8008f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d053      	beq.n	8008fd0 <UART_SetConfig+0xed8>
 8008f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2c:	2b04      	cmp	r3, #4
 8008f2e:	d04d      	beq.n	8008fcc <UART_SetConfig+0xed4>
 8008f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	2b05      	cmp	r3, #5
 8008f36:	d047      	beq.n	8008fc8 <UART_SetConfig+0xed0>
 8008f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	2b06      	cmp	r3, #6
 8008f3e:	d041      	beq.n	8008fc4 <UART_SetConfig+0xecc>
 8008f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	2b07      	cmp	r3, #7
 8008f46:	d01a      	beq.n	8008f7e <UART_SetConfig+0xe86>
 8008f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	2b08      	cmp	r3, #8
 8008f4e:	d014      	beq.n	8008f7a <UART_SetConfig+0xe82>
 8008f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	2b09      	cmp	r3, #9
 8008f56:	d00e      	beq.n	8008f76 <UART_SetConfig+0xe7e>
 8008f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	2b0a      	cmp	r3, #10
 8008f5e:	d008      	beq.n	8008f72 <UART_SetConfig+0xe7a>
 8008f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	2b0b      	cmp	r3, #11
 8008f66:	d102      	bne.n	8008f6e <UART_SetConfig+0xe76>
 8008f68:	2380      	movs	r3, #128	; 0x80
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	e037      	b.n	8008fde <UART_SetConfig+0xee6>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e035      	b.n	8008fde <UART_SetConfig+0xee6>
 8008f72:	2380      	movs	r3, #128	; 0x80
 8008f74:	e033      	b.n	8008fde <UART_SetConfig+0xee6>
 8008f76:	2340      	movs	r3, #64	; 0x40
 8008f78:	e031      	b.n	8008fde <UART_SetConfig+0xee6>
 8008f7a:	2320      	movs	r3, #32
 8008f7c:	e02f      	b.n	8008fde <UART_SetConfig+0xee6>
 8008f7e:	2310      	movs	r3, #16
 8008f80:	e02d      	b.n	8008fde <UART_SetConfig+0xee6>
 8008f82:	46c0      	nop			; (mov r8, r8)
 8008f84:	0001e848 	.word	0x0001e848
 8008f88:	01e84800 	.word	0x01e84800
 8008f8c:	0003d090 	.word	0x0003d090
 8008f90:	0007a120 	.word	0x0007a120
 8008f94:	000f4240 	.word	0x000f4240
 8008f98:	001e8480 	.word	0x001e8480
 8008f9c:	0028b0aa 	.word	0x0028b0aa
 8008fa0:	0030d400 	.word	0x0030d400
 8008fa4:	003d0900 	.word	0x003d0900
 8008fa8:	00516154 	.word	0x00516154
 8008fac:	007a1200 	.word	0x007a1200
 8008fb0:	00f42400 	.word	0x00f42400
 8008fb4:	00001554 	.word	0x00001554
 8008fb8:	00001998 	.word	0x00001998
 8008fbc:	00002aaa 	.word	0x00002aaa
 8008fc0:	0000ffff 	.word	0x0000ffff
 8008fc4:	230c      	movs	r3, #12
 8008fc6:	e00a      	b.n	8008fde <UART_SetConfig+0xee6>
 8008fc8:	230a      	movs	r3, #10
 8008fca:	e008      	b.n	8008fde <UART_SetConfig+0xee6>
 8008fcc:	2308      	movs	r3, #8
 8008fce:	e006      	b.n	8008fde <UART_SetConfig+0xee6>
 8008fd0:	2306      	movs	r3, #6
 8008fd2:	e004      	b.n	8008fde <UART_SetConfig+0xee6>
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	e002      	b.n	8008fde <UART_SetConfig+0xee6>
 8008fd8:	2302      	movs	r3, #2
 8008fda:	e000      	b.n	8008fde <UART_SetConfig+0xee6>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	0019      	movs	r1, r3
 8008fe0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008fe2:	f7f7 f899 	bl	8000118 <__udivsi3>
 8008fe6:	0003      	movs	r3, r0
 8008fe8:	001a      	movs	r2, r3
 8008fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	085b      	lsrs	r3, r3, #1
 8008ff0:	18d2      	adds	r2, r2, r3
 8008ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	0019      	movs	r1, r3
 8008ff8:	0010      	movs	r0, r2
 8008ffa:	f7f7 f88d 	bl	8000118 <__udivsi3>
 8008ffe:	0003      	movs	r3, r0
 8009000:	b29b      	uxth	r3, r3
 8009002:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8009004:	e120      	b.n	8009248 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900a:	2b00      	cmp	r3, #0
 800900c:	d043      	beq.n	8009096 <UART_SetConfig+0xf9e>
 800900e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009012:	2b01      	cmp	r3, #1
 8009014:	d03d      	beq.n	8009092 <UART_SetConfig+0xf9a>
 8009016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901a:	2b02      	cmp	r3, #2
 800901c:	d037      	beq.n	800908e <UART_SetConfig+0xf96>
 800901e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	2b03      	cmp	r3, #3
 8009024:	d031      	beq.n	800908a <UART_SetConfig+0xf92>
 8009026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	2b04      	cmp	r3, #4
 800902c:	d02b      	beq.n	8009086 <UART_SetConfig+0xf8e>
 800902e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009032:	2b05      	cmp	r3, #5
 8009034:	d025      	beq.n	8009082 <UART_SetConfig+0xf8a>
 8009036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	2b06      	cmp	r3, #6
 800903c:	d01f      	beq.n	800907e <UART_SetConfig+0xf86>
 800903e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	2b07      	cmp	r3, #7
 8009044:	d019      	beq.n	800907a <UART_SetConfig+0xf82>
 8009046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	2b08      	cmp	r3, #8
 800904c:	d013      	beq.n	8009076 <UART_SetConfig+0xf7e>
 800904e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	2b09      	cmp	r3, #9
 8009054:	d00d      	beq.n	8009072 <UART_SetConfig+0xf7a>
 8009056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905a:	2b0a      	cmp	r3, #10
 800905c:	d007      	beq.n	800906e <UART_SetConfig+0xf76>
 800905e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	2b0b      	cmp	r3, #11
 8009064:	d101      	bne.n	800906a <UART_SetConfig+0xf72>
 8009066:	4b8e      	ldr	r3, [pc, #568]	; (80092a0 <UART_SetConfig+0x11a8>)
 8009068:	e016      	b.n	8009098 <UART_SetConfig+0xfa0>
 800906a:	4b8e      	ldr	r3, [pc, #568]	; (80092a4 <UART_SetConfig+0x11ac>)
 800906c:	e014      	b.n	8009098 <UART_SetConfig+0xfa0>
 800906e:	4b8e      	ldr	r3, [pc, #568]	; (80092a8 <UART_SetConfig+0x11b0>)
 8009070:	e012      	b.n	8009098 <UART_SetConfig+0xfa0>
 8009072:	4b8e      	ldr	r3, [pc, #568]	; (80092ac <UART_SetConfig+0x11b4>)
 8009074:	e010      	b.n	8009098 <UART_SetConfig+0xfa0>
 8009076:	4b8e      	ldr	r3, [pc, #568]	; (80092b0 <UART_SetConfig+0x11b8>)
 8009078:	e00e      	b.n	8009098 <UART_SetConfig+0xfa0>
 800907a:	4b8e      	ldr	r3, [pc, #568]	; (80092b4 <UART_SetConfig+0x11bc>)
 800907c:	e00c      	b.n	8009098 <UART_SetConfig+0xfa0>
 800907e:	4b8e      	ldr	r3, [pc, #568]	; (80092b8 <UART_SetConfig+0x11c0>)
 8009080:	e00a      	b.n	8009098 <UART_SetConfig+0xfa0>
 8009082:	4b8e      	ldr	r3, [pc, #568]	; (80092bc <UART_SetConfig+0x11c4>)
 8009084:	e008      	b.n	8009098 <UART_SetConfig+0xfa0>
 8009086:	4b8e      	ldr	r3, [pc, #568]	; (80092c0 <UART_SetConfig+0x11c8>)
 8009088:	e006      	b.n	8009098 <UART_SetConfig+0xfa0>
 800908a:	4b8e      	ldr	r3, [pc, #568]	; (80092c4 <UART_SetConfig+0x11cc>)
 800908c:	e004      	b.n	8009098 <UART_SetConfig+0xfa0>
 800908e:	4b8e      	ldr	r3, [pc, #568]	; (80092c8 <UART_SetConfig+0x11d0>)
 8009090:	e002      	b.n	8009098 <UART_SetConfig+0xfa0>
 8009092:	4b8e      	ldr	r3, [pc, #568]	; (80092cc <UART_SetConfig+0x11d4>)
 8009094:	e000      	b.n	8009098 <UART_SetConfig+0xfa0>
 8009096:	4b83      	ldr	r3, [pc, #524]	; (80092a4 <UART_SetConfig+0x11ac>)
 8009098:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800909a:	6852      	ldr	r2, [r2, #4]
 800909c:	0852      	lsrs	r2, r2, #1
 800909e:	189a      	adds	r2, r3, r2
 80090a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	0019      	movs	r1, r3
 80090a6:	0010      	movs	r0, r2
 80090a8:	f7f7 f836 	bl	8000118 <__udivsi3>
 80090ac:	0003      	movs	r3, r0
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80090b2:	e0c9      	b.n	8009248 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090b4:	f7fe fa16 	bl	80074e4 <HAL_RCC_GetSysClockFreq>
 80090b8:	0003      	movs	r3, r0
 80090ba:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d044      	beq.n	800914e <UART_SetConfig+0x1056>
 80090c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d03e      	beq.n	800914a <UART_SetConfig+0x1052>
 80090cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d038      	beq.n	8009146 <UART_SetConfig+0x104e>
 80090d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d032      	beq.n	8009142 <UART_SetConfig+0x104a>
 80090dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e0:	2b04      	cmp	r3, #4
 80090e2:	d02c      	beq.n	800913e <UART_SetConfig+0x1046>
 80090e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e8:	2b05      	cmp	r3, #5
 80090ea:	d026      	beq.n	800913a <UART_SetConfig+0x1042>
 80090ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f0:	2b06      	cmp	r3, #6
 80090f2:	d020      	beq.n	8009136 <UART_SetConfig+0x103e>
 80090f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f8:	2b07      	cmp	r3, #7
 80090fa:	d01a      	beq.n	8009132 <UART_SetConfig+0x103a>
 80090fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	2b08      	cmp	r3, #8
 8009102:	d014      	beq.n	800912e <UART_SetConfig+0x1036>
 8009104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	2b09      	cmp	r3, #9
 800910a:	d00e      	beq.n	800912a <UART_SetConfig+0x1032>
 800910c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800910e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009110:	2b0a      	cmp	r3, #10
 8009112:	d008      	beq.n	8009126 <UART_SetConfig+0x102e>
 8009114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	2b0b      	cmp	r3, #11
 800911a:	d102      	bne.n	8009122 <UART_SetConfig+0x102a>
 800911c:	2380      	movs	r3, #128	; 0x80
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	e016      	b.n	8009150 <UART_SetConfig+0x1058>
 8009122:	2301      	movs	r3, #1
 8009124:	e014      	b.n	8009150 <UART_SetConfig+0x1058>
 8009126:	2380      	movs	r3, #128	; 0x80
 8009128:	e012      	b.n	8009150 <UART_SetConfig+0x1058>
 800912a:	2340      	movs	r3, #64	; 0x40
 800912c:	e010      	b.n	8009150 <UART_SetConfig+0x1058>
 800912e:	2320      	movs	r3, #32
 8009130:	e00e      	b.n	8009150 <UART_SetConfig+0x1058>
 8009132:	2310      	movs	r3, #16
 8009134:	e00c      	b.n	8009150 <UART_SetConfig+0x1058>
 8009136:	230c      	movs	r3, #12
 8009138:	e00a      	b.n	8009150 <UART_SetConfig+0x1058>
 800913a:	230a      	movs	r3, #10
 800913c:	e008      	b.n	8009150 <UART_SetConfig+0x1058>
 800913e:	2308      	movs	r3, #8
 8009140:	e006      	b.n	8009150 <UART_SetConfig+0x1058>
 8009142:	2306      	movs	r3, #6
 8009144:	e004      	b.n	8009150 <UART_SetConfig+0x1058>
 8009146:	2304      	movs	r3, #4
 8009148:	e002      	b.n	8009150 <UART_SetConfig+0x1058>
 800914a:	2302      	movs	r3, #2
 800914c:	e000      	b.n	8009150 <UART_SetConfig+0x1058>
 800914e:	2301      	movs	r3, #1
 8009150:	0019      	movs	r1, r3
 8009152:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009154:	f7f6 ffe0 	bl	8000118 <__udivsi3>
 8009158:	0003      	movs	r3, r0
 800915a:	001a      	movs	r2, r3
 800915c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	085b      	lsrs	r3, r3, #1
 8009162:	18d2      	adds	r2, r2, r3
 8009164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	0019      	movs	r1, r3
 800916a:	0010      	movs	r0, r2
 800916c:	f7f6 ffd4 	bl	8000118 <__udivsi3>
 8009170:	0003      	movs	r3, r0
 8009172:	b29b      	uxth	r3, r3
 8009174:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8009176:	e067      	b.n	8009248 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	2b00      	cmp	r3, #0
 800917e:	d04b      	beq.n	8009218 <UART_SetConfig+0x1120>
 8009180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009184:	2b01      	cmp	r3, #1
 8009186:	d044      	beq.n	8009212 <UART_SetConfig+0x111a>
 8009188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	2b02      	cmp	r3, #2
 800918e:	d03d      	beq.n	800920c <UART_SetConfig+0x1114>
 8009190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009194:	2b03      	cmp	r3, #3
 8009196:	d037      	beq.n	8009208 <UART_SetConfig+0x1110>
 8009198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	2b04      	cmp	r3, #4
 800919e:	d030      	beq.n	8009202 <UART_SetConfig+0x110a>
 80091a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a4:	2b05      	cmp	r3, #5
 80091a6:	d02a      	beq.n	80091fe <UART_SetConfig+0x1106>
 80091a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ac:	2b06      	cmp	r3, #6
 80091ae:	d024      	beq.n	80091fa <UART_SetConfig+0x1102>
 80091b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	2b07      	cmp	r3, #7
 80091b6:	d01d      	beq.n	80091f4 <UART_SetConfig+0x10fc>
 80091b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	2b08      	cmp	r3, #8
 80091be:	d016      	beq.n	80091ee <UART_SetConfig+0x10f6>
 80091c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	2b09      	cmp	r3, #9
 80091c6:	d00f      	beq.n	80091e8 <UART_SetConfig+0x10f0>
 80091c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	2b0a      	cmp	r3, #10
 80091ce:	d008      	beq.n	80091e2 <UART_SetConfig+0x10ea>
 80091d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	2b0b      	cmp	r3, #11
 80091d6:	d101      	bne.n	80091dc <UART_SetConfig+0x10e4>
 80091d8:	2380      	movs	r3, #128	; 0x80
 80091da:	e01f      	b.n	800921c <UART_SetConfig+0x1124>
 80091dc:	2380      	movs	r3, #128	; 0x80
 80091de:	021b      	lsls	r3, r3, #8
 80091e0:	e01c      	b.n	800921c <UART_SetConfig+0x1124>
 80091e2:	2380      	movs	r3, #128	; 0x80
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	e019      	b.n	800921c <UART_SetConfig+0x1124>
 80091e8:	2380      	movs	r3, #128	; 0x80
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	e016      	b.n	800921c <UART_SetConfig+0x1124>
 80091ee:	2380      	movs	r3, #128	; 0x80
 80091f0:	00db      	lsls	r3, r3, #3
 80091f2:	e013      	b.n	800921c <UART_SetConfig+0x1124>
 80091f4:	2380      	movs	r3, #128	; 0x80
 80091f6:	011b      	lsls	r3, r3, #4
 80091f8:	e010      	b.n	800921c <UART_SetConfig+0x1124>
 80091fa:	4b35      	ldr	r3, [pc, #212]	; (80092d0 <UART_SetConfig+0x11d8>)
 80091fc:	e00e      	b.n	800921c <UART_SetConfig+0x1124>
 80091fe:	4b35      	ldr	r3, [pc, #212]	; (80092d4 <UART_SetConfig+0x11dc>)
 8009200:	e00c      	b.n	800921c <UART_SetConfig+0x1124>
 8009202:	2380      	movs	r3, #128	; 0x80
 8009204:	015b      	lsls	r3, r3, #5
 8009206:	e009      	b.n	800921c <UART_SetConfig+0x1124>
 8009208:	4b33      	ldr	r3, [pc, #204]	; (80092d8 <UART_SetConfig+0x11e0>)
 800920a:	e007      	b.n	800921c <UART_SetConfig+0x1124>
 800920c:	2380      	movs	r3, #128	; 0x80
 800920e:	019b      	lsls	r3, r3, #6
 8009210:	e004      	b.n	800921c <UART_SetConfig+0x1124>
 8009212:	2380      	movs	r3, #128	; 0x80
 8009214:	01db      	lsls	r3, r3, #7
 8009216:	e001      	b.n	800921c <UART_SetConfig+0x1124>
 8009218:	2380      	movs	r3, #128	; 0x80
 800921a:	021b      	lsls	r3, r3, #8
 800921c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800921e:	6852      	ldr	r2, [r2, #4]
 8009220:	0852      	lsrs	r2, r2, #1
 8009222:	189a      	adds	r2, r3, r2
 8009224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	0019      	movs	r1, r3
 800922a:	0010      	movs	r0, r2
 800922c:	f7f6 ff74 	bl	8000118 <__udivsi3>
 8009230:	0003      	movs	r3, r0
 8009232:	b29b      	uxth	r3, r3
 8009234:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8009236:	e007      	b.n	8009248 <UART_SetConfig+0x1150>
      default:
        ret = HAL_ERROR;
 8009238:	231b      	movs	r3, #27
 800923a:	2258      	movs	r2, #88	; 0x58
 800923c:	4694      	mov	ip, r2
 800923e:	44bc      	add	ip, r7
 8009240:	4463      	add	r3, ip
 8009242:	2201      	movs	r2, #1
 8009244:	701a      	strb	r2, [r3, #0]
        break;
 8009246:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800924a:	2b0f      	cmp	r3, #15
 800924c:	d908      	bls.n	8009260 <UART_SetConfig+0x1168>
 800924e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009250:	4a22      	ldr	r2, [pc, #136]	; (80092dc <UART_SetConfig+0x11e4>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d804      	bhi.n	8009260 <UART_SetConfig+0x1168>
    {
      huart->Instance->BRR = usartdiv;
 8009256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800925c:	60da      	str	r2, [r3, #12]
 800925e:	e006      	b.n	800926e <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8009260:	231b      	movs	r3, #27
 8009262:	2258      	movs	r2, #88	; 0x58
 8009264:	4694      	mov	ip, r2
 8009266:	44bc      	add	ip, r7
 8009268:	4463      	add	r3, ip
 800926a:	2201      	movs	r2, #1
 800926c:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800926e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009270:	226a      	movs	r2, #106	; 0x6a
 8009272:	2101      	movs	r1, #1
 8009274:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009278:	2268      	movs	r2, #104	; 0x68
 800927a:	2101      	movs	r1, #1
 800927c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800927e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009280:	2200      	movs	r2, #0
 8009282:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009286:	2200      	movs	r2, #0
 8009288:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800928a:	231b      	movs	r3, #27
 800928c:	2258      	movs	r2, #88	; 0x58
 800928e:	4694      	mov	ip, r2
 8009290:	44bc      	add	ip, r7
 8009292:	4463      	add	r3, ip
 8009294:	781b      	ldrb	r3, [r3, #0]
}
 8009296:	0018      	movs	r0, r3
 8009298:	46bd      	mov	sp, r7
 800929a:	b021      	add	sp, #132	; 0x84
 800929c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800929e:	46c0      	nop			; (mov r8, r8)
 80092a0:	0000f424 	.word	0x0000f424
 80092a4:	00f42400 	.word	0x00f42400
 80092a8:	0001e848 	.word	0x0001e848
 80092ac:	0003d090 	.word	0x0003d090
 80092b0:	0007a120 	.word	0x0007a120
 80092b4:	000f4240 	.word	0x000f4240
 80092b8:	00145855 	.word	0x00145855
 80092bc:	00186a00 	.word	0x00186a00
 80092c0:	001e8480 	.word	0x001e8480
 80092c4:	0028b0aa 	.word	0x0028b0aa
 80092c8:	003d0900 	.word	0x003d0900
 80092cc:	007a1200 	.word	0x007a1200
 80092d0:	00000aaa 	.word	0x00000aaa
 80092d4:	00000ccc 	.word	0x00000ccc
 80092d8:	00001555 	.word	0x00001555
 80092dc:	0000ffff 	.word	0x0000ffff

080092e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	2201      	movs	r2, #1
 80092ee:	4013      	ands	r3, r2
 80092f0:	d00b      	beq.n	800930a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	4a4a      	ldr	r2, [pc, #296]	; (8009424 <UART_AdvFeatureConfig+0x144>)
 80092fa:	4013      	ands	r3, r2
 80092fc:	0019      	movs	r1, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	2202      	movs	r2, #2
 8009310:	4013      	ands	r3, r2
 8009312:	d00b      	beq.n	800932c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	4a43      	ldr	r2, [pc, #268]	; (8009428 <UART_AdvFeatureConfig+0x148>)
 800931c:	4013      	ands	r3, r2
 800931e:	0019      	movs	r1, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	430a      	orrs	r2, r1
 800932a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	2204      	movs	r2, #4
 8009332:	4013      	ands	r3, r2
 8009334:	d00b      	beq.n	800934e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	4a3b      	ldr	r2, [pc, #236]	; (800942c <UART_AdvFeatureConfig+0x14c>)
 800933e:	4013      	ands	r3, r2
 8009340:	0019      	movs	r1, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009352:	2208      	movs	r2, #8
 8009354:	4013      	ands	r3, r2
 8009356:	d00b      	beq.n	8009370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	4a34      	ldr	r2, [pc, #208]	; (8009430 <UART_AdvFeatureConfig+0x150>)
 8009360:	4013      	ands	r3, r2
 8009362:	0019      	movs	r1, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009374:	2210      	movs	r2, #16
 8009376:	4013      	ands	r3, r2
 8009378:	d00b      	beq.n	8009392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	4a2c      	ldr	r2, [pc, #176]	; (8009434 <UART_AdvFeatureConfig+0x154>)
 8009382:	4013      	ands	r3, r2
 8009384:	0019      	movs	r1, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009396:	2220      	movs	r2, #32
 8009398:	4013      	ands	r3, r2
 800939a:	d00b      	beq.n	80093b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	4a25      	ldr	r2, [pc, #148]	; (8009438 <UART_AdvFeatureConfig+0x158>)
 80093a4:	4013      	ands	r3, r2
 80093a6:	0019      	movs	r1, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b8:	2240      	movs	r2, #64	; 0x40
 80093ba:	4013      	ands	r3, r2
 80093bc:	d01d      	beq.n	80093fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	4a1d      	ldr	r2, [pc, #116]	; (800943c <UART_AdvFeatureConfig+0x15c>)
 80093c6:	4013      	ands	r3, r2
 80093c8:	0019      	movs	r1, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093da:	2380      	movs	r3, #128	; 0x80
 80093dc:	035b      	lsls	r3, r3, #13
 80093de:	429a      	cmp	r2, r3
 80093e0:	d10b      	bne.n	80093fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	4a15      	ldr	r2, [pc, #84]	; (8009440 <UART_AdvFeatureConfig+0x160>)
 80093ea:	4013      	ands	r3, r2
 80093ec:	0019      	movs	r1, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fe:	2280      	movs	r2, #128	; 0x80
 8009400:	4013      	ands	r3, r2
 8009402:	d00b      	beq.n	800941c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	4a0e      	ldr	r2, [pc, #56]	; (8009444 <UART_AdvFeatureConfig+0x164>)
 800940c:	4013      	ands	r3, r2
 800940e:	0019      	movs	r1, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	430a      	orrs	r2, r1
 800941a:	605a      	str	r2, [r3, #4]
  }
}
 800941c:	46c0      	nop			; (mov r8, r8)
 800941e:	46bd      	mov	sp, r7
 8009420:	b002      	add	sp, #8
 8009422:	bd80      	pop	{r7, pc}
 8009424:	fffdffff 	.word	0xfffdffff
 8009428:	fffeffff 	.word	0xfffeffff
 800942c:	fffbffff 	.word	0xfffbffff
 8009430:	ffff7fff 	.word	0xffff7fff
 8009434:	ffffefff 	.word	0xffffefff
 8009438:	ffffdfff 	.word	0xffffdfff
 800943c:	ffefffff 	.word	0xffefffff
 8009440:	ff9fffff 	.word	0xff9fffff
 8009444:	fff7ffff 	.word	0xfff7ffff

08009448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af02      	add	r7, sp, #8
 800944e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2288      	movs	r2, #136	; 0x88
 8009454:	2100      	movs	r1, #0
 8009456:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009458:	f7fb fbfa 	bl	8004c50 <HAL_GetTick>
 800945c:	0003      	movs	r3, r0
 800945e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2208      	movs	r2, #8
 8009468:	4013      	ands	r3, r2
 800946a:	2b08      	cmp	r3, #8
 800946c:	d10d      	bne.n	800948a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	2380      	movs	r3, #128	; 0x80
 8009472:	0399      	lsls	r1, r3, #14
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	4b18      	ldr	r3, [pc, #96]	; (80094d8 <UART_CheckIdleState+0x90>)
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	0013      	movs	r3, r2
 800947c:	2200      	movs	r2, #0
 800947e:	f000 f82d 	bl	80094dc <UART_WaitOnFlagUntilTimeout>
 8009482:	1e03      	subs	r3, r0, #0
 8009484:	d001      	beq.n	800948a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e021      	b.n	80094ce <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2204      	movs	r2, #4
 8009492:	4013      	ands	r3, r2
 8009494:	2b04      	cmp	r3, #4
 8009496:	d10d      	bne.n	80094b4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	2380      	movs	r3, #128	; 0x80
 800949c:	03d9      	lsls	r1, r3, #15
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <UART_CheckIdleState+0x90>)
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	0013      	movs	r3, r2
 80094a6:	2200      	movs	r2, #0
 80094a8:	f000 f818 	bl	80094dc <UART_WaitOnFlagUntilTimeout>
 80094ac:	1e03      	subs	r3, r0, #0
 80094ae:	d001      	beq.n	80094b4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e00c      	b.n	80094ce <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2280      	movs	r2, #128	; 0x80
 80094b8:	2120      	movs	r1, #32
 80094ba:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2284      	movs	r2, #132	; 0x84
 80094c0:	2120      	movs	r1, #32
 80094c2:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	227c      	movs	r2, #124	; 0x7c
 80094c8:	2100      	movs	r1, #0
 80094ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	0018      	movs	r0, r3
 80094d0:	46bd      	mov	sp, r7
 80094d2:	b004      	add	sp, #16
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	46c0      	nop			; (mov r8, r8)
 80094d8:	01ffffff 	.word	0x01ffffff

080094dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	603b      	str	r3, [r7, #0]
 80094e8:	1dfb      	adds	r3, r7, #7
 80094ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ec:	e02b      	b.n	8009546 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	3301      	adds	r3, #1
 80094f2:	d028      	beq.n	8009546 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f4:	f7fb fbac 	bl	8004c50 <HAL_GetTick>
 80094f8:	0002      	movs	r2, r0
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	429a      	cmp	r2, r3
 8009502:	d302      	bcc.n	800950a <UART_WaitOnFlagUntilTimeout+0x2e>
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d11d      	bne.n	8009546 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4916      	ldr	r1, [pc, #88]	; (8009570 <UART_WaitOnFlagUntilTimeout+0x94>)
 8009516:	400a      	ands	r2, r1
 8009518:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2101      	movs	r1, #1
 8009526:	438a      	bics	r2, r1
 8009528:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2280      	movs	r2, #128	; 0x80
 800952e:	2120      	movs	r1, #32
 8009530:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2284      	movs	r2, #132	; 0x84
 8009536:	2120      	movs	r1, #32
 8009538:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	227c      	movs	r2, #124	; 0x7c
 800953e:	2100      	movs	r1, #0
 8009540:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e00f      	b.n	8009566 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	4013      	ands	r3, r2
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	425a      	negs	r2, r3
 8009556:	4153      	adcs	r3, r2
 8009558:	b2db      	uxtb	r3, r3
 800955a:	001a      	movs	r2, r3
 800955c:	1dfb      	adds	r3, r7, #7
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d0c4      	beq.n	80094ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	0018      	movs	r0, r3
 8009568:	46bd      	mov	sp, r7
 800956a:	b004      	add	sp, #16
 800956c:	bd80      	pop	{r7, pc}
 800956e:	46c0      	nop			; (mov r8, r8)
 8009570:	fffffe5f 	.word	0xfffffe5f

08009574 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	21c0      	movs	r1, #192	; 0xc0
 8009588:	438a      	bics	r2, r1
 800958a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4905      	ldr	r1, [pc, #20]	; (80095ac <UART_EndTxTransfer+0x38>)
 8009598:	400a      	ands	r2, r1
 800959a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2280      	movs	r2, #128	; 0x80
 80095a0:	2120      	movs	r1, #32
 80095a2:	5099      	str	r1, [r3, r2]
}
 80095a4:	46c0      	nop			; (mov r8, r8)
 80095a6:	46bd      	mov	sp, r7
 80095a8:	b002      	add	sp, #8
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	ff7fffff 	.word	0xff7fffff

080095b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	490b      	ldr	r1, [pc, #44]	; (80095f0 <UART_EndRxTransfer+0x40>)
 80095c4:	400a      	ands	r2, r1
 80095c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	689a      	ldr	r2, [r3, #8]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4908      	ldr	r1, [pc, #32]	; (80095f4 <UART_EndRxTransfer+0x44>)
 80095d4:	400a      	ands	r2, r1
 80095d6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2284      	movs	r2, #132	; 0x84
 80095dc:	2120      	movs	r1, #32
 80095de:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80095e6:	46c0      	nop			; (mov r8, r8)
 80095e8:	46bd      	mov	sp, r7
 80095ea:	b002      	add	sp, #8
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	46c0      	nop			; (mov r8, r8)
 80095f0:	fffffedf 	.word	0xfffffedf
 80095f4:	effffffe 	.word	0xeffffffe

080095f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009604:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2220      	movs	r2, #32
 800960e:	4013      	ands	r3, r2
 8009610:	d114      	bne.n	800963c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2256      	movs	r2, #86	; 0x56
 8009616:	2100      	movs	r1, #0
 8009618:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	689a      	ldr	r2, [r3, #8]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2180      	movs	r1, #128	; 0x80
 8009626:	438a      	bics	r2, r1
 8009628:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2140      	movs	r1, #64	; 0x40
 8009636:	430a      	orrs	r2, r1
 8009638:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800963a:	e003      	b.n	8009644 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	0018      	movs	r0, r3
 8009640:	f7fe fd3a 	bl	80080b8 <HAL_UART_TxCpltCallback>
}
 8009644:	46c0      	nop			; (mov r8, r8)
 8009646:	46bd      	mov	sp, r7
 8009648:	b004      	add	sp, #16
 800964a:	bd80      	pop	{r7, pc}

0800964c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009658:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	0018      	movs	r0, r3
 800965e:	f7fe fd33 	bl	80080c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009662:	46c0      	nop			; (mov r8, r8)
 8009664:	46bd      	mov	sp, r7
 8009666:	b004      	add	sp, #16
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009678:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2220      	movs	r2, #32
 8009682:	4013      	ands	r3, r2
 8009684:	d11f      	bne.n	80096c6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	225e      	movs	r2, #94	; 0x5e
 800968a:	2100      	movs	r1, #0
 800968c:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	490f      	ldr	r1, [pc, #60]	; (80096d8 <UART_DMAReceiveCplt+0x6c>)
 800969a:	400a      	ands	r2, r1
 800969c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	689a      	ldr	r2, [r3, #8]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2101      	movs	r1, #1
 80096aa:	438a      	bics	r2, r1
 80096ac:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689a      	ldr	r2, [r3, #8]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2140      	movs	r1, #64	; 0x40
 80096ba:	438a      	bics	r2, r1
 80096bc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2284      	movs	r2, #132	; 0x84
 80096c2:	2120      	movs	r1, #32
 80096c4:	5099      	str	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	0018      	movs	r0, r3
 80096ca:	f7fa f893 	bl	80037f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096ce:	46c0      	nop			; (mov r8, r8)
 80096d0:	46bd      	mov	sp, r7
 80096d2:	b004      	add	sp, #16
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	46c0      	nop			; (mov r8, r8)
 80096d8:	fffffeff 	.word	0xfffffeff

080096dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	0018      	movs	r0, r3
 80096ee:	f7fe fcf3 	bl	80080d8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f2:	46c0      	nop			; (mov r8, r8)
 80096f4:	46bd      	mov	sp, r7
 80096f6:	b004      	add	sp, #16
 80096f8:	bd80      	pop	{r7, pc}

080096fa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b086      	sub	sp, #24
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009706:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	2280      	movs	r2, #128	; 0x80
 800970c:	589b      	ldr	r3, [r3, r2]
 800970e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2284      	movs	r2, #132	; 0x84
 8009714:	589b      	ldr	r3, [r3, r2]
 8009716:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	2280      	movs	r2, #128	; 0x80
 8009720:	4013      	ands	r3, r2
 8009722:	2b80      	cmp	r3, #128	; 0x80
 8009724:	d10a      	bne.n	800973c <UART_DMAError+0x42>
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2b21      	cmp	r3, #33	; 0x21
 800972a:	d107      	bne.n	800973c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	2256      	movs	r2, #86	; 0x56
 8009730:	2100      	movs	r1, #0
 8009732:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	0018      	movs	r0, r3
 8009738:	f7ff ff1c 	bl	8009574 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	2240      	movs	r2, #64	; 0x40
 8009744:	4013      	ands	r3, r2
 8009746:	2b40      	cmp	r3, #64	; 0x40
 8009748:	d10a      	bne.n	8009760 <UART_DMAError+0x66>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b22      	cmp	r3, #34	; 0x22
 800974e:	d107      	bne.n	8009760 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	225e      	movs	r2, #94	; 0x5e
 8009754:	2100      	movs	r1, #0
 8009756:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	0018      	movs	r0, r3
 800975c:	f7ff ff28 	bl	80095b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2288      	movs	r2, #136	; 0x88
 8009764:	589b      	ldr	r3, [r3, r2]
 8009766:	2210      	movs	r2, #16
 8009768:	431a      	orrs	r2, r3
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2188      	movs	r1, #136	; 0x88
 800976e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	0018      	movs	r0, r3
 8009774:	f7fe fcb8 	bl	80080e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009778:	46c0      	nop			; (mov r8, r8)
 800977a:	46bd      	mov	sp, r7
 800977c:	b006      	add	sp, #24
 800977e:	bd80      	pop	{r7, pc}

08009780 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	225e      	movs	r2, #94	; 0x5e
 8009792:	2100      	movs	r1, #0
 8009794:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2256      	movs	r2, #86	; 0x56
 800979a:	2100      	movs	r1, #0
 800979c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	0018      	movs	r0, r3
 80097a2:	f7fe fca1 	bl	80080e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097a6:	46c0      	nop			; (mov r8, r8)
 80097a8:	46bd      	mov	sp, r7
 80097aa:	b004      	add	sp, #16
 80097ac:	bd80      	pop	{r7, pc}

080097ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2140      	movs	r1, #64	; 0x40
 80097c2:	438a      	bics	r2, r1
 80097c4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2280      	movs	r2, #128	; 0x80
 80097ca:	2120      	movs	r1, #32
 80097cc:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	0018      	movs	r0, r3
 80097d8:	f7fe fc6e 	bl	80080b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097dc:	46c0      	nop			; (mov r8, r8)
 80097de:	46bd      	mov	sp, r7
 80097e0:	b002      	add	sp, #8
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097ec:	46c0      	nop			; (mov r8, r8)
 80097ee:	46bd      	mov	sp, r7
 80097f0:	b002      	add	sp, #8
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80097fc:	46c0      	nop			; (mov r8, r8)
 80097fe:	46bd      	mov	sp, r7
 8009800:	b002      	add	sp, #8
 8009802:	bd80      	pop	{r7, pc}

08009804 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800980c:	46c0      	nop			; (mov r8, r8)
 800980e:	46bd      	mov	sp, r7
 8009810:	b002      	add	sp, #8
 8009812:	bd80      	pop	{r7, pc}

08009814 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	227c      	movs	r2, #124	; 0x7c
 8009820:	5c9b      	ldrb	r3, [r3, r2]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d101      	bne.n	800982a <HAL_UARTEx_DisableFifoMode+0x16>
 8009826:	2302      	movs	r3, #2
 8009828:	e027      	b.n	800987a <HAL_UARTEx_DisableFifoMode+0x66>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	227c      	movs	r2, #124	; 0x7c
 800982e:	2101      	movs	r1, #1
 8009830:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2280      	movs	r2, #128	; 0x80
 8009836:	2124      	movs	r1, #36	; 0x24
 8009838:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2101      	movs	r1, #1
 800984e:	438a      	bics	r2, r1
 8009850:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4a0b      	ldr	r2, [pc, #44]	; (8009884 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009856:	4013      	ands	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2280      	movs	r2, #128	; 0x80
 800986c:	2120      	movs	r1, #32
 800986e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	227c      	movs	r2, #124	; 0x7c
 8009874:	2100      	movs	r1, #0
 8009876:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	0018      	movs	r0, r3
 800987c:	46bd      	mov	sp, r7
 800987e:	b004      	add	sp, #16
 8009880:	bd80      	pop	{r7, pc}
 8009882:	46c0      	nop			; (mov r8, r8)
 8009884:	dfffffff 	.word	0xdfffffff

08009888 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	227c      	movs	r2, #124	; 0x7c
 8009896:	5c9b      	ldrb	r3, [r3, r2]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d101      	bne.n	80098a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800989c:	2302      	movs	r3, #2
 800989e:	e02e      	b.n	80098fe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	227c      	movs	r2, #124	; 0x7c
 80098a4:	2101      	movs	r1, #1
 80098a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2280      	movs	r2, #128	; 0x80
 80098ac:	2124      	movs	r1, #36	; 0x24
 80098ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2101      	movs	r1, #1
 80098c4:	438a      	bics	r2, r1
 80098c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	00db      	lsls	r3, r3, #3
 80098d0:	08d9      	lsrs	r1, r3, #3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	0018      	movs	r0, r3
 80098e0:	f000 f854 	bl	800998c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2280      	movs	r2, #128	; 0x80
 80098f0:	2120      	movs	r1, #32
 80098f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	227c      	movs	r2, #124	; 0x7c
 80098f8:	2100      	movs	r1, #0
 80098fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	0018      	movs	r0, r3
 8009900:	46bd      	mov	sp, r7
 8009902:	b004      	add	sp, #16
 8009904:	bd80      	pop	{r7, pc}
	...

08009908 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	227c      	movs	r2, #124	; 0x7c
 8009916:	5c9b      	ldrb	r3, [r3, r2]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d101      	bne.n	8009920 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800991c:	2302      	movs	r3, #2
 800991e:	e02f      	b.n	8009980 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	227c      	movs	r2, #124	; 0x7c
 8009924:	2101      	movs	r1, #1
 8009926:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2280      	movs	r2, #128	; 0x80
 800992c:	2124      	movs	r1, #36	; 0x24
 800992e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2101      	movs	r1, #1
 8009944:	438a      	bics	r2, r1
 8009946:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	4a0e      	ldr	r2, [pc, #56]	; (8009988 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009950:	4013      	ands	r3, r2
 8009952:	0019      	movs	r1, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	0018      	movs	r0, r3
 8009962:	f000 f813 	bl	800998c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2280      	movs	r2, #128	; 0x80
 8009972:	2120      	movs	r1, #32
 8009974:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	227c      	movs	r2, #124	; 0x7c
 800997a:	2100      	movs	r1, #0
 800997c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	0018      	movs	r0, r3
 8009982:	46bd      	mov	sp, r7
 8009984:	b004      	add	sp, #16
 8009986:	bd80      	pop	{r7, pc}
 8009988:	f1ffffff 	.word	0xf1ffffff

0800998c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800998c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800998e:	b089      	sub	sp, #36	; 0x24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009994:	2314      	movs	r3, #20
 8009996:	18fb      	adds	r3, r7, r3
 8009998:	4a2f      	ldr	r2, [pc, #188]	; (8009a58 <UARTEx_SetNbDataToProcess+0xcc>)
 800999a:	ca03      	ldmia	r2!, {r0, r1}
 800999c:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800999e:	230c      	movs	r3, #12
 80099a0:	18fb      	adds	r3, r7, r3
 80099a2:	4a2e      	ldr	r2, [pc, #184]	; (8009a5c <UARTEx_SetNbDataToProcess+0xd0>)
 80099a4:	ca03      	ldmia	r2!, {r0, r1}
 80099a6:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d108      	bne.n	80099c2 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	226a      	movs	r2, #106	; 0x6a
 80099b4:	2101      	movs	r1, #1
 80099b6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2268      	movs	r2, #104	; 0x68
 80099bc:	2101      	movs	r1, #1
 80099be:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099c0:	e046      	b.n	8009a50 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099c2:	261f      	movs	r6, #31
 80099c4:	19bb      	adds	r3, r7, r6
 80099c6:	2208      	movs	r2, #8
 80099c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099ca:	201e      	movs	r0, #30
 80099cc:	183b      	adds	r3, r7, r0
 80099ce:	2208      	movs	r2, #8
 80099d0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	0e5b      	lsrs	r3, r3, #25
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	241d      	movs	r4, #29
 80099de:	193b      	adds	r3, r7, r4
 80099e0:	2107      	movs	r1, #7
 80099e2:	400a      	ands	r2, r1
 80099e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	0f5b      	lsrs	r3, r3, #29
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	251c      	movs	r5, #28
 80099f2:	197b      	adds	r3, r7, r5
 80099f4:	2107      	movs	r1, #7
 80099f6:	400a      	ands	r2, r1
 80099f8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80099fa:	183b      	adds	r3, r7, r0
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	197a      	adds	r2, r7, r5
 8009a00:	7812      	ldrb	r2, [r2, #0]
 8009a02:	2114      	movs	r1, #20
 8009a04:	1879      	adds	r1, r7, r1
 8009a06:	5c8a      	ldrb	r2, [r1, r2]
 8009a08:	435a      	muls	r2, r3
 8009a0a:	0010      	movs	r0, r2
 8009a0c:	197b      	adds	r3, r7, r5
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	250c      	movs	r5, #12
 8009a12:	197a      	adds	r2, r7, r5
 8009a14:	5cd3      	ldrb	r3, [r2, r3]
 8009a16:	0019      	movs	r1, r3
 8009a18:	f7f6 fc08 	bl	800022c <__divsi3>
 8009a1c:	0003      	movs	r3, r0
 8009a1e:	b299      	uxth	r1, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	226a      	movs	r2, #106	; 0x6a
 8009a24:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009a26:	19bb      	adds	r3, r7, r6
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	193a      	adds	r2, r7, r4
 8009a2c:	7812      	ldrb	r2, [r2, #0]
 8009a2e:	2114      	movs	r1, #20
 8009a30:	1879      	adds	r1, r7, r1
 8009a32:	5c8a      	ldrb	r2, [r1, r2]
 8009a34:	435a      	muls	r2, r3
 8009a36:	0010      	movs	r0, r2
 8009a38:	193b      	adds	r3, r7, r4
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	197a      	adds	r2, r7, r5
 8009a3e:	5cd3      	ldrb	r3, [r2, r3]
 8009a40:	0019      	movs	r1, r3
 8009a42:	f7f6 fbf3 	bl	800022c <__divsi3>
 8009a46:	0003      	movs	r3, r0
 8009a48:	b299      	uxth	r1, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2268      	movs	r2, #104	; 0x68
 8009a4e:	5299      	strh	r1, [r3, r2]
}
 8009a50:	46c0      	nop			; (mov r8, r8)
 8009a52:	46bd      	mov	sp, r7
 8009a54:	b009      	add	sp, #36	; 0x24
 8009a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a58:	0800b268 	.word	0x0800b268
 8009a5c:	0800b270 	.word	0x0800b270

08009a60 <__errno>:
 8009a60:	4b01      	ldr	r3, [pc, #4]	; (8009a68 <__errno+0x8>)
 8009a62:	6818      	ldr	r0, [r3, #0]
 8009a64:	4770      	bx	lr
 8009a66:	46c0      	nop			; (mov r8, r8)
 8009a68:	20000014 	.word	0x20000014

08009a6c <__libc_init_array>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	2600      	movs	r6, #0
 8009a70:	4d0c      	ldr	r5, [pc, #48]	; (8009aa4 <__libc_init_array+0x38>)
 8009a72:	4c0d      	ldr	r4, [pc, #52]	; (8009aa8 <__libc_init_array+0x3c>)
 8009a74:	1b64      	subs	r4, r4, r5
 8009a76:	10a4      	asrs	r4, r4, #2
 8009a78:	42a6      	cmp	r6, r4
 8009a7a:	d109      	bne.n	8009a90 <__libc_init_array+0x24>
 8009a7c:	2600      	movs	r6, #0
 8009a7e:	f001 fbe3 	bl	800b248 <_init>
 8009a82:	4d0a      	ldr	r5, [pc, #40]	; (8009aac <__libc_init_array+0x40>)
 8009a84:	4c0a      	ldr	r4, [pc, #40]	; (8009ab0 <__libc_init_array+0x44>)
 8009a86:	1b64      	subs	r4, r4, r5
 8009a88:	10a4      	asrs	r4, r4, #2
 8009a8a:	42a6      	cmp	r6, r4
 8009a8c:	d105      	bne.n	8009a9a <__libc_init_array+0x2e>
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	00b3      	lsls	r3, r6, #2
 8009a92:	58eb      	ldr	r3, [r5, r3]
 8009a94:	4798      	blx	r3
 8009a96:	3601      	adds	r6, #1
 8009a98:	e7ee      	b.n	8009a78 <__libc_init_array+0xc>
 8009a9a:	00b3      	lsls	r3, r6, #2
 8009a9c:	58eb      	ldr	r3, [r5, r3]
 8009a9e:	4798      	blx	r3
 8009aa0:	3601      	adds	r6, #1
 8009aa2:	e7f2      	b.n	8009a8a <__libc_init_array+0x1e>
 8009aa4:	0800b818 	.word	0x0800b818
 8009aa8:	0800b818 	.word	0x0800b818
 8009aac:	0800b818 	.word	0x0800b818
 8009ab0:	0800b81c 	.word	0x0800b81c

08009ab4 <memset>:
 8009ab4:	0003      	movs	r3, r0
 8009ab6:	1812      	adds	r2, r2, r0
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d100      	bne.n	8009abe <memset+0xa>
 8009abc:	4770      	bx	lr
 8009abe:	7019      	strb	r1, [r3, #0]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	e7f9      	b.n	8009ab8 <memset+0x4>

08009ac4 <cosf>:
 8009ac4:	b507      	push	{r0, r1, r2, lr}
 8009ac6:	4a18      	ldr	r2, [pc, #96]	; (8009b28 <cosf+0x64>)
 8009ac8:	0043      	lsls	r3, r0, #1
 8009aca:	085b      	lsrs	r3, r3, #1
 8009acc:	2100      	movs	r1, #0
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	dd13      	ble.n	8009afa <cosf+0x36>
 8009ad2:	4a16      	ldr	r2, [pc, #88]	; (8009b2c <cosf+0x68>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	dd03      	ble.n	8009ae0 <cosf+0x1c>
 8009ad8:	1c01      	adds	r1, r0, #0
 8009ada:	f7f7 fa6b 	bl	8000fb4 <__aeabi_fsub>
 8009ade:	bd0e      	pop	{r1, r2, r3, pc}
 8009ae0:	4669      	mov	r1, sp
 8009ae2:	f000 fd43 	bl	800a56c <__ieee754_rem_pio2f>
 8009ae6:	2203      	movs	r2, #3
 8009ae8:	4002      	ands	r2, r0
 8009aea:	2a01      	cmp	r2, #1
 8009aec:	d008      	beq.n	8009b00 <cosf+0x3c>
 8009aee:	2a02      	cmp	r2, #2
 8009af0:	d00e      	beq.n	8009b10 <cosf+0x4c>
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	d111      	bne.n	8009b1a <cosf+0x56>
 8009af6:	9901      	ldr	r1, [sp, #4]
 8009af8:	9800      	ldr	r0, [sp, #0]
 8009afa:	f000 feed 	bl	800a8d8 <__kernel_cosf>
 8009afe:	e7ee      	b.n	8009ade <cosf+0x1a>
 8009b00:	9901      	ldr	r1, [sp, #4]
 8009b02:	9800      	ldr	r0, [sp, #0]
 8009b04:	f001 fa32 	bl	800af6c <__kernel_sinf>
 8009b08:	2380      	movs	r3, #128	; 0x80
 8009b0a:	061b      	lsls	r3, r3, #24
 8009b0c:	18c0      	adds	r0, r0, r3
 8009b0e:	e7e6      	b.n	8009ade <cosf+0x1a>
 8009b10:	9901      	ldr	r1, [sp, #4]
 8009b12:	9800      	ldr	r0, [sp, #0]
 8009b14:	f000 fee0 	bl	800a8d8 <__kernel_cosf>
 8009b18:	e7f6      	b.n	8009b08 <cosf+0x44>
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	9901      	ldr	r1, [sp, #4]
 8009b1e:	9800      	ldr	r0, [sp, #0]
 8009b20:	f001 fa24 	bl	800af6c <__kernel_sinf>
 8009b24:	e7db      	b.n	8009ade <cosf+0x1a>
 8009b26:	46c0      	nop			; (mov r8, r8)
 8009b28:	3f490fd8 	.word	0x3f490fd8
 8009b2c:	7f7fffff 	.word	0x7f7fffff

08009b30 <sinf>:
 8009b30:	b507      	push	{r0, r1, r2, lr}
 8009b32:	4a19      	ldr	r2, [pc, #100]	; (8009b98 <sinf+0x68>)
 8009b34:	0043      	lsls	r3, r0, #1
 8009b36:	085b      	lsrs	r3, r3, #1
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	dc04      	bgt.n	8009b46 <sinf+0x16>
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2100      	movs	r1, #0
 8009b40:	f001 fa14 	bl	800af6c <__kernel_sinf>
 8009b44:	e005      	b.n	8009b52 <sinf+0x22>
 8009b46:	4a15      	ldr	r2, [pc, #84]	; (8009b9c <sinf+0x6c>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	dd03      	ble.n	8009b54 <sinf+0x24>
 8009b4c:	1c01      	adds	r1, r0, #0
 8009b4e:	f7f7 fa31 	bl	8000fb4 <__aeabi_fsub>
 8009b52:	bd0e      	pop	{r1, r2, r3, pc}
 8009b54:	4669      	mov	r1, sp
 8009b56:	f000 fd09 	bl	800a56c <__ieee754_rem_pio2f>
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	4018      	ands	r0, r3
 8009b5e:	2801      	cmp	r0, #1
 8009b60:	d007      	beq.n	8009b72 <sinf+0x42>
 8009b62:	2802      	cmp	r0, #2
 8009b64:	d00a      	beq.n	8009b7c <sinf+0x4c>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d111      	bne.n	8009b8e <sinf+0x5e>
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	9901      	ldr	r1, [sp, #4]
 8009b6e:	9800      	ldr	r0, [sp, #0]
 8009b70:	e7e6      	b.n	8009b40 <sinf+0x10>
 8009b72:	9901      	ldr	r1, [sp, #4]
 8009b74:	9800      	ldr	r0, [sp, #0]
 8009b76:	f000 feaf 	bl	800a8d8 <__kernel_cosf>
 8009b7a:	e7ea      	b.n	8009b52 <sinf+0x22>
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	9901      	ldr	r1, [sp, #4]
 8009b80:	9800      	ldr	r0, [sp, #0]
 8009b82:	f001 f9f3 	bl	800af6c <__kernel_sinf>
 8009b86:	2380      	movs	r3, #128	; 0x80
 8009b88:	061b      	lsls	r3, r3, #24
 8009b8a:	18c0      	adds	r0, r0, r3
 8009b8c:	e7e1      	b.n	8009b52 <sinf+0x22>
 8009b8e:	9901      	ldr	r1, [sp, #4]
 8009b90:	9800      	ldr	r0, [sp, #0]
 8009b92:	f000 fea1 	bl	800a8d8 <__kernel_cosf>
 8009b96:	e7f6      	b.n	8009b86 <sinf+0x56>
 8009b98:	3f490fd8 	.word	0x3f490fd8
 8009b9c:	7f7fffff 	.word	0x7f7fffff

08009ba0 <powf>:
 8009ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ba2:	2500      	movs	r5, #0
 8009ba4:	b091      	sub	sp, #68	; 0x44
 8009ba6:	1c06      	adds	r6, r0, #0
 8009ba8:	1c0f      	adds	r7, r1, #0
 8009baa:	f000 f991 	bl	8009ed0 <__ieee754_powf>
 8009bae:	4bc1      	ldr	r3, [pc, #772]	; (8009eb4 <powf+0x314>)
 8009bb0:	1c04      	adds	r4, r0, #0
 8009bb2:	575d      	ldrsb	r5, [r3, r5]
 8009bb4:	1c6b      	adds	r3, r5, #1
 8009bb6:	d100      	bne.n	8009bba <powf+0x1a>
 8009bb8:	e0df      	b.n	8009d7a <powf+0x1da>
 8009bba:	1c39      	adds	r1, r7, #0
 8009bbc:	1c38      	adds	r0, r7, #0
 8009bbe:	f7f7 fbbd 	bl	800133c <__aeabi_fcmpun>
 8009bc2:	9001      	str	r0, [sp, #4]
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d000      	beq.n	8009bca <powf+0x2a>
 8009bc8:	e0d7      	b.n	8009d7a <powf+0x1da>
 8009bca:	1c31      	adds	r1, r6, #0
 8009bcc:	1c30      	adds	r0, r6, #0
 8009bce:	f7f7 fbb5 	bl	800133c <__aeabi_fcmpun>
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	9002      	str	r0, [sp, #8]
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d021      	beq.n	8009c1e <powf+0x7e>
 8009bda:	1c38      	adds	r0, r7, #0
 8009bdc:	f7f6 fc1e 	bl	800041c <__aeabi_fcmpeq>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d100      	bne.n	8009be6 <powf+0x46>
 8009be4:	e0c9      	b.n	8009d7a <powf+0x1da>
 8009be6:	2301      	movs	r3, #1
 8009be8:	9306      	str	r3, [sp, #24]
 8009bea:	4bb3      	ldr	r3, [pc, #716]	; (8009eb8 <powf+0x318>)
 8009bec:	1c30      	adds	r0, r6, #0
 8009bee:	9307      	str	r3, [sp, #28]
 8009bf0:	9b01      	ldr	r3, [sp, #4]
 8009bf2:	930e      	str	r3, [sp, #56]	; 0x38
 8009bf4:	f7f9 f8aa 	bl	8002d4c <__aeabi_f2d>
 8009bf8:	9008      	str	r0, [sp, #32]
 8009bfa:	9109      	str	r1, [sp, #36]	; 0x24
 8009bfc:	1c38      	adds	r0, r7, #0
 8009bfe:	f7f9 f8a5 	bl	8002d4c <__aeabi_f2d>
 8009c02:	2200      	movs	r2, #0
 8009c04:	4bad      	ldr	r3, [pc, #692]	; (8009ebc <powf+0x31c>)
 8009c06:	900a      	str	r0, [sp, #40]	; 0x28
 8009c08:	910b      	str	r1, [sp, #44]	; 0x2c
 8009c0a:	920c      	str	r2, [sp, #48]	; 0x30
 8009c0c:	930d      	str	r3, [sp, #52]	; 0x34
 8009c0e:	2d02      	cmp	r5, #2
 8009c10:	d034      	beq.n	8009c7c <powf+0xdc>
 8009c12:	a806      	add	r0, sp, #24
 8009c14:	f001 fa20 	bl	800b058 <matherr>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d126      	bne.n	8009c6a <powf+0xca>
 8009c1c:	e05c      	b.n	8009cd8 <powf+0x138>
 8009c1e:	1c30      	adds	r0, r6, #0
 8009c20:	f7f6 fbfc 	bl	800041c <__aeabi_fcmpeq>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d05c      	beq.n	8009ce2 <powf+0x142>
 8009c28:	2100      	movs	r1, #0
 8009c2a:	1c38      	adds	r0, r7, #0
 8009c2c:	f7f6 fbf6 	bl	800041c <__aeabi_fcmpeq>
 8009c30:	9001      	str	r0, [sp, #4]
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d025      	beq.n	8009c82 <powf+0xe2>
 8009c36:	2301      	movs	r3, #1
 8009c38:	9306      	str	r3, [sp, #24]
 8009c3a:	4b9f      	ldr	r3, [pc, #636]	; (8009eb8 <powf+0x318>)
 8009c3c:	1c30      	adds	r0, r6, #0
 8009c3e:	9307      	str	r3, [sp, #28]
 8009c40:	9b02      	ldr	r3, [sp, #8]
 8009c42:	930e      	str	r3, [sp, #56]	; 0x38
 8009c44:	f7f9 f882 	bl	8002d4c <__aeabi_f2d>
 8009c48:	9008      	str	r0, [sp, #32]
 8009c4a:	9109      	str	r1, [sp, #36]	; 0x24
 8009c4c:	1c38      	adds	r0, r7, #0
 8009c4e:	f7f9 f87d 	bl	8002d4c <__aeabi_f2d>
 8009c52:	2200      	movs	r2, #0
 8009c54:	2300      	movs	r3, #0
 8009c56:	900a      	str	r0, [sp, #40]	; 0x28
 8009c58:	910b      	str	r1, [sp, #44]	; 0x2c
 8009c5a:	920c      	str	r2, [sp, #48]	; 0x30
 8009c5c:	930d      	str	r3, [sp, #52]	; 0x34
 8009c5e:	2d00      	cmp	r5, #0
 8009c60:	d0d7      	beq.n	8009c12 <powf+0x72>
 8009c62:	2200      	movs	r2, #0
 8009c64:	4b95      	ldr	r3, [pc, #596]	; (8009ebc <powf+0x31c>)
 8009c66:	920c      	str	r2, [sp, #48]	; 0x30
 8009c68:	930d      	str	r3, [sp, #52]	; 0x34
 8009c6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c6c:	9301      	str	r3, [sp, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d004      	beq.n	8009c7c <powf+0xdc>
 8009c72:	f7ff fef5 	bl	8009a60 <__errno>
 8009c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c78:	9301      	str	r3, [sp, #4]
 8009c7a:	6003      	str	r3, [r0, #0]
 8009c7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009c7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c80:	e078      	b.n	8009d74 <powf+0x1d4>
 8009c82:	1c38      	adds	r0, r7, #0
 8009c84:	f001 f9ee 	bl	800b064 <finitef>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d076      	beq.n	8009d7a <powf+0x1da>
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	1c38      	adds	r0, r7, #0
 8009c90:	f7f6 fbca 	bl	8000428 <__aeabi_fcmplt>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d070      	beq.n	8009d7a <powf+0x1da>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	9306      	str	r3, [sp, #24]
 8009c9c:	4b86      	ldr	r3, [pc, #536]	; (8009eb8 <powf+0x318>)
 8009c9e:	1c30      	adds	r0, r6, #0
 8009ca0:	9307      	str	r3, [sp, #28]
 8009ca2:	9b01      	ldr	r3, [sp, #4]
 8009ca4:	930e      	str	r3, [sp, #56]	; 0x38
 8009ca6:	f7f9 f851 	bl	8002d4c <__aeabi_f2d>
 8009caa:	9008      	str	r0, [sp, #32]
 8009cac:	9109      	str	r1, [sp, #36]	; 0x24
 8009cae:	1c38      	adds	r0, r7, #0
 8009cb0:	f7f9 f84c 	bl	8002d4c <__aeabi_f2d>
 8009cb4:	4b7f      	ldr	r3, [pc, #508]	; (8009eb4 <powf+0x314>)
 8009cb6:	900a      	str	r0, [sp, #40]	; 0x28
 8009cb8:	910b      	str	r1, [sp, #44]	; 0x2c
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	b25b      	sxtb	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d104      	bne.n	8009ccc <powf+0x12c>
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	920c      	str	r2, [sp, #48]	; 0x30
 8009cc8:	930d      	str	r3, [sp, #52]	; 0x34
 8009cca:	e7a2      	b.n	8009c12 <powf+0x72>
 8009ccc:	2000      	movs	r0, #0
 8009cce:	497c      	ldr	r1, [pc, #496]	; (8009ec0 <powf+0x320>)
 8009cd0:	900c      	str	r0, [sp, #48]	; 0x30
 8009cd2:	910d      	str	r1, [sp, #52]	; 0x34
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d19c      	bne.n	8009c12 <powf+0x72>
 8009cd8:	f7ff fec2 	bl	8009a60 <__errno>
 8009cdc:	2321      	movs	r3, #33	; 0x21
 8009cde:	6003      	str	r3, [r0, #0]
 8009ce0:	e7c3      	b.n	8009c6a <powf+0xca>
 8009ce2:	1c20      	adds	r0, r4, #0
 8009ce4:	f001 f9be 	bl	800b064 <finitef>
 8009ce8:	1e05      	subs	r5, r0, #0
 8009cea:	d000      	beq.n	8009cee <powf+0x14e>
 8009cec:	e0aa      	b.n	8009e44 <powf+0x2a4>
 8009cee:	1c30      	adds	r0, r6, #0
 8009cf0:	f001 f9b8 	bl	800b064 <finitef>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d100      	bne.n	8009cfa <powf+0x15a>
 8009cf8:	e0a4      	b.n	8009e44 <powf+0x2a4>
 8009cfa:	1c38      	adds	r0, r7, #0
 8009cfc:	f001 f9b2 	bl	800b064 <finitef>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d100      	bne.n	8009d06 <powf+0x166>
 8009d04:	e09e      	b.n	8009e44 <powf+0x2a4>
 8009d06:	1c30      	adds	r0, r6, #0
 8009d08:	f7f9 f820 	bl	8002d4c <__aeabi_f2d>
 8009d0c:	9002      	str	r0, [sp, #8]
 8009d0e:	9103      	str	r1, [sp, #12]
 8009d10:	1c38      	adds	r0, r7, #0
 8009d12:	f7f9 f81b 	bl	8002d4c <__aeabi_f2d>
 8009d16:	4b67      	ldr	r3, [pc, #412]	; (8009eb4 <powf+0x314>)
 8009d18:	9004      	str	r0, [sp, #16]
 8009d1a:	9105      	str	r1, [sp, #20]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	1c21      	adds	r1, r4, #0
 8009d20:	b25b      	sxtb	r3, r3
 8009d22:	1c20      	adds	r0, r4, #0
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	f7f7 fb09 	bl	800133c <__aeabi_fcmpun>
 8009d2a:	ac06      	add	r4, sp, #24
 8009d2c:	4b62      	ldr	r3, [pc, #392]	; (8009eb8 <powf+0x318>)
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d036      	beq.n	8009da0 <powf+0x200>
 8009d32:	2201      	movs	r2, #1
 8009d34:	6063      	str	r3, [r4, #4]
 8009d36:	9206      	str	r2, [sp, #24]
 8009d38:	9a02      	ldr	r2, [sp, #8]
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	60a2      	str	r2, [r4, #8]
 8009d3e:	60e3      	str	r3, [r4, #12]
 8009d40:	9a04      	ldr	r2, [sp, #16]
 8009d42:	9b05      	ldr	r3, [sp, #20]
 8009d44:	6122      	str	r2, [r4, #16]
 8009d46:	6163      	str	r3, [r4, #20]
 8009d48:	9b01      	ldr	r3, [sp, #4]
 8009d4a:	6225      	str	r5, [r4, #32]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d117      	bne.n	8009d80 <powf+0x1e0>
 8009d50:	2200      	movs	r2, #0
 8009d52:	2300      	movs	r3, #0
 8009d54:	61a2      	str	r2, [r4, #24]
 8009d56:	61e3      	str	r3, [r4, #28]
 8009d58:	0020      	movs	r0, r4
 8009d5a:	f001 f97d 	bl	800b058 <matherr>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d019      	beq.n	8009d96 <powf+0x1f6>
 8009d62:	6a23      	ldr	r3, [r4, #32]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d003      	beq.n	8009d70 <powf+0x1d0>
 8009d68:	f7ff fe7a 	bl	8009a60 <__errno>
 8009d6c:	6a23      	ldr	r3, [r4, #32]
 8009d6e:	6003      	str	r3, [r0, #0]
 8009d70:	69a0      	ldr	r0, [r4, #24]
 8009d72:	69e1      	ldr	r1, [r4, #28]
 8009d74:	f7f9 f83c 	bl	8002df0 <__aeabi_d2f>
 8009d78:	1c04      	adds	r4, r0, #0
 8009d7a:	1c20      	adds	r0, r4, #0
 8009d7c:	b011      	add	sp, #68	; 0x44
 8009d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d80:	2100      	movs	r1, #0
 8009d82:	1c08      	adds	r0, r1, #0
 8009d84:	f7f6 fe0c 	bl	80009a0 <__aeabi_fdiv>
 8009d88:	f7f8 ffe0 	bl	8002d4c <__aeabi_f2d>
 8009d8c:	9b01      	ldr	r3, [sp, #4]
 8009d8e:	61a0      	str	r0, [r4, #24]
 8009d90:	61e1      	str	r1, [r4, #28]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d1e0      	bne.n	8009d58 <powf+0x1b8>
 8009d96:	f7ff fe63 	bl	8009a60 <__errno>
 8009d9a:	2321      	movs	r3, #33	; 0x21
 8009d9c:	6003      	str	r3, [r0, #0]
 8009d9e:	e7e0      	b.n	8009d62 <powf+0x1c2>
 8009da0:	2203      	movs	r2, #3
 8009da2:	21fc      	movs	r1, #252	; 0xfc
 8009da4:	9206      	str	r2, [sp, #24]
 8009da6:	6063      	str	r3, [r4, #4]
 8009da8:	6220      	str	r0, [r4, #32]
 8009daa:	9a02      	ldr	r2, [sp, #8]
 8009dac:	9b03      	ldr	r3, [sp, #12]
 8009dae:	0589      	lsls	r1, r1, #22
 8009db0:	60a2      	str	r2, [r4, #8]
 8009db2:	60e3      	str	r3, [r4, #12]
 8009db4:	9a04      	ldr	r2, [sp, #16]
 8009db6:	9b05      	ldr	r3, [sp, #20]
 8009db8:	1c38      	adds	r0, r7, #0
 8009dba:	6122      	str	r2, [r4, #16]
 8009dbc:	6163      	str	r3, [r4, #20]
 8009dbe:	f7f6 ffc7 	bl	8000d50 <__aeabi_fmul>
 8009dc2:	9b01      	ldr	r3, [sp, #4]
 8009dc4:	1c05      	adds	r5, r0, #0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d120      	bne.n	8009e0c <powf+0x26c>
 8009dca:	22e0      	movs	r2, #224	; 0xe0
 8009dcc:	4b3d      	ldr	r3, [pc, #244]	; (8009ec4 <powf+0x324>)
 8009dce:	0612      	lsls	r2, r2, #24
 8009dd0:	61a2      	str	r2, [r4, #24]
 8009dd2:	61e3      	str	r3, [r4, #28]
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	1c30      	adds	r0, r6, #0
 8009dd8:	f7f6 fb26 	bl	8000428 <__aeabi_fcmplt>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d02a      	beq.n	8009e36 <powf+0x296>
 8009de0:	1c28      	adds	r0, r5, #0
 8009de2:	f001 f98b 	bl	800b0fc <rintf>
 8009de6:	1c29      	adds	r1, r5, #0
 8009de8:	f7f6 fb18 	bl	800041c <__aeabi_fcmpeq>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d104      	bne.n	8009dfa <powf+0x25a>
 8009df0:	22e0      	movs	r2, #224	; 0xe0
 8009df2:	4b35      	ldr	r3, [pc, #212]	; (8009ec8 <powf+0x328>)
 8009df4:	0612      	lsls	r2, r2, #24
 8009df6:	61a2      	str	r2, [r4, #24]
 8009df8:	61e3      	str	r3, [r4, #28]
 8009dfa:	4b2e      	ldr	r3, [pc, #184]	; (8009eb4 <powf+0x314>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	b25b      	sxtb	r3, r3
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d118      	bne.n	8009e36 <powf+0x296>
 8009e04:	f7ff fe2c 	bl	8009a60 <__errno>
 8009e08:	2322      	movs	r3, #34	; 0x22
 8009e0a:	e7c7      	b.n	8009d9c <powf+0x1fc>
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	4b2f      	ldr	r3, [pc, #188]	; (8009ecc <powf+0x32c>)
 8009e10:	2100      	movs	r1, #0
 8009e12:	61a2      	str	r2, [r4, #24]
 8009e14:	61e3      	str	r3, [r4, #28]
 8009e16:	1c30      	adds	r0, r6, #0
 8009e18:	f7f6 fb06 	bl	8000428 <__aeabi_fcmplt>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d0ec      	beq.n	8009dfa <powf+0x25a>
 8009e20:	1c28      	adds	r0, r5, #0
 8009e22:	f001 f96b 	bl	800b0fc <rintf>
 8009e26:	1c29      	adds	r1, r5, #0
 8009e28:	f7f6 faf8 	bl	800041c <__aeabi_fcmpeq>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d1e4      	bne.n	8009dfa <powf+0x25a>
 8009e30:	2200      	movs	r2, #0
 8009e32:	4b23      	ldr	r3, [pc, #140]	; (8009ec0 <powf+0x320>)
 8009e34:	e7df      	b.n	8009df6 <powf+0x256>
 8009e36:	0020      	movs	r0, r4
 8009e38:	f001 f90e 	bl	800b058 <matherr>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d000      	beq.n	8009e42 <powf+0x2a2>
 8009e40:	e78f      	b.n	8009d62 <powf+0x1c2>
 8009e42:	e7df      	b.n	8009e04 <powf+0x264>
 8009e44:	2100      	movs	r1, #0
 8009e46:	1c20      	adds	r0, r4, #0
 8009e48:	f7f6 fae8 	bl	800041c <__aeabi_fcmpeq>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d100      	bne.n	8009e52 <powf+0x2b2>
 8009e50:	e793      	b.n	8009d7a <powf+0x1da>
 8009e52:	1c30      	adds	r0, r6, #0
 8009e54:	f001 f906 	bl	800b064 <finitef>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d100      	bne.n	8009e5e <powf+0x2be>
 8009e5c:	e78d      	b.n	8009d7a <powf+0x1da>
 8009e5e:	1c38      	adds	r0, r7, #0
 8009e60:	f001 f900 	bl	800b064 <finitef>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d100      	bne.n	8009e6a <powf+0x2ca>
 8009e68:	e787      	b.n	8009d7a <powf+0x1da>
 8009e6a:	2304      	movs	r3, #4
 8009e6c:	9306      	str	r3, [sp, #24]
 8009e6e:	4b12      	ldr	r3, [pc, #72]	; (8009eb8 <powf+0x318>)
 8009e70:	1c30      	adds	r0, r6, #0
 8009e72:	9307      	str	r3, [sp, #28]
 8009e74:	2300      	movs	r3, #0
 8009e76:	930e      	str	r3, [sp, #56]	; 0x38
 8009e78:	f7f8 ff68 	bl	8002d4c <__aeabi_f2d>
 8009e7c:	9008      	str	r0, [sp, #32]
 8009e7e:	9109      	str	r1, [sp, #36]	; 0x24
 8009e80:	1c38      	adds	r0, r7, #0
 8009e82:	f7f8 ff63 	bl	8002d4c <__aeabi_f2d>
 8009e86:	2300      	movs	r3, #0
 8009e88:	2200      	movs	r2, #0
 8009e8a:	920c      	str	r2, [sp, #48]	; 0x30
 8009e8c:	930d      	str	r3, [sp, #52]	; 0x34
 8009e8e:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <powf+0x314>)
 8009e90:	900a      	str	r0, [sp, #40]	; 0x28
 8009e92:	910b      	str	r1, [sp, #44]	; 0x2c
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	b25b      	sxtb	r3, r3
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d103      	bne.n	8009ea4 <powf+0x304>
 8009e9c:	f7ff fde0 	bl	8009a60 <__errno>
 8009ea0:	2322      	movs	r3, #34	; 0x22
 8009ea2:	e71c      	b.n	8009cde <powf+0x13e>
 8009ea4:	a806      	add	r0, sp, #24
 8009ea6:	f001 f8d7 	bl	800b058 <matherr>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d000      	beq.n	8009eb0 <powf+0x310>
 8009eae:	e6dc      	b.n	8009c6a <powf+0xca>
 8009eb0:	e7f4      	b.n	8009e9c <powf+0x2fc>
 8009eb2:	46c0      	nop			; (mov r8, r8)
 8009eb4:	20000078 	.word	0x20000078
 8009eb8:	0800b418 	.word	0x0800b418
 8009ebc:	3ff00000 	.word	0x3ff00000
 8009ec0:	fff00000 	.word	0xfff00000
 8009ec4:	47efffff 	.word	0x47efffff
 8009ec8:	c7efffff 	.word	0xc7efffff
 8009ecc:	7ff00000 	.word	0x7ff00000

08009ed0 <__ieee754_powf>:
 8009ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ed2:	b08b      	sub	sp, #44	; 0x2c
 8009ed4:	9101      	str	r1, [sp, #4]
 8009ed6:	9f01      	ldr	r7, [sp, #4]
 8009ed8:	1c06      	adds	r6, r0, #0
 8009eda:	007d      	lsls	r5, r7, #1
 8009edc:	086d      	lsrs	r5, r5, #1
 8009ede:	d100      	bne.n	8009ee2 <__ieee754_powf+0x12>
 8009ee0:	e308      	b.n	800a4f4 <__ieee754_powf+0x624>
 8009ee2:	22ff      	movs	r2, #255	; 0xff
 8009ee4:	0044      	lsls	r4, r0, #1
 8009ee6:	9003      	str	r0, [sp, #12]
 8009ee8:	0864      	lsrs	r4, r4, #1
 8009eea:	05d2      	lsls	r2, r2, #23
 8009eec:	4294      	cmp	r4, r2
 8009eee:	dc06      	bgt.n	8009efe <__ieee754_powf+0x2e>
 8009ef0:	23fe      	movs	r3, #254	; 0xfe
 8009ef2:	059b      	lsls	r3, r3, #22
 8009ef4:	4295      	cmp	r5, r2
 8009ef6:	dd07      	ble.n	8009f08 <__ieee754_powf+0x38>
 8009ef8:	429c      	cmp	r4, r3
 8009efa:	d100      	bne.n	8009efe <__ieee754_powf+0x2e>
 8009efc:	e2fa      	b.n	800a4f4 <__ieee754_powf+0x624>
 8009efe:	4886      	ldr	r0, [pc, #536]	; (800a118 <__ieee754_powf+0x248>)
 8009f00:	f001 f8f8 	bl	800b0f4 <nanf>
 8009f04:	b00b      	add	sp, #44	; 0x2c
 8009f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f08:	2100      	movs	r1, #0
 8009f0a:	9102      	str	r1, [sp, #8]
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	da22      	bge.n	8009f56 <__ieee754_powf+0x86>
 8009f10:	4982      	ldr	r1, [pc, #520]	; (800a11c <__ieee754_powf+0x24c>)
 8009f12:	428d      	cmp	r5, r1
 8009f14:	dc1d      	bgt.n	8009f52 <__ieee754_powf+0x82>
 8009f16:	4b82      	ldr	r3, [pc, #520]	; (800a120 <__ieee754_powf+0x250>)
 8009f18:	429d      	cmp	r5, r3
 8009f1a:	dd0d      	ble.n	8009f38 <__ieee754_powf+0x68>
 8009f1c:	2396      	movs	r3, #150	; 0x96
 8009f1e:	15ea      	asrs	r2, r5, #23
 8009f20:	1a9a      	subs	r2, r3, r2
 8009f22:	002b      	movs	r3, r5
 8009f24:	4113      	asrs	r3, r2
 8009f26:	0019      	movs	r1, r3
 8009f28:	4091      	lsls	r1, r2
 8009f2a:	42a9      	cmp	r1, r5
 8009f2c:	d104      	bne.n	8009f38 <__ieee754_powf+0x68>
 8009f2e:	2201      	movs	r2, #1
 8009f30:	4013      	ands	r3, r2
 8009f32:	1892      	adds	r2, r2, r2
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	9302      	str	r3, [sp, #8]
 8009f38:	23fe      	movs	r3, #254	; 0xfe
 8009f3a:	059b      	lsls	r3, r3, #22
 8009f3c:	429d      	cmp	r5, r3
 8009f3e:	d11e      	bne.n	8009f7e <__ieee754_powf+0xae>
 8009f40:	1c30      	adds	r0, r6, #0
 8009f42:	2f00      	cmp	r7, #0
 8009f44:	dade      	bge.n	8009f04 <__ieee754_powf+0x34>
 8009f46:	20fe      	movs	r0, #254	; 0xfe
 8009f48:	1c31      	adds	r1, r6, #0
 8009f4a:	0580      	lsls	r0, r0, #22
 8009f4c:	f7f6 fd28 	bl	80009a0 <__aeabi_fdiv>
 8009f50:	e7d8      	b.n	8009f04 <__ieee754_powf+0x34>
 8009f52:	2102      	movs	r1, #2
 8009f54:	9102      	str	r1, [sp, #8]
 8009f56:	4295      	cmp	r5, r2
 8009f58:	d1ee      	bne.n	8009f38 <__ieee754_powf+0x68>
 8009f5a:	429c      	cmp	r4, r3
 8009f5c:	d100      	bne.n	8009f60 <__ieee754_powf+0x90>
 8009f5e:	e2c9      	b.n	800a4f4 <__ieee754_powf+0x624>
 8009f60:	dd04      	ble.n	8009f6c <__ieee754_powf+0x9c>
 8009f62:	9801      	ldr	r0, [sp, #4]
 8009f64:	2f00      	cmp	r7, #0
 8009f66:	dacd      	bge.n	8009f04 <__ieee754_powf+0x34>
 8009f68:	2000      	movs	r0, #0
 8009f6a:	e7cb      	b.n	8009f04 <__ieee754_powf+0x34>
 8009f6c:	2f00      	cmp	r7, #0
 8009f6e:	dafb      	bge.n	8009f68 <__ieee754_powf+0x98>
 8009f70:	2280      	movs	r2, #128	; 0x80
 8009f72:	0612      	lsls	r2, r2, #24
 8009f74:	4694      	mov	ip, r2
 8009f76:	9b01      	ldr	r3, [sp, #4]
 8009f78:	4463      	add	r3, ip
 8009f7a:	0018      	movs	r0, r3
 8009f7c:	e7c2      	b.n	8009f04 <__ieee754_powf+0x34>
 8009f7e:	2380      	movs	r3, #128	; 0x80
 8009f80:	05db      	lsls	r3, r3, #23
 8009f82:	429f      	cmp	r7, r3
 8009f84:	d104      	bne.n	8009f90 <__ieee754_powf+0xc0>
 8009f86:	1c31      	adds	r1, r6, #0
 8009f88:	1c30      	adds	r0, r6, #0
 8009f8a:	f7f6 fee1 	bl	8000d50 <__aeabi_fmul>
 8009f8e:	e7b9      	b.n	8009f04 <__ieee754_powf+0x34>
 8009f90:	23fc      	movs	r3, #252	; 0xfc
 8009f92:	1c30      	adds	r0, r6, #0
 8009f94:	059b      	lsls	r3, r3, #22
 8009f96:	429f      	cmp	r7, r3
 8009f98:	d104      	bne.n	8009fa4 <__ieee754_powf+0xd4>
 8009f9a:	2e00      	cmp	r6, #0
 8009f9c:	db02      	blt.n	8009fa4 <__ieee754_powf+0xd4>
 8009f9e:	f000 fc43 	bl	800a828 <__ieee754_sqrtf>
 8009fa2:	e7af      	b.n	8009f04 <__ieee754_powf+0x34>
 8009fa4:	f001 f85a 	bl	800b05c <fabsf>
 8009fa8:	2c00      	cmp	r4, #0
 8009faa:	d005      	beq.n	8009fb8 <__ieee754_powf+0xe8>
 8009fac:	22fe      	movs	r2, #254	; 0xfe
 8009fae:	00b3      	lsls	r3, r6, #2
 8009fb0:	089b      	lsrs	r3, r3, #2
 8009fb2:	0592      	lsls	r2, r2, #22
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d11b      	bne.n	8009ff0 <__ieee754_powf+0x120>
 8009fb8:	2f00      	cmp	r7, #0
 8009fba:	da04      	bge.n	8009fc6 <__ieee754_powf+0xf6>
 8009fbc:	1c01      	adds	r1, r0, #0
 8009fbe:	20fe      	movs	r0, #254	; 0xfe
 8009fc0:	0580      	lsls	r0, r0, #22
 8009fc2:	f7f6 fced 	bl	80009a0 <__aeabi_fdiv>
 8009fc6:	9b03      	ldr	r3, [sp, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	da9b      	bge.n	8009f04 <__ieee754_powf+0x34>
 8009fcc:	4b55      	ldr	r3, [pc, #340]	; (800a124 <__ieee754_powf+0x254>)
 8009fce:	18e4      	adds	r4, r4, r3
 8009fd0:	9b02      	ldr	r3, [sp, #8]
 8009fd2:	431c      	orrs	r4, r3
 8009fd4:	d104      	bne.n	8009fe0 <__ieee754_powf+0x110>
 8009fd6:	1c01      	adds	r1, r0, #0
 8009fd8:	f7f6 ffec 	bl	8000fb4 <__aeabi_fsub>
 8009fdc:	1c01      	adds	r1, r0, #0
 8009fde:	e7b5      	b.n	8009f4c <__ieee754_powf+0x7c>
 8009fe0:	9b02      	ldr	r3, [sp, #8]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d000      	beq.n	8009fe8 <__ieee754_powf+0x118>
 8009fe6:	e78d      	b.n	8009f04 <__ieee754_powf+0x34>
 8009fe8:	2380      	movs	r3, #128	; 0x80
 8009fea:	061b      	lsls	r3, r3, #24
 8009fec:	18c0      	adds	r0, r0, r3
 8009fee:	e789      	b.n	8009f04 <__ieee754_powf+0x34>
 8009ff0:	0ff3      	lsrs	r3, r6, #31
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	9305      	str	r3, [sp, #20]
 8009ff6:	9a05      	ldr	r2, [sp, #20]
 8009ff8:	9b02      	ldr	r3, [sp, #8]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	d102      	bne.n	800a004 <__ieee754_powf+0x134>
 8009ffe:	1c31      	adds	r1, r6, #0
 800a000:	1c30      	adds	r0, r6, #0
 800a002:	e7e9      	b.n	8009fd8 <__ieee754_powf+0x108>
 800a004:	239a      	movs	r3, #154	; 0x9a
 800a006:	05db      	lsls	r3, r3, #23
 800a008:	429d      	cmp	r5, r3
 800a00a:	dc00      	bgt.n	800a00e <__ieee754_powf+0x13e>
 800a00c:	e09c      	b.n	800a148 <__ieee754_powf+0x278>
 800a00e:	4b46      	ldr	r3, [pc, #280]	; (800a128 <__ieee754_powf+0x258>)
 800a010:	429c      	cmp	r4, r3
 800a012:	dc04      	bgt.n	800a01e <__ieee754_powf+0x14e>
 800a014:	2f00      	cmp	r7, #0
 800a016:	daa7      	bge.n	8009f68 <__ieee754_powf+0x98>
 800a018:	4944      	ldr	r1, [pc, #272]	; (800a12c <__ieee754_powf+0x25c>)
 800a01a:	1c08      	adds	r0, r1, #0
 800a01c:	e7b5      	b.n	8009f8a <__ieee754_powf+0xba>
 800a01e:	4b44      	ldr	r3, [pc, #272]	; (800a130 <__ieee754_powf+0x260>)
 800a020:	429c      	cmp	r4, r3
 800a022:	dd02      	ble.n	800a02a <__ieee754_powf+0x15a>
 800a024:	2f00      	cmp	r7, #0
 800a026:	dcf7      	bgt.n	800a018 <__ieee754_powf+0x148>
 800a028:	e79e      	b.n	8009f68 <__ieee754_powf+0x98>
 800a02a:	21fe      	movs	r1, #254	; 0xfe
 800a02c:	0589      	lsls	r1, r1, #22
 800a02e:	f7f6 ffc1 	bl	8000fb4 <__aeabi_fsub>
 800a032:	4940      	ldr	r1, [pc, #256]	; (800a134 <__ieee754_powf+0x264>)
 800a034:	1c04      	adds	r4, r0, #0
 800a036:	f7f6 fe8b 	bl	8000d50 <__aeabi_fmul>
 800a03a:	493f      	ldr	r1, [pc, #252]	; (800a138 <__ieee754_powf+0x268>)
 800a03c:	1c05      	adds	r5, r0, #0
 800a03e:	1c20      	adds	r0, r4, #0
 800a040:	f7f6 fe86 	bl	8000d50 <__aeabi_fmul>
 800a044:	21fa      	movs	r1, #250	; 0xfa
 800a046:	1c06      	adds	r6, r0, #0
 800a048:	0589      	lsls	r1, r1, #22
 800a04a:	1c20      	adds	r0, r4, #0
 800a04c:	f7f6 fe80 	bl	8000d50 <__aeabi_fmul>
 800a050:	1c01      	adds	r1, r0, #0
 800a052:	483a      	ldr	r0, [pc, #232]	; (800a13c <__ieee754_powf+0x26c>)
 800a054:	f7f6 ffae 	bl	8000fb4 <__aeabi_fsub>
 800a058:	1c21      	adds	r1, r4, #0
 800a05a:	f7f6 fe79 	bl	8000d50 <__aeabi_fmul>
 800a05e:	1c01      	adds	r1, r0, #0
 800a060:	20fc      	movs	r0, #252	; 0xfc
 800a062:	0580      	lsls	r0, r0, #22
 800a064:	f7f6 ffa6 	bl	8000fb4 <__aeabi_fsub>
 800a068:	1c21      	adds	r1, r4, #0
 800a06a:	1c07      	adds	r7, r0, #0
 800a06c:	1c20      	adds	r0, r4, #0
 800a06e:	f7f6 fe6f 	bl	8000d50 <__aeabi_fmul>
 800a072:	1c01      	adds	r1, r0, #0
 800a074:	1c38      	adds	r0, r7, #0
 800a076:	f7f6 fe6b 	bl	8000d50 <__aeabi_fmul>
 800a07a:	4931      	ldr	r1, [pc, #196]	; (800a140 <__ieee754_powf+0x270>)
 800a07c:	f7f6 fe68 	bl	8000d50 <__aeabi_fmul>
 800a080:	1c01      	adds	r1, r0, #0
 800a082:	1c30      	adds	r0, r6, #0
 800a084:	f7f6 ff96 	bl	8000fb4 <__aeabi_fsub>
 800a088:	1c01      	adds	r1, r0, #0
 800a08a:	1c06      	adds	r6, r0, #0
 800a08c:	1c28      	adds	r0, r5, #0
 800a08e:	f7f6 faed 	bl	800066c <__aeabi_fadd>
 800a092:	0b04      	lsrs	r4, r0, #12
 800a094:	0324      	lsls	r4, r4, #12
 800a096:	1c29      	adds	r1, r5, #0
 800a098:	1c20      	adds	r0, r4, #0
 800a09a:	f7f6 ff8b 	bl	8000fb4 <__aeabi_fsub>
 800a09e:	1c01      	adds	r1, r0, #0
 800a0a0:	1c30      	adds	r0, r6, #0
 800a0a2:	f7f6 ff87 	bl	8000fb4 <__aeabi_fsub>
 800a0a6:	9b02      	ldr	r3, [sp, #8]
 800a0a8:	9a05      	ldr	r2, [sp, #20]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	1c07      	adds	r7, r0, #0
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	d000      	beq.n	800a0b4 <__ieee754_powf+0x1e4>
 800a0b2:	e154      	b.n	800a35e <__ieee754_powf+0x48e>
 800a0b4:	4e23      	ldr	r6, [pc, #140]	; (800a144 <__ieee754_powf+0x274>)
 800a0b6:	9b01      	ldr	r3, [sp, #4]
 800a0b8:	9801      	ldr	r0, [sp, #4]
 800a0ba:	0b1d      	lsrs	r5, r3, #12
 800a0bc:	032d      	lsls	r5, r5, #12
 800a0be:	1c29      	adds	r1, r5, #0
 800a0c0:	f7f6 ff78 	bl	8000fb4 <__aeabi_fsub>
 800a0c4:	1c21      	adds	r1, r4, #0
 800a0c6:	f7f6 fe43 	bl	8000d50 <__aeabi_fmul>
 800a0ca:	9901      	ldr	r1, [sp, #4]
 800a0cc:	9002      	str	r0, [sp, #8]
 800a0ce:	1c38      	adds	r0, r7, #0
 800a0d0:	f7f6 fe3e 	bl	8000d50 <__aeabi_fmul>
 800a0d4:	1c01      	adds	r1, r0, #0
 800a0d6:	9802      	ldr	r0, [sp, #8]
 800a0d8:	f7f6 fac8 	bl	800066c <__aeabi_fadd>
 800a0dc:	1c29      	adds	r1, r5, #0
 800a0de:	9001      	str	r0, [sp, #4]
 800a0e0:	1c20      	adds	r0, r4, #0
 800a0e2:	f7f6 fe35 	bl	8000d50 <__aeabi_fmul>
 800a0e6:	9002      	str	r0, [sp, #8]
 800a0e8:	9003      	str	r0, [sp, #12]
 800a0ea:	1c01      	adds	r1, r0, #0
 800a0ec:	9801      	ldr	r0, [sp, #4]
 800a0ee:	f7f6 fabd 	bl	800066c <__aeabi_fadd>
 800a0f2:	0047      	lsls	r7, r0, #1
 800a0f4:	1c05      	adds	r5, r0, #0
 800a0f6:	9004      	str	r0, [sp, #16]
 800a0f8:	087f      	lsrs	r7, r7, #1
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	dc00      	bgt.n	800a100 <__ieee754_powf+0x230>
 800a0fe:	e160      	b.n	800a3c2 <__ieee754_powf+0x4f2>
 800a100:	2386      	movs	r3, #134	; 0x86
 800a102:	05db      	lsls	r3, r3, #23
 800a104:	429f      	cmp	r7, r3
 800a106:	dc00      	bgt.n	800a10a <__ieee754_powf+0x23a>
 800a108:	e12c      	b.n	800a364 <__ieee754_powf+0x494>
 800a10a:	4908      	ldr	r1, [pc, #32]	; (800a12c <__ieee754_powf+0x25c>)
 800a10c:	1c30      	adds	r0, r6, #0
 800a10e:	f7f6 fe1f 	bl	8000d50 <__aeabi_fmul>
 800a112:	4906      	ldr	r1, [pc, #24]	; (800a12c <__ieee754_powf+0x25c>)
 800a114:	e739      	b.n	8009f8a <__ieee754_powf+0xba>
 800a116:	46c0      	nop			; (mov r8, r8)
 800a118:	0800b41c 	.word	0x0800b41c
 800a11c:	4b7fffff 	.word	0x4b7fffff
 800a120:	3f7fffff 	.word	0x3f7fffff
 800a124:	c0800000 	.word	0xc0800000
 800a128:	3f7ffff7 	.word	0x3f7ffff7
 800a12c:	7149f2ca 	.word	0x7149f2ca
 800a130:	3f800007 	.word	0x3f800007
 800a134:	3fb8aa00 	.word	0x3fb8aa00
 800a138:	36eca570 	.word	0x36eca570
 800a13c:	3eaaaaab 	.word	0x3eaaaaab
 800a140:	3fb8aa3b 	.word	0x3fb8aa3b
 800a144:	bf800000 	.word	0xbf800000
 800a148:	4bec      	ldr	r3, [pc, #944]	; (800a4fc <__ieee754_powf+0x62c>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	429c      	cmp	r4, r3
 800a14e:	dc06      	bgt.n	800a15e <__ieee754_powf+0x28e>
 800a150:	2197      	movs	r1, #151	; 0x97
 800a152:	05c9      	lsls	r1, r1, #23
 800a154:	f7f6 fdfc 	bl	8000d50 <__aeabi_fmul>
 800a158:	2218      	movs	r2, #24
 800a15a:	0004      	movs	r4, r0
 800a15c:	4252      	negs	r2, r2
 800a15e:	25fe      	movs	r5, #254	; 0xfe
 800a160:	15e3      	asrs	r3, r4, #23
 800a162:	3b7f      	subs	r3, #127	; 0x7f
 800a164:	189b      	adds	r3, r3, r2
 800a166:	9304      	str	r3, [sp, #16]
 800a168:	0264      	lsls	r4, r4, #9
 800a16a:	4be5      	ldr	r3, [pc, #916]	; (800a500 <__ieee754_powf+0x630>)
 800a16c:	0a64      	lsrs	r4, r4, #9
 800a16e:	05ad      	lsls	r5, r5, #22
 800a170:	4325      	orrs	r5, r4
 800a172:	2600      	movs	r6, #0
 800a174:	429c      	cmp	r4, r3
 800a176:	dd09      	ble.n	800a18c <__ieee754_powf+0x2bc>
 800a178:	4be2      	ldr	r3, [pc, #904]	; (800a504 <__ieee754_powf+0x634>)
 800a17a:	3601      	adds	r6, #1
 800a17c:	429c      	cmp	r4, r3
 800a17e:	dd05      	ble.n	800a18c <__ieee754_powf+0x2bc>
 800a180:	9b04      	ldr	r3, [sp, #16]
 800a182:	199b      	adds	r3, r3, r6
 800a184:	2600      	movs	r6, #0
 800a186:	9304      	str	r3, [sp, #16]
 800a188:	4bdf      	ldr	r3, [pc, #892]	; (800a508 <__ieee754_powf+0x638>)
 800a18a:	18ed      	adds	r5, r5, r3
 800a18c:	00b3      	lsls	r3, r6, #2
 800a18e:	9306      	str	r3, [sp, #24]
 800a190:	4bde      	ldr	r3, [pc, #888]	; (800a50c <__ieee754_powf+0x63c>)
 800a192:	00b2      	lsls	r2, r6, #2
 800a194:	58d4      	ldr	r4, [r2, r3]
 800a196:	1c28      	adds	r0, r5, #0
 800a198:	1c21      	adds	r1, r4, #0
 800a19a:	9509      	str	r5, [sp, #36]	; 0x24
 800a19c:	f7f6 ff0a 	bl	8000fb4 <__aeabi_fsub>
 800a1a0:	1c29      	adds	r1, r5, #0
 800a1a2:	9007      	str	r0, [sp, #28]
 800a1a4:	1c20      	adds	r0, r4, #0
 800a1a6:	f7f6 fa61 	bl	800066c <__aeabi_fadd>
 800a1aa:	1c01      	adds	r1, r0, #0
 800a1ac:	20fe      	movs	r0, #254	; 0xfe
 800a1ae:	0580      	lsls	r0, r0, #22
 800a1b0:	f7f6 fbf6 	bl	80009a0 <__aeabi_fdiv>
 800a1b4:	1c01      	adds	r1, r0, #0
 800a1b6:	9008      	str	r0, [sp, #32]
 800a1b8:	9807      	ldr	r0, [sp, #28]
 800a1ba:	f7f6 fdc9 	bl	8000d50 <__aeabi_fmul>
 800a1be:	9003      	str	r0, [sp, #12]
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	106d      	asrs	r5, r5, #1
 800a1c4:	0b1f      	lsrs	r7, r3, #12
 800a1c6:	2380      	movs	r3, #128	; 0x80
 800a1c8:	059b      	lsls	r3, r3, #22
 800a1ca:	431d      	orrs	r5, r3
 800a1cc:	2380      	movs	r3, #128	; 0x80
 800a1ce:	02db      	lsls	r3, r3, #11
 800a1d0:	18ed      	adds	r5, r5, r3
 800a1d2:	0576      	lsls	r6, r6, #21
 800a1d4:	033f      	lsls	r7, r7, #12
 800a1d6:	19ae      	adds	r6, r5, r6
 800a1d8:	1c31      	adds	r1, r6, #0
 800a1da:	1c38      	adds	r0, r7, #0
 800a1dc:	f7f6 fdb8 	bl	8000d50 <__aeabi_fmul>
 800a1e0:	1c01      	adds	r1, r0, #0
 800a1e2:	9807      	ldr	r0, [sp, #28]
 800a1e4:	f7f6 fee6 	bl	8000fb4 <__aeabi_fsub>
 800a1e8:	1c21      	adds	r1, r4, #0
 800a1ea:	1c05      	adds	r5, r0, #0
 800a1ec:	1c30      	adds	r0, r6, #0
 800a1ee:	f7f6 fee1 	bl	8000fb4 <__aeabi_fsub>
 800a1f2:	1c01      	adds	r1, r0, #0
 800a1f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f6:	f7f6 fedd 	bl	8000fb4 <__aeabi_fsub>
 800a1fa:	1c39      	adds	r1, r7, #0
 800a1fc:	f7f6 fda8 	bl	8000d50 <__aeabi_fmul>
 800a200:	1c01      	adds	r1, r0, #0
 800a202:	1c28      	adds	r0, r5, #0
 800a204:	f7f6 fed6 	bl	8000fb4 <__aeabi_fsub>
 800a208:	9908      	ldr	r1, [sp, #32]
 800a20a:	f7f6 fda1 	bl	8000d50 <__aeabi_fmul>
 800a20e:	9903      	ldr	r1, [sp, #12]
 800a210:	9007      	str	r0, [sp, #28]
 800a212:	1c08      	adds	r0, r1, #0
 800a214:	f7f6 fd9c 	bl	8000d50 <__aeabi_fmul>
 800a218:	49bd      	ldr	r1, [pc, #756]	; (800a510 <__ieee754_powf+0x640>)
 800a21a:	1c04      	adds	r4, r0, #0
 800a21c:	f7f6 fd98 	bl	8000d50 <__aeabi_fmul>
 800a220:	49bc      	ldr	r1, [pc, #752]	; (800a514 <__ieee754_powf+0x644>)
 800a222:	f7f6 fa23 	bl	800066c <__aeabi_fadd>
 800a226:	1c21      	adds	r1, r4, #0
 800a228:	f7f6 fd92 	bl	8000d50 <__aeabi_fmul>
 800a22c:	49ba      	ldr	r1, [pc, #744]	; (800a518 <__ieee754_powf+0x648>)
 800a22e:	f7f6 fa1d 	bl	800066c <__aeabi_fadd>
 800a232:	1c21      	adds	r1, r4, #0
 800a234:	f7f6 fd8c 	bl	8000d50 <__aeabi_fmul>
 800a238:	49b8      	ldr	r1, [pc, #736]	; (800a51c <__ieee754_powf+0x64c>)
 800a23a:	f7f6 fa17 	bl	800066c <__aeabi_fadd>
 800a23e:	1c21      	adds	r1, r4, #0
 800a240:	f7f6 fd86 	bl	8000d50 <__aeabi_fmul>
 800a244:	49b6      	ldr	r1, [pc, #728]	; (800a520 <__ieee754_powf+0x650>)
 800a246:	f7f6 fa11 	bl	800066c <__aeabi_fadd>
 800a24a:	1c21      	adds	r1, r4, #0
 800a24c:	f7f6 fd80 	bl	8000d50 <__aeabi_fmul>
 800a250:	49b4      	ldr	r1, [pc, #720]	; (800a524 <__ieee754_powf+0x654>)
 800a252:	f7f6 fa0b 	bl	800066c <__aeabi_fadd>
 800a256:	1c21      	adds	r1, r4, #0
 800a258:	1c05      	adds	r5, r0, #0
 800a25a:	1c20      	adds	r0, r4, #0
 800a25c:	f7f6 fd78 	bl	8000d50 <__aeabi_fmul>
 800a260:	1c01      	adds	r1, r0, #0
 800a262:	1c28      	adds	r0, r5, #0
 800a264:	f7f6 fd74 	bl	8000d50 <__aeabi_fmul>
 800a268:	9903      	ldr	r1, [sp, #12]
 800a26a:	1c04      	adds	r4, r0, #0
 800a26c:	1c38      	adds	r0, r7, #0
 800a26e:	f7f6 f9fd 	bl	800066c <__aeabi_fadd>
 800a272:	9907      	ldr	r1, [sp, #28]
 800a274:	f7f6 fd6c 	bl	8000d50 <__aeabi_fmul>
 800a278:	1c21      	adds	r1, r4, #0
 800a27a:	f7f6 f9f7 	bl	800066c <__aeabi_fadd>
 800a27e:	1c39      	adds	r1, r7, #0
 800a280:	1c06      	adds	r6, r0, #0
 800a282:	1c38      	adds	r0, r7, #0
 800a284:	f7f6 fd64 	bl	8000d50 <__aeabi_fmul>
 800a288:	49a7      	ldr	r1, [pc, #668]	; (800a528 <__ieee754_powf+0x658>)
 800a28a:	9008      	str	r0, [sp, #32]
 800a28c:	f7f6 f9ee 	bl	800066c <__aeabi_fadd>
 800a290:	1c31      	adds	r1, r6, #0
 800a292:	f7f6 f9eb 	bl	800066c <__aeabi_fadd>
 800a296:	0b04      	lsrs	r4, r0, #12
 800a298:	0324      	lsls	r4, r4, #12
 800a29a:	1c21      	adds	r1, r4, #0
 800a29c:	1c38      	adds	r0, r7, #0
 800a29e:	f7f6 fd57 	bl	8000d50 <__aeabi_fmul>
 800a2a2:	49a1      	ldr	r1, [pc, #644]	; (800a528 <__ieee754_powf+0x658>)
 800a2a4:	1c05      	adds	r5, r0, #0
 800a2a6:	1c20      	adds	r0, r4, #0
 800a2a8:	f7f6 fe84 	bl	8000fb4 <__aeabi_fsub>
 800a2ac:	9908      	ldr	r1, [sp, #32]
 800a2ae:	f7f6 fe81 	bl	8000fb4 <__aeabi_fsub>
 800a2b2:	1c01      	adds	r1, r0, #0
 800a2b4:	1c30      	adds	r0, r6, #0
 800a2b6:	f7f6 fe7d 	bl	8000fb4 <__aeabi_fsub>
 800a2ba:	9903      	ldr	r1, [sp, #12]
 800a2bc:	f7f6 fd48 	bl	8000d50 <__aeabi_fmul>
 800a2c0:	9907      	ldr	r1, [sp, #28]
 800a2c2:	1c06      	adds	r6, r0, #0
 800a2c4:	1c20      	adds	r0, r4, #0
 800a2c6:	f7f6 fd43 	bl	8000d50 <__aeabi_fmul>
 800a2ca:	1c01      	adds	r1, r0, #0
 800a2cc:	1c30      	adds	r0, r6, #0
 800a2ce:	f7f6 f9cd 	bl	800066c <__aeabi_fadd>
 800a2d2:	1c06      	adds	r6, r0, #0
 800a2d4:	1c01      	adds	r1, r0, #0
 800a2d6:	1c28      	adds	r0, r5, #0
 800a2d8:	f7f6 f9c8 	bl	800066c <__aeabi_fadd>
 800a2dc:	0b04      	lsrs	r4, r0, #12
 800a2de:	0324      	lsls	r4, r4, #12
 800a2e0:	4992      	ldr	r1, [pc, #584]	; (800a52c <__ieee754_powf+0x65c>)
 800a2e2:	1c20      	adds	r0, r4, #0
 800a2e4:	f7f6 fd34 	bl	8000d50 <__aeabi_fmul>
 800a2e8:	1c29      	adds	r1, r5, #0
 800a2ea:	9003      	str	r0, [sp, #12]
 800a2ec:	1c20      	adds	r0, r4, #0
 800a2ee:	f7f6 fe61 	bl	8000fb4 <__aeabi_fsub>
 800a2f2:	1c01      	adds	r1, r0, #0
 800a2f4:	1c30      	adds	r0, r6, #0
 800a2f6:	f7f6 fe5d 	bl	8000fb4 <__aeabi_fsub>
 800a2fa:	498d      	ldr	r1, [pc, #564]	; (800a530 <__ieee754_powf+0x660>)
 800a2fc:	f7f6 fd28 	bl	8000d50 <__aeabi_fmul>
 800a300:	498c      	ldr	r1, [pc, #560]	; (800a534 <__ieee754_powf+0x664>)
 800a302:	1c05      	adds	r5, r0, #0
 800a304:	1c20      	adds	r0, r4, #0
 800a306:	f7f6 fd23 	bl	8000d50 <__aeabi_fmul>
 800a30a:	1c01      	adds	r1, r0, #0
 800a30c:	1c28      	adds	r0, r5, #0
 800a30e:	f7f6 f9ad 	bl	800066c <__aeabi_fadd>
 800a312:	4b89      	ldr	r3, [pc, #548]	; (800a538 <__ieee754_powf+0x668>)
 800a314:	9a06      	ldr	r2, [sp, #24]
 800a316:	58d1      	ldr	r1, [r2, r3]
 800a318:	f7f6 f9a8 	bl	800066c <__aeabi_fadd>
 800a31c:	1c05      	adds	r5, r0, #0
 800a31e:	9804      	ldr	r0, [sp, #16]
 800a320:	f7f7 f842 	bl	80013a8 <__aeabi_i2f>
 800a324:	4b85      	ldr	r3, [pc, #532]	; (800a53c <__ieee754_powf+0x66c>)
 800a326:	9a06      	ldr	r2, [sp, #24]
 800a328:	1c07      	adds	r7, r0, #0
 800a32a:	58d6      	ldr	r6, [r2, r3]
 800a32c:	1c29      	adds	r1, r5, #0
 800a32e:	9803      	ldr	r0, [sp, #12]
 800a330:	f7f6 f99c 	bl	800066c <__aeabi_fadd>
 800a334:	1c31      	adds	r1, r6, #0
 800a336:	f7f6 f999 	bl	800066c <__aeabi_fadd>
 800a33a:	1c39      	adds	r1, r7, #0
 800a33c:	f7f6 f996 	bl	800066c <__aeabi_fadd>
 800a340:	0b04      	lsrs	r4, r0, #12
 800a342:	0324      	lsls	r4, r4, #12
 800a344:	1c39      	adds	r1, r7, #0
 800a346:	1c20      	adds	r0, r4, #0
 800a348:	f7f6 fe34 	bl	8000fb4 <__aeabi_fsub>
 800a34c:	1c31      	adds	r1, r6, #0
 800a34e:	f7f6 fe31 	bl	8000fb4 <__aeabi_fsub>
 800a352:	9903      	ldr	r1, [sp, #12]
 800a354:	f7f6 fe2e 	bl	8000fb4 <__aeabi_fsub>
 800a358:	1c01      	adds	r1, r0, #0
 800a35a:	1c28      	adds	r0, r5, #0
 800a35c:	e6a1      	b.n	800a0a2 <__ieee754_powf+0x1d2>
 800a35e:	26fe      	movs	r6, #254	; 0xfe
 800a360:	05b6      	lsls	r6, r6, #22
 800a362:	e6a8      	b.n	800a0b6 <__ieee754_powf+0x1e6>
 800a364:	429f      	cmp	r7, r3
 800a366:	d140      	bne.n	800a3ea <__ieee754_powf+0x51a>
 800a368:	4975      	ldr	r1, [pc, #468]	; (800a540 <__ieee754_powf+0x670>)
 800a36a:	9801      	ldr	r0, [sp, #4]
 800a36c:	f7f6 f97e 	bl	800066c <__aeabi_fadd>
 800a370:	9902      	ldr	r1, [sp, #8]
 800a372:	1c04      	adds	r4, r0, #0
 800a374:	1c28      	adds	r0, r5, #0
 800a376:	f7f6 fe1d 	bl	8000fb4 <__aeabi_fsub>
 800a37a:	1c01      	adds	r1, r0, #0
 800a37c:	1c20      	adds	r0, r4, #0
 800a37e:	f7f6 f867 	bl	8000450 <__aeabi_fcmpgt>
 800a382:	2800      	cmp	r0, #0
 800a384:	d000      	beq.n	800a388 <__ieee754_powf+0x4b8>
 800a386:	e6c0      	b.n	800a10a <__ieee754_powf+0x23a>
 800a388:	2480      	movs	r4, #128	; 0x80
 800a38a:	0424      	lsls	r4, r4, #16
 800a38c:	0022      	movs	r2, r4
 800a38e:	15fb      	asrs	r3, r7, #23
 800a390:	3b7e      	subs	r3, #126	; 0x7e
 800a392:	411a      	asrs	r2, r3
 800a394:	1955      	adds	r5, r2, r5
 800a396:	15eb      	asrs	r3, r5, #23
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	4a58      	ldr	r2, [pc, #352]	; (800a4fc <__ieee754_powf+0x62c>)
 800a39c:	3b7f      	subs	r3, #127	; 0x7f
 800a39e:	411a      	asrs	r2, r3
 800a3a0:	0029      	movs	r1, r5
 800a3a2:	4391      	bics	r1, r2
 800a3a4:	2217      	movs	r2, #23
 800a3a6:	026d      	lsls	r5, r5, #9
 800a3a8:	0a6d      	lsrs	r5, r5, #9
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	432c      	orrs	r4, r5
 800a3ae:	411c      	asrs	r4, r3
 800a3b0:	9b04      	ldr	r3, [sp, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	da00      	bge.n	800a3b8 <__ieee754_powf+0x4e8>
 800a3b6:	4264      	negs	r4, r4
 800a3b8:	9802      	ldr	r0, [sp, #8]
 800a3ba:	f7f6 fdfb 	bl	8000fb4 <__aeabi_fsub>
 800a3be:	9003      	str	r0, [sp, #12]
 800a3c0:	e018      	b.n	800a3f4 <__ieee754_powf+0x524>
 800a3c2:	4b60      	ldr	r3, [pc, #384]	; (800a544 <__ieee754_powf+0x674>)
 800a3c4:	429f      	cmp	r7, r3
 800a3c6:	dd05      	ble.n	800a3d4 <__ieee754_powf+0x504>
 800a3c8:	495f      	ldr	r1, [pc, #380]	; (800a548 <__ieee754_powf+0x678>)
 800a3ca:	1c30      	adds	r0, r6, #0
 800a3cc:	f7f6 fcc0 	bl	8000d50 <__aeabi_fmul>
 800a3d0:	495d      	ldr	r1, [pc, #372]	; (800a548 <__ieee754_powf+0x678>)
 800a3d2:	e5da      	b.n	8009f8a <__ieee754_powf+0xba>
 800a3d4:	429f      	cmp	r7, r3
 800a3d6:	d108      	bne.n	800a3ea <__ieee754_powf+0x51a>
 800a3d8:	9902      	ldr	r1, [sp, #8]
 800a3da:	f7f6 fdeb 	bl	8000fb4 <__aeabi_fsub>
 800a3de:	9901      	ldr	r1, [sp, #4]
 800a3e0:	f7f6 f840 	bl	8000464 <__aeabi_fcmpge>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d0cf      	beq.n	800a388 <__ieee754_powf+0x4b8>
 800a3e8:	e7ee      	b.n	800a3c8 <__ieee754_powf+0x4f8>
 800a3ea:	23fc      	movs	r3, #252	; 0xfc
 800a3ec:	2400      	movs	r4, #0
 800a3ee:	059b      	lsls	r3, r3, #22
 800a3f0:	429f      	cmp	r7, r3
 800a3f2:	dcc9      	bgt.n	800a388 <__ieee754_powf+0x4b8>
 800a3f4:	9901      	ldr	r1, [sp, #4]
 800a3f6:	9803      	ldr	r0, [sp, #12]
 800a3f8:	f7f6 f938 	bl	800066c <__aeabi_fadd>
 800a3fc:	0b05      	lsrs	r5, r0, #12
 800a3fe:	032d      	lsls	r5, r5, #12
 800a400:	4952      	ldr	r1, [pc, #328]	; (800a54c <__ieee754_powf+0x67c>)
 800a402:	1c28      	adds	r0, r5, #0
 800a404:	f7f6 fca4 	bl	8000d50 <__aeabi_fmul>
 800a408:	9903      	ldr	r1, [sp, #12]
 800a40a:	9002      	str	r0, [sp, #8]
 800a40c:	1c28      	adds	r0, r5, #0
 800a40e:	f7f6 fdd1 	bl	8000fb4 <__aeabi_fsub>
 800a412:	1c01      	adds	r1, r0, #0
 800a414:	9801      	ldr	r0, [sp, #4]
 800a416:	f7f6 fdcd 	bl	8000fb4 <__aeabi_fsub>
 800a41a:	494d      	ldr	r1, [pc, #308]	; (800a550 <__ieee754_powf+0x680>)
 800a41c:	f7f6 fc98 	bl	8000d50 <__aeabi_fmul>
 800a420:	494c      	ldr	r1, [pc, #304]	; (800a554 <__ieee754_powf+0x684>)
 800a422:	1c07      	adds	r7, r0, #0
 800a424:	1c28      	adds	r0, r5, #0
 800a426:	f7f6 fc93 	bl	8000d50 <__aeabi_fmul>
 800a42a:	1c01      	adds	r1, r0, #0
 800a42c:	1c38      	adds	r0, r7, #0
 800a42e:	f7f6 f91d 	bl	800066c <__aeabi_fadd>
 800a432:	1c07      	adds	r7, r0, #0
 800a434:	1c01      	adds	r1, r0, #0
 800a436:	9802      	ldr	r0, [sp, #8]
 800a438:	f7f6 f918 	bl	800066c <__aeabi_fadd>
 800a43c:	9902      	ldr	r1, [sp, #8]
 800a43e:	1c05      	adds	r5, r0, #0
 800a440:	f7f6 fdb8 	bl	8000fb4 <__aeabi_fsub>
 800a444:	1c01      	adds	r1, r0, #0
 800a446:	1c38      	adds	r0, r7, #0
 800a448:	f7f6 fdb4 	bl	8000fb4 <__aeabi_fsub>
 800a44c:	1c29      	adds	r1, r5, #0
 800a44e:	9001      	str	r0, [sp, #4]
 800a450:	1c28      	adds	r0, r5, #0
 800a452:	f7f6 fc7d 	bl	8000d50 <__aeabi_fmul>
 800a456:	4940      	ldr	r1, [pc, #256]	; (800a558 <__ieee754_powf+0x688>)
 800a458:	1c07      	adds	r7, r0, #0
 800a45a:	f7f6 fc79 	bl	8000d50 <__aeabi_fmul>
 800a45e:	493f      	ldr	r1, [pc, #252]	; (800a55c <__ieee754_powf+0x68c>)
 800a460:	f7f6 fda8 	bl	8000fb4 <__aeabi_fsub>
 800a464:	1c39      	adds	r1, r7, #0
 800a466:	f7f6 fc73 	bl	8000d50 <__aeabi_fmul>
 800a46a:	493d      	ldr	r1, [pc, #244]	; (800a560 <__ieee754_powf+0x690>)
 800a46c:	f7f6 f8fe 	bl	800066c <__aeabi_fadd>
 800a470:	1c39      	adds	r1, r7, #0
 800a472:	f7f6 fc6d 	bl	8000d50 <__aeabi_fmul>
 800a476:	493b      	ldr	r1, [pc, #236]	; (800a564 <__ieee754_powf+0x694>)
 800a478:	f7f6 fd9c 	bl	8000fb4 <__aeabi_fsub>
 800a47c:	1c39      	adds	r1, r7, #0
 800a47e:	f7f6 fc67 	bl	8000d50 <__aeabi_fmul>
 800a482:	4939      	ldr	r1, [pc, #228]	; (800a568 <__ieee754_powf+0x698>)
 800a484:	f7f6 f8f2 	bl	800066c <__aeabi_fadd>
 800a488:	1c39      	adds	r1, r7, #0
 800a48a:	f7f6 fc61 	bl	8000d50 <__aeabi_fmul>
 800a48e:	1c01      	adds	r1, r0, #0
 800a490:	1c28      	adds	r0, r5, #0
 800a492:	f7f6 fd8f 	bl	8000fb4 <__aeabi_fsub>
 800a496:	1c07      	adds	r7, r0, #0
 800a498:	1c01      	adds	r1, r0, #0
 800a49a:	1c28      	adds	r0, r5, #0
 800a49c:	f7f6 fc58 	bl	8000d50 <__aeabi_fmul>
 800a4a0:	2180      	movs	r1, #128	; 0x80
 800a4a2:	9002      	str	r0, [sp, #8]
 800a4a4:	05c9      	lsls	r1, r1, #23
 800a4a6:	1c38      	adds	r0, r7, #0
 800a4a8:	f7f6 fd84 	bl	8000fb4 <__aeabi_fsub>
 800a4ac:	1c01      	adds	r1, r0, #0
 800a4ae:	9802      	ldr	r0, [sp, #8]
 800a4b0:	f7f6 fa76 	bl	80009a0 <__aeabi_fdiv>
 800a4b4:	9901      	ldr	r1, [sp, #4]
 800a4b6:	1c07      	adds	r7, r0, #0
 800a4b8:	1c28      	adds	r0, r5, #0
 800a4ba:	f7f6 fc49 	bl	8000d50 <__aeabi_fmul>
 800a4be:	9901      	ldr	r1, [sp, #4]
 800a4c0:	f7f6 f8d4 	bl	800066c <__aeabi_fadd>
 800a4c4:	1c01      	adds	r1, r0, #0
 800a4c6:	1c38      	adds	r0, r7, #0
 800a4c8:	f7f6 fd74 	bl	8000fb4 <__aeabi_fsub>
 800a4cc:	1c29      	adds	r1, r5, #0
 800a4ce:	f7f6 fd71 	bl	8000fb4 <__aeabi_fsub>
 800a4d2:	1c01      	adds	r1, r0, #0
 800a4d4:	20fe      	movs	r0, #254	; 0xfe
 800a4d6:	0580      	lsls	r0, r0, #22
 800a4d8:	f7f6 fd6c 	bl	8000fb4 <__aeabi_fsub>
 800a4dc:	05e3      	lsls	r3, r4, #23
 800a4de:	181b      	adds	r3, r3, r0
 800a4e0:	15da      	asrs	r2, r3, #23
 800a4e2:	2a00      	cmp	r2, #0
 800a4e4:	dc04      	bgt.n	800a4f0 <__ieee754_powf+0x620>
 800a4e6:	0021      	movs	r1, r4
 800a4e8:	f000 fe56 	bl	800b198 <scalbnf>
 800a4ec:	1c31      	adds	r1, r6, #0
 800a4ee:	e54c      	b.n	8009f8a <__ieee754_powf+0xba>
 800a4f0:	1c18      	adds	r0, r3, #0
 800a4f2:	e7fb      	b.n	800a4ec <__ieee754_powf+0x61c>
 800a4f4:	20fe      	movs	r0, #254	; 0xfe
 800a4f6:	0580      	lsls	r0, r0, #22
 800a4f8:	e504      	b.n	8009f04 <__ieee754_powf+0x34>
 800a4fa:	46c0      	nop			; (mov r8, r8)
 800a4fc:	007fffff 	.word	0x007fffff
 800a500:	001cc471 	.word	0x001cc471
 800a504:	005db3d6 	.word	0x005db3d6
 800a508:	ff800000 	.word	0xff800000
 800a50c:	0800b420 	.word	0x0800b420
 800a510:	3e53f142 	.word	0x3e53f142
 800a514:	3e6c3255 	.word	0x3e6c3255
 800a518:	3e8ba305 	.word	0x3e8ba305
 800a51c:	3eaaaaab 	.word	0x3eaaaaab
 800a520:	3edb6db7 	.word	0x3edb6db7
 800a524:	3f19999a 	.word	0x3f19999a
 800a528:	40400000 	.word	0x40400000
 800a52c:	3f763800 	.word	0x3f763800
 800a530:	3f76384f 	.word	0x3f76384f
 800a534:	369dc3a0 	.word	0x369dc3a0
 800a538:	0800b430 	.word	0x0800b430
 800a53c:	0800b428 	.word	0x0800b428
 800a540:	3338aa3c 	.word	0x3338aa3c
 800a544:	43160000 	.word	0x43160000
 800a548:	0da24260 	.word	0x0da24260
 800a54c:	3f317200 	.word	0x3f317200
 800a550:	3f317218 	.word	0x3f317218
 800a554:	35bfbe8c 	.word	0x35bfbe8c
 800a558:	3331bb4c 	.word	0x3331bb4c
 800a55c:	35ddea0e 	.word	0x35ddea0e
 800a560:	388ab355 	.word	0x388ab355
 800a564:	3b360b61 	.word	0x3b360b61
 800a568:	3e2aaaab 	.word	0x3e2aaaab

0800a56c <__ieee754_rem_pio2f>:
 800a56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a56e:	4ba0      	ldr	r3, [pc, #640]	; (800a7f0 <__ieee754_rem_pio2f+0x284>)
 800a570:	b08d      	sub	sp, #52	; 0x34
 800a572:	0045      	lsls	r5, r0, #1
 800a574:	000c      	movs	r4, r1
 800a576:	9007      	str	r0, [sp, #28]
 800a578:	086d      	lsrs	r5, r5, #1
 800a57a:	429d      	cmp	r5, r3
 800a57c:	dc04      	bgt.n	800a588 <__ieee754_rem_pio2f+0x1c>
 800a57e:	2300      	movs	r3, #0
 800a580:	6008      	str	r0, [r1, #0]
 800a582:	604b      	str	r3, [r1, #4]
 800a584:	2700      	movs	r7, #0
 800a586:	e01a      	b.n	800a5be <__ieee754_rem_pio2f+0x52>
 800a588:	4b9a      	ldr	r3, [pc, #616]	; (800a7f4 <__ieee754_rem_pio2f+0x288>)
 800a58a:	429d      	cmp	r5, r3
 800a58c:	dc4a      	bgt.n	800a624 <__ieee754_rem_pio2f+0xb8>
 800a58e:	230f      	movs	r3, #15
 800a590:	4e99      	ldr	r6, [pc, #612]	; (800a7f8 <__ieee754_rem_pio2f+0x28c>)
 800a592:	439d      	bics	r5, r3
 800a594:	4999      	ldr	r1, [pc, #612]	; (800a7fc <__ieee754_rem_pio2f+0x290>)
 800a596:	2800      	cmp	r0, #0
 800a598:	dd22      	ble.n	800a5e0 <__ieee754_rem_pio2f+0x74>
 800a59a:	f7f6 fd0b 	bl	8000fb4 <__aeabi_fsub>
 800a59e:	1c07      	adds	r7, r0, #0
 800a5a0:	42b5      	cmp	r5, r6
 800a5a2:	d00f      	beq.n	800a5c4 <__ieee754_rem_pio2f+0x58>
 800a5a4:	4996      	ldr	r1, [pc, #600]	; (800a800 <__ieee754_rem_pio2f+0x294>)
 800a5a6:	f7f6 fd05 	bl	8000fb4 <__aeabi_fsub>
 800a5aa:	1c01      	adds	r1, r0, #0
 800a5ac:	6020      	str	r0, [r4, #0]
 800a5ae:	1c38      	adds	r0, r7, #0
 800a5b0:	f7f6 fd00 	bl	8000fb4 <__aeabi_fsub>
 800a5b4:	4992      	ldr	r1, [pc, #584]	; (800a800 <__ieee754_rem_pio2f+0x294>)
 800a5b6:	f7f6 fcfd 	bl	8000fb4 <__aeabi_fsub>
 800a5ba:	2701      	movs	r7, #1
 800a5bc:	6060      	str	r0, [r4, #4]
 800a5be:	0038      	movs	r0, r7
 800a5c0:	b00d      	add	sp, #52	; 0x34
 800a5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5c4:	498f      	ldr	r1, [pc, #572]	; (800a804 <__ieee754_rem_pio2f+0x298>)
 800a5c6:	f7f6 fcf5 	bl	8000fb4 <__aeabi_fsub>
 800a5ca:	498f      	ldr	r1, [pc, #572]	; (800a808 <__ieee754_rem_pio2f+0x29c>)
 800a5cc:	1c05      	adds	r5, r0, #0
 800a5ce:	f7f6 fcf1 	bl	8000fb4 <__aeabi_fsub>
 800a5d2:	1c01      	adds	r1, r0, #0
 800a5d4:	6020      	str	r0, [r4, #0]
 800a5d6:	1c28      	adds	r0, r5, #0
 800a5d8:	f7f6 fcec 	bl	8000fb4 <__aeabi_fsub>
 800a5dc:	498a      	ldr	r1, [pc, #552]	; (800a808 <__ieee754_rem_pio2f+0x29c>)
 800a5de:	e7ea      	b.n	800a5b6 <__ieee754_rem_pio2f+0x4a>
 800a5e0:	f7f6 f844 	bl	800066c <__aeabi_fadd>
 800a5e4:	1c07      	adds	r7, r0, #0
 800a5e6:	42b5      	cmp	r5, r6
 800a5e8:	d00e      	beq.n	800a608 <__ieee754_rem_pio2f+0x9c>
 800a5ea:	4985      	ldr	r1, [pc, #532]	; (800a800 <__ieee754_rem_pio2f+0x294>)
 800a5ec:	f7f6 f83e 	bl	800066c <__aeabi_fadd>
 800a5f0:	1c01      	adds	r1, r0, #0
 800a5f2:	6020      	str	r0, [r4, #0]
 800a5f4:	1c38      	adds	r0, r7, #0
 800a5f6:	f7f6 fcdd 	bl	8000fb4 <__aeabi_fsub>
 800a5fa:	4981      	ldr	r1, [pc, #516]	; (800a800 <__ieee754_rem_pio2f+0x294>)
 800a5fc:	f7f6 f836 	bl	800066c <__aeabi_fadd>
 800a600:	2701      	movs	r7, #1
 800a602:	6060      	str	r0, [r4, #4]
 800a604:	427f      	negs	r7, r7
 800a606:	e7da      	b.n	800a5be <__ieee754_rem_pio2f+0x52>
 800a608:	497e      	ldr	r1, [pc, #504]	; (800a804 <__ieee754_rem_pio2f+0x298>)
 800a60a:	f7f6 f82f 	bl	800066c <__aeabi_fadd>
 800a60e:	497e      	ldr	r1, [pc, #504]	; (800a808 <__ieee754_rem_pio2f+0x29c>)
 800a610:	1c05      	adds	r5, r0, #0
 800a612:	f7f6 f82b 	bl	800066c <__aeabi_fadd>
 800a616:	1c01      	adds	r1, r0, #0
 800a618:	6020      	str	r0, [r4, #0]
 800a61a:	1c28      	adds	r0, r5, #0
 800a61c:	f7f6 fcca 	bl	8000fb4 <__aeabi_fsub>
 800a620:	4979      	ldr	r1, [pc, #484]	; (800a808 <__ieee754_rem_pio2f+0x29c>)
 800a622:	e7eb      	b.n	800a5fc <__ieee754_rem_pio2f+0x90>
 800a624:	4b79      	ldr	r3, [pc, #484]	; (800a80c <__ieee754_rem_pio2f+0x2a0>)
 800a626:	429d      	cmp	r5, r3
 800a628:	dd00      	ble.n	800a62c <__ieee754_rem_pio2f+0xc0>
 800a62a:	e091      	b.n	800a750 <__ieee754_rem_pio2f+0x1e4>
 800a62c:	f000 fd16 	bl	800b05c <fabsf>
 800a630:	4977      	ldr	r1, [pc, #476]	; (800a810 <__ieee754_rem_pio2f+0x2a4>)
 800a632:	1c06      	adds	r6, r0, #0
 800a634:	f7f6 fb8c 	bl	8000d50 <__aeabi_fmul>
 800a638:	21fc      	movs	r1, #252	; 0xfc
 800a63a:	0589      	lsls	r1, r1, #22
 800a63c:	f7f6 f816 	bl	800066c <__aeabi_fadd>
 800a640:	f7f6 fe92 	bl	8001368 <__aeabi_f2iz>
 800a644:	0007      	movs	r7, r0
 800a646:	f7f6 feaf 	bl	80013a8 <__aeabi_i2f>
 800a64a:	496c      	ldr	r1, [pc, #432]	; (800a7fc <__ieee754_rem_pio2f+0x290>)
 800a64c:	9004      	str	r0, [sp, #16]
 800a64e:	f7f6 fb7f 	bl	8000d50 <__aeabi_fmul>
 800a652:	1c01      	adds	r1, r0, #0
 800a654:	1c30      	adds	r0, r6, #0
 800a656:	f7f6 fcad 	bl	8000fb4 <__aeabi_fsub>
 800a65a:	4969      	ldr	r1, [pc, #420]	; (800a800 <__ieee754_rem_pio2f+0x294>)
 800a65c:	1c06      	adds	r6, r0, #0
 800a65e:	9804      	ldr	r0, [sp, #16]
 800a660:	f7f6 fb76 	bl	8000d50 <__aeabi_fmul>
 800a664:	9003      	str	r0, [sp, #12]
 800a666:	2f1f      	cmp	r7, #31
 800a668:	dc0d      	bgt.n	800a686 <__ieee754_rem_pio2f+0x11a>
 800a66a:	23ff      	movs	r3, #255	; 0xff
 800a66c:	002a      	movs	r2, r5
 800a66e:	4969      	ldr	r1, [pc, #420]	; (800a814 <__ieee754_rem_pio2f+0x2a8>)
 800a670:	439a      	bics	r2, r3
 800a672:	1e7b      	subs	r3, r7, #1
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	585b      	ldr	r3, [r3, r1]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d004      	beq.n	800a686 <__ieee754_rem_pio2f+0x11a>
 800a67c:	1c01      	adds	r1, r0, #0
 800a67e:	1c30      	adds	r0, r6, #0
 800a680:	f7f6 fc98 	bl	8000fb4 <__aeabi_fsub>
 800a684:	e00c      	b.n	800a6a0 <__ieee754_rem_pio2f+0x134>
 800a686:	9903      	ldr	r1, [sp, #12]
 800a688:	1c30      	adds	r0, r6, #0
 800a68a:	f7f6 fc93 	bl	8000fb4 <__aeabi_fsub>
 800a68e:	22ff      	movs	r2, #255	; 0xff
 800a690:	15eb      	asrs	r3, r5, #23
 800a692:	9306      	str	r3, [sp, #24]
 800a694:	0dc3      	lsrs	r3, r0, #23
 800a696:	4013      	ands	r3, r2
 800a698:	9a06      	ldr	r2, [sp, #24]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	2b08      	cmp	r3, #8
 800a69e:	dc01      	bgt.n	800a6a4 <__ieee754_rem_pio2f+0x138>
 800a6a0:	6020      	str	r0, [r4, #0]
 800a6a2:	e026      	b.n	800a6f2 <__ieee754_rem_pio2f+0x186>
 800a6a4:	4957      	ldr	r1, [pc, #348]	; (800a804 <__ieee754_rem_pio2f+0x298>)
 800a6a6:	9804      	ldr	r0, [sp, #16]
 800a6a8:	f7f6 fb52 	bl	8000d50 <__aeabi_fmul>
 800a6ac:	1c05      	adds	r5, r0, #0
 800a6ae:	1c01      	adds	r1, r0, #0
 800a6b0:	1c30      	adds	r0, r6, #0
 800a6b2:	f7f6 fc7f 	bl	8000fb4 <__aeabi_fsub>
 800a6b6:	1c01      	adds	r1, r0, #0
 800a6b8:	9005      	str	r0, [sp, #20]
 800a6ba:	1c30      	adds	r0, r6, #0
 800a6bc:	f7f6 fc7a 	bl	8000fb4 <__aeabi_fsub>
 800a6c0:	1c29      	adds	r1, r5, #0
 800a6c2:	f7f6 fc77 	bl	8000fb4 <__aeabi_fsub>
 800a6c6:	4950      	ldr	r1, [pc, #320]	; (800a808 <__ieee754_rem_pio2f+0x29c>)
 800a6c8:	1c05      	adds	r5, r0, #0
 800a6ca:	9804      	ldr	r0, [sp, #16]
 800a6cc:	f7f6 fb40 	bl	8000d50 <__aeabi_fmul>
 800a6d0:	1c29      	adds	r1, r5, #0
 800a6d2:	f7f6 fc6f 	bl	8000fb4 <__aeabi_fsub>
 800a6d6:	9003      	str	r0, [sp, #12]
 800a6d8:	1c01      	adds	r1, r0, #0
 800a6da:	9805      	ldr	r0, [sp, #20]
 800a6dc:	f7f6 fc6a 	bl	8000fb4 <__aeabi_fsub>
 800a6e0:	23ff      	movs	r3, #255	; 0xff
 800a6e2:	0dc5      	lsrs	r5, r0, #23
 800a6e4:	401d      	ands	r5, r3
 800a6e6:	9b06      	ldr	r3, [sp, #24]
 800a6e8:	1b5d      	subs	r5, r3, r5
 800a6ea:	2d19      	cmp	r5, #25
 800a6ec:	dc15      	bgt.n	800a71a <__ieee754_rem_pio2f+0x1ae>
 800a6ee:	9e05      	ldr	r6, [sp, #20]
 800a6f0:	6020      	str	r0, [r4, #0]
 800a6f2:	6825      	ldr	r5, [r4, #0]
 800a6f4:	1c30      	adds	r0, r6, #0
 800a6f6:	1c29      	adds	r1, r5, #0
 800a6f8:	f7f6 fc5c 	bl	8000fb4 <__aeabi_fsub>
 800a6fc:	9903      	ldr	r1, [sp, #12]
 800a6fe:	f7f6 fc59 	bl	8000fb4 <__aeabi_fsub>
 800a702:	9b07      	ldr	r3, [sp, #28]
 800a704:	6060      	str	r0, [r4, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	db00      	blt.n	800a70c <__ieee754_rem_pio2f+0x1a0>
 800a70a:	e758      	b.n	800a5be <__ieee754_rem_pio2f+0x52>
 800a70c:	2380      	movs	r3, #128	; 0x80
 800a70e:	061b      	lsls	r3, r3, #24
 800a710:	18ed      	adds	r5, r5, r3
 800a712:	18c0      	adds	r0, r0, r3
 800a714:	6025      	str	r5, [r4, #0]
 800a716:	6060      	str	r0, [r4, #4]
 800a718:	e774      	b.n	800a604 <__ieee754_rem_pio2f+0x98>
 800a71a:	493f      	ldr	r1, [pc, #252]	; (800a818 <__ieee754_rem_pio2f+0x2ac>)
 800a71c:	9804      	ldr	r0, [sp, #16]
 800a71e:	f7f6 fb17 	bl	8000d50 <__aeabi_fmul>
 800a722:	1c05      	adds	r5, r0, #0
 800a724:	1c01      	adds	r1, r0, #0
 800a726:	9805      	ldr	r0, [sp, #20]
 800a728:	f7f6 fc44 	bl	8000fb4 <__aeabi_fsub>
 800a72c:	1c01      	adds	r1, r0, #0
 800a72e:	1c06      	adds	r6, r0, #0
 800a730:	9805      	ldr	r0, [sp, #20]
 800a732:	f7f6 fc3f 	bl	8000fb4 <__aeabi_fsub>
 800a736:	1c29      	adds	r1, r5, #0
 800a738:	f7f6 fc3c 	bl	8000fb4 <__aeabi_fsub>
 800a73c:	4937      	ldr	r1, [pc, #220]	; (800a81c <__ieee754_rem_pio2f+0x2b0>)
 800a73e:	1c05      	adds	r5, r0, #0
 800a740:	9804      	ldr	r0, [sp, #16]
 800a742:	f7f6 fb05 	bl	8000d50 <__aeabi_fmul>
 800a746:	1c29      	adds	r1, r5, #0
 800a748:	f7f6 fc34 	bl	8000fb4 <__aeabi_fsub>
 800a74c:	9003      	str	r0, [sp, #12]
 800a74e:	e795      	b.n	800a67c <__ieee754_rem_pio2f+0x110>
 800a750:	4b33      	ldr	r3, [pc, #204]	; (800a820 <__ieee754_rem_pio2f+0x2b4>)
 800a752:	429d      	cmp	r5, r3
 800a754:	dd05      	ble.n	800a762 <__ieee754_rem_pio2f+0x1f6>
 800a756:	1c01      	adds	r1, r0, #0
 800a758:	f7f6 fc2c 	bl	8000fb4 <__aeabi_fsub>
 800a75c:	6060      	str	r0, [r4, #4]
 800a75e:	6020      	str	r0, [r4, #0]
 800a760:	e710      	b.n	800a584 <__ieee754_rem_pio2f+0x18>
 800a762:	15ee      	asrs	r6, r5, #23
 800a764:	3e86      	subs	r6, #134	; 0x86
 800a766:	05f3      	lsls	r3, r6, #23
 800a768:	1aed      	subs	r5, r5, r3
 800a76a:	1c28      	adds	r0, r5, #0
 800a76c:	f7f6 fdfc 	bl	8001368 <__aeabi_f2iz>
 800a770:	f7f6 fe1a 	bl	80013a8 <__aeabi_i2f>
 800a774:	1c01      	adds	r1, r0, #0
 800a776:	9009      	str	r0, [sp, #36]	; 0x24
 800a778:	1c28      	adds	r0, r5, #0
 800a77a:	f7f6 fc1b 	bl	8000fb4 <__aeabi_fsub>
 800a77e:	2187      	movs	r1, #135	; 0x87
 800a780:	05c9      	lsls	r1, r1, #23
 800a782:	f7f6 fae5 	bl	8000d50 <__aeabi_fmul>
 800a786:	1c07      	adds	r7, r0, #0
 800a788:	f7f6 fdee 	bl	8001368 <__aeabi_f2iz>
 800a78c:	f7f6 fe0c 	bl	80013a8 <__aeabi_i2f>
 800a790:	1c01      	adds	r1, r0, #0
 800a792:	900a      	str	r0, [sp, #40]	; 0x28
 800a794:	1c05      	adds	r5, r0, #0
 800a796:	1c38      	adds	r0, r7, #0
 800a798:	f7f6 fc0c 	bl	8000fb4 <__aeabi_fsub>
 800a79c:	2187      	movs	r1, #135	; 0x87
 800a79e:	05c9      	lsls	r1, r1, #23
 800a7a0:	f7f6 fad6 	bl	8000d50 <__aeabi_fmul>
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7a8:	f7f5 fe38 	bl	800041c <__aeabi_fcmpeq>
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d006      	beq.n	800a7c0 <__ieee754_rem_pio2f+0x254>
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	1c28      	adds	r0, r5, #0
 800a7b6:	f7f5 fe31 	bl	800041c <__aeabi_fcmpeq>
 800a7ba:	4243      	negs	r3, r0
 800a7bc:	4143      	adcs	r3, r0
 800a7be:	3301      	adds	r3, #1
 800a7c0:	4a18      	ldr	r2, [pc, #96]	; (800a824 <__ieee754_rem_pio2f+0x2b8>)
 800a7c2:	0021      	movs	r1, r4
 800a7c4:	9201      	str	r2, [sp, #4]
 800a7c6:	2202      	movs	r2, #2
 800a7c8:	a809      	add	r0, sp, #36	; 0x24
 800a7ca:	9200      	str	r2, [sp, #0]
 800a7cc:	0032      	movs	r2, r6
 800a7ce:	f000 f905 	bl	800a9dc <__kernel_rem_pio2f>
 800a7d2:	9b07      	ldr	r3, [sp, #28]
 800a7d4:	0007      	movs	r7, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	db00      	blt.n	800a7dc <__ieee754_rem_pio2f+0x270>
 800a7da:	e6f0      	b.n	800a5be <__ieee754_rem_pio2f+0x52>
 800a7dc:	2280      	movs	r2, #128	; 0x80
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	0612      	lsls	r2, r2, #24
 800a7e2:	189b      	adds	r3, r3, r2
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	6863      	ldr	r3, [r4, #4]
 800a7e8:	189b      	adds	r3, r3, r2
 800a7ea:	6063      	str	r3, [r4, #4]
 800a7ec:	e70a      	b.n	800a604 <__ieee754_rem_pio2f+0x98>
 800a7ee:	46c0      	nop			; (mov r8, r8)
 800a7f0:	3f490fd8 	.word	0x3f490fd8
 800a7f4:	4016cbe3 	.word	0x4016cbe3
 800a7f8:	3fc90fd0 	.word	0x3fc90fd0
 800a7fc:	3fc90f80 	.word	0x3fc90f80
 800a800:	37354443 	.word	0x37354443
 800a804:	37354400 	.word	0x37354400
 800a808:	2e85a308 	.word	0x2e85a308
 800a80c:	43490f80 	.word	0x43490f80
 800a810:	3f22f984 	.word	0x3f22f984
 800a814:	0800b438 	.word	0x0800b438
 800a818:	2e85a300 	.word	0x2e85a300
 800a81c:	248d3132 	.word	0x248d3132
 800a820:	7f7fffff 	.word	0x7f7fffff
 800a824:	0800b4b8 	.word	0x0800b4b8

0800a828 <__ieee754_sqrtf>:
 800a828:	4929      	ldr	r1, [pc, #164]	; (800a8d0 <__ieee754_sqrtf+0xa8>)
 800a82a:	0043      	lsls	r3, r0, #1
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	0002      	movs	r2, r0
 800a830:	1c04      	adds	r4, r0, #0
 800a832:	085b      	lsrs	r3, r3, #1
 800a834:	428b      	cmp	r3, r1
 800a836:	d909      	bls.n	800a84c <__ieee754_sqrtf+0x24>
 800a838:	1c01      	adds	r1, r0, #0
 800a83a:	f7f6 fa89 	bl	8000d50 <__aeabi_fmul>
 800a83e:	1c01      	adds	r1, r0, #0
 800a840:	1c20      	adds	r0, r4, #0
 800a842:	f7f5 ff13 	bl	800066c <__aeabi_fadd>
 800a846:	1c04      	adds	r4, r0, #0
 800a848:	1c20      	adds	r0, r4, #0
 800a84a:	bd70      	pop	{r4, r5, r6, pc}
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d0fb      	beq.n	800a848 <__ieee754_sqrtf+0x20>
 800a850:	2800      	cmp	r0, #0
 800a852:	da06      	bge.n	800a862 <__ieee754_sqrtf+0x3a>
 800a854:	1c01      	adds	r1, r0, #0
 800a856:	f7f6 fbad 	bl	8000fb4 <__aeabi_fsub>
 800a85a:	1c01      	adds	r1, r0, #0
 800a85c:	f7f6 f8a0 	bl	80009a0 <__aeabi_fdiv>
 800a860:	e7f1      	b.n	800a846 <__ieee754_sqrtf+0x1e>
 800a862:	491c      	ldr	r1, [pc, #112]	; (800a8d4 <__ieee754_sqrtf+0xac>)
 800a864:	15c4      	asrs	r4, r0, #23
 800a866:	428b      	cmp	r3, r1
 800a868:	d92d      	bls.n	800a8c6 <__ieee754_sqrtf+0x9e>
 800a86a:	0252      	lsls	r2, r2, #9
 800a86c:	0a53      	lsrs	r3, r2, #9
 800a86e:	2280      	movs	r2, #128	; 0x80
 800a870:	3c7f      	subs	r4, #127	; 0x7f
 800a872:	0412      	lsls	r2, r2, #16
 800a874:	431a      	orrs	r2, r3
 800a876:	07e3      	lsls	r3, r4, #31
 800a878:	d500      	bpl.n	800a87c <__ieee754_sqrtf+0x54>
 800a87a:	0052      	lsls	r2, r2, #1
 800a87c:	2300      	movs	r3, #0
 800a87e:	2180      	movs	r1, #128	; 0x80
 800a880:	2019      	movs	r0, #25
 800a882:	001e      	movs	r6, r3
 800a884:	1064      	asrs	r4, r4, #1
 800a886:	0052      	lsls	r2, r2, #1
 800a888:	0449      	lsls	r1, r1, #17
 800a88a:	1875      	adds	r5, r6, r1
 800a88c:	4295      	cmp	r5, r2
 800a88e:	dc02      	bgt.n	800a896 <__ieee754_sqrtf+0x6e>
 800a890:	186e      	adds	r6, r5, r1
 800a892:	1b52      	subs	r2, r2, r5
 800a894:	185b      	adds	r3, r3, r1
 800a896:	3801      	subs	r0, #1
 800a898:	0052      	lsls	r2, r2, #1
 800a89a:	0849      	lsrs	r1, r1, #1
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d1f4      	bne.n	800a88a <__ieee754_sqrtf+0x62>
 800a8a0:	2a00      	cmp	r2, #0
 800a8a2:	d002      	beq.n	800a8aa <__ieee754_sqrtf+0x82>
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	4393      	bics	r3, r2
 800a8aa:	22fc      	movs	r2, #252	; 0xfc
 800a8ac:	105b      	asrs	r3, r3, #1
 800a8ae:	0592      	lsls	r2, r2, #22
 800a8b0:	189b      	adds	r3, r3, r2
 800a8b2:	05e4      	lsls	r4, r4, #23
 800a8b4:	18e4      	adds	r4, r4, r3
 800a8b6:	e7c7      	b.n	800a848 <__ieee754_sqrtf+0x20>
 800a8b8:	0052      	lsls	r2, r2, #1
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	420a      	tst	r2, r1
 800a8be:	d0fb      	beq.n	800a8b8 <__ieee754_sqrtf+0x90>
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	1ae4      	subs	r4, r4, r3
 800a8c4:	e7d1      	b.n	800a86a <__ieee754_sqrtf+0x42>
 800a8c6:	2180      	movs	r1, #128	; 0x80
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	0409      	lsls	r1, r1, #16
 800a8cc:	e7f6      	b.n	800a8bc <__ieee754_sqrtf+0x94>
 800a8ce:	46c0      	nop			; (mov r8, r8)
 800a8d0:	7f7fffff 	.word	0x7f7fffff
 800a8d4:	007fffff 	.word	0x007fffff

0800a8d8 <__kernel_cosf>:
 800a8d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8da:	4b36      	ldr	r3, [pc, #216]	; (800a9b4 <__kernel_cosf+0xdc>)
 800a8dc:	0044      	lsls	r4, r0, #1
 800a8de:	1c06      	adds	r6, r0, #0
 800a8e0:	9101      	str	r1, [sp, #4]
 800a8e2:	0864      	lsrs	r4, r4, #1
 800a8e4:	429c      	cmp	r4, r3
 800a8e6:	dc03      	bgt.n	800a8f0 <__kernel_cosf+0x18>
 800a8e8:	f7f6 fd3e 	bl	8001368 <__aeabi_f2iz>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d05d      	beq.n	800a9ac <__kernel_cosf+0xd4>
 800a8f0:	1c31      	adds	r1, r6, #0
 800a8f2:	1c30      	adds	r0, r6, #0
 800a8f4:	f7f6 fa2c 	bl	8000d50 <__aeabi_fmul>
 800a8f8:	21fc      	movs	r1, #252	; 0xfc
 800a8fa:	0589      	lsls	r1, r1, #22
 800a8fc:	1c05      	adds	r5, r0, #0
 800a8fe:	f7f6 fa27 	bl	8000d50 <__aeabi_fmul>
 800a902:	492d      	ldr	r1, [pc, #180]	; (800a9b8 <__kernel_cosf+0xe0>)
 800a904:	1c07      	adds	r7, r0, #0
 800a906:	1c28      	adds	r0, r5, #0
 800a908:	f7f6 fa22 	bl	8000d50 <__aeabi_fmul>
 800a90c:	492b      	ldr	r1, [pc, #172]	; (800a9bc <__kernel_cosf+0xe4>)
 800a90e:	f7f5 fead 	bl	800066c <__aeabi_fadd>
 800a912:	1c29      	adds	r1, r5, #0
 800a914:	f7f6 fa1c 	bl	8000d50 <__aeabi_fmul>
 800a918:	4929      	ldr	r1, [pc, #164]	; (800a9c0 <__kernel_cosf+0xe8>)
 800a91a:	f7f6 fb4b 	bl	8000fb4 <__aeabi_fsub>
 800a91e:	1c29      	adds	r1, r5, #0
 800a920:	f7f6 fa16 	bl	8000d50 <__aeabi_fmul>
 800a924:	4927      	ldr	r1, [pc, #156]	; (800a9c4 <__kernel_cosf+0xec>)
 800a926:	f7f5 fea1 	bl	800066c <__aeabi_fadd>
 800a92a:	1c29      	adds	r1, r5, #0
 800a92c:	f7f6 fa10 	bl	8000d50 <__aeabi_fmul>
 800a930:	4925      	ldr	r1, [pc, #148]	; (800a9c8 <__kernel_cosf+0xf0>)
 800a932:	f7f6 fb3f 	bl	8000fb4 <__aeabi_fsub>
 800a936:	1c29      	adds	r1, r5, #0
 800a938:	f7f6 fa0a 	bl	8000d50 <__aeabi_fmul>
 800a93c:	4923      	ldr	r1, [pc, #140]	; (800a9cc <__kernel_cosf+0xf4>)
 800a93e:	f7f5 fe95 	bl	800066c <__aeabi_fadd>
 800a942:	1c29      	adds	r1, r5, #0
 800a944:	f7f6 fa04 	bl	8000d50 <__aeabi_fmul>
 800a948:	1c29      	adds	r1, r5, #0
 800a94a:	f7f6 fa01 	bl	8000d50 <__aeabi_fmul>
 800a94e:	9901      	ldr	r1, [sp, #4]
 800a950:	1c05      	adds	r5, r0, #0
 800a952:	1c30      	adds	r0, r6, #0
 800a954:	f7f6 f9fc 	bl	8000d50 <__aeabi_fmul>
 800a958:	1c01      	adds	r1, r0, #0
 800a95a:	1c28      	adds	r0, r5, #0
 800a95c:	f7f6 fb2a 	bl	8000fb4 <__aeabi_fsub>
 800a960:	4b1b      	ldr	r3, [pc, #108]	; (800a9d0 <__kernel_cosf+0xf8>)
 800a962:	1c05      	adds	r5, r0, #0
 800a964:	429c      	cmp	r4, r3
 800a966:	dc09      	bgt.n	800a97c <__kernel_cosf+0xa4>
 800a968:	1c01      	adds	r1, r0, #0
 800a96a:	1c38      	adds	r0, r7, #0
 800a96c:	f7f6 fb22 	bl	8000fb4 <__aeabi_fsub>
 800a970:	1c01      	adds	r1, r0, #0
 800a972:	20fe      	movs	r0, #254	; 0xfe
 800a974:	0580      	lsls	r0, r0, #22
 800a976:	f7f6 fb1d 	bl	8000fb4 <__aeabi_fsub>
 800a97a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a97c:	4b15      	ldr	r3, [pc, #84]	; (800a9d4 <__kernel_cosf+0xfc>)
 800a97e:	429c      	cmp	r4, r3
 800a980:	dc12      	bgt.n	800a9a8 <__kernel_cosf+0xd0>
 800a982:	23ff      	movs	r3, #255	; 0xff
 800a984:	061b      	lsls	r3, r3, #24
 800a986:	18e4      	adds	r4, r4, r3
 800a988:	20fe      	movs	r0, #254	; 0xfe
 800a98a:	1c21      	adds	r1, r4, #0
 800a98c:	0580      	lsls	r0, r0, #22
 800a98e:	f7f6 fb11 	bl	8000fb4 <__aeabi_fsub>
 800a992:	1c21      	adds	r1, r4, #0
 800a994:	1c06      	adds	r6, r0, #0
 800a996:	1c38      	adds	r0, r7, #0
 800a998:	f7f6 fb0c 	bl	8000fb4 <__aeabi_fsub>
 800a99c:	1c29      	adds	r1, r5, #0
 800a99e:	f7f6 fb09 	bl	8000fb4 <__aeabi_fsub>
 800a9a2:	1c01      	adds	r1, r0, #0
 800a9a4:	1c30      	adds	r0, r6, #0
 800a9a6:	e7e6      	b.n	800a976 <__kernel_cosf+0x9e>
 800a9a8:	4c0b      	ldr	r4, [pc, #44]	; (800a9d8 <__kernel_cosf+0x100>)
 800a9aa:	e7ed      	b.n	800a988 <__kernel_cosf+0xb0>
 800a9ac:	20fe      	movs	r0, #254	; 0xfe
 800a9ae:	0580      	lsls	r0, r0, #22
 800a9b0:	e7e3      	b.n	800a97a <__kernel_cosf+0xa2>
 800a9b2:	46c0      	nop			; (mov r8, r8)
 800a9b4:	31ffffff 	.word	0x31ffffff
 800a9b8:	ad47d74e 	.word	0xad47d74e
 800a9bc:	310f74f6 	.word	0x310f74f6
 800a9c0:	3493f27c 	.word	0x3493f27c
 800a9c4:	37d00d01 	.word	0x37d00d01
 800a9c8:	3ab60b61 	.word	0x3ab60b61
 800a9cc:	3d2aaaab 	.word	0x3d2aaaab
 800a9d0:	3e999999 	.word	0x3e999999
 800a9d4:	3f480000 	.word	0x3f480000
 800a9d8:	3e900000 	.word	0x3e900000

0800a9dc <__kernel_rem_pio2f>:
 800a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9de:	b0df      	sub	sp, #380	; 0x17c
 800a9e0:	9009      	str	r0, [sp, #36]	; 0x24
 800a9e2:	2007      	movs	r0, #7
 800a9e4:	9308      	str	r3, [sp, #32]
 800a9e6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a9e8:	9103      	str	r1, [sp, #12]
 800a9ea:	0099      	lsls	r1, r3, #2
 800a9ec:	4bd7      	ldr	r3, [pc, #860]	; (800ad4c <__kernel_rem_pio2f+0x370>)
 800a9ee:	2400      	movs	r4, #0
 800a9f0:	58cb      	ldr	r3, [r1, r3]
 800a9f2:	1ed1      	subs	r1, r2, #3
 800a9f4:	9306      	str	r3, [sp, #24]
 800a9f6:	9b08      	ldr	r3, [sp, #32]
 800a9f8:	af22      	add	r7, sp, #136	; 0x88
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	9307      	str	r3, [sp, #28]
 800a9fe:	17cb      	asrs	r3, r1, #31
 800aa00:	4003      	ands	r3, r0
 800aa02:	185b      	adds	r3, r3, r1
 800aa04:	10db      	asrs	r3, r3, #3
 800aa06:	9304      	str	r3, [sp, #16]
 800aa08:	43db      	mvns	r3, r3
 800aa0a:	9904      	ldr	r1, [sp, #16]
 800aa0c:	17db      	asrs	r3, r3, #31
 800aa0e:	4019      	ands	r1, r3
 800aa10:	000b      	movs	r3, r1
 800aa12:	3301      	adds	r3, #1
 800aa14:	00db      	lsls	r3, r3, #3
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	9a07      	ldr	r2, [sp, #28]
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	4694      	mov	ip, r2
 800aa1e:	9b06      	ldr	r3, [sp, #24]
 800aa20:	1a8e      	subs	r6, r1, r2
 800aa22:	4463      	add	r3, ip
 800aa24:	9302      	str	r3, [sp, #8]
 800aa26:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800aa28:	00b5      	lsls	r5, r6, #2
 800aa2a:	9104      	str	r1, [sp, #16]
 800aa2c:	195d      	adds	r5, r3, r5
 800aa2e:	9b02      	ldr	r3, [sp, #8]
 800aa30:	429c      	cmp	r4, r3
 800aa32:	dd7f      	ble.n	800ab34 <__kernel_rem_pio2f+0x158>
 800aa34:	2500      	movs	r5, #0
 800aa36:	9b08      	ldr	r3, [sp, #32]
 800aa38:	009c      	lsls	r4, r3, #2
 800aa3a:	ab22      	add	r3, sp, #136	; 0x88
 800aa3c:	191c      	adds	r4, r3, r4
 800aa3e:	9b06      	ldr	r3, [sp, #24]
 800aa40:	429d      	cmp	r5, r3
 800aa42:	dc00      	bgt.n	800aa46 <__kernel_rem_pio2f+0x6a>
 800aa44:	e09a      	b.n	800ab7c <__kernel_rem_pio2f+0x1a0>
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	aa0e      	add	r2, sp, #56	; 0x38
 800aa4a:	189b      	adds	r3, r3, r2
 800aa4c:	9f06      	ldr	r7, [sp, #24]
 800aa4e:	930c      	str	r3, [sp, #48]	; 0x30
 800aa50:	003e      	movs	r6, r7
 800aa52:	00bb      	lsls	r3, r7, #2
 800aa54:	ad4a      	add	r5, sp, #296	; 0x128
 800aa56:	aa0e      	add	r2, sp, #56	; 0x38
 800aa58:	930d      	str	r3, [sp, #52]	; 0x34
 800aa5a:	595c      	ldr	r4, [r3, r5]
 800aa5c:	189b      	adds	r3, r3, r2
 800aa5e:	9302      	str	r3, [sp, #8]
 800aa60:	950a      	str	r5, [sp, #40]	; 0x28
 800aa62:	2e00      	cmp	r6, #0
 800aa64:	dd00      	ble.n	800aa68 <__kernel_rem_pio2f+0x8c>
 800aa66:	e08c      	b.n	800ab82 <__kernel_rem_pio2f+0x1a6>
 800aa68:	9901      	ldr	r1, [sp, #4]
 800aa6a:	1c20      	adds	r0, r4, #0
 800aa6c:	f000 fb94 	bl	800b198 <scalbnf>
 800aa70:	21f8      	movs	r1, #248	; 0xf8
 800aa72:	0589      	lsls	r1, r1, #22
 800aa74:	1c04      	adds	r4, r0, #0
 800aa76:	f7f6 f96b 	bl	8000d50 <__aeabi_fmul>
 800aa7a:	f000 fafd 	bl	800b078 <floorf>
 800aa7e:	2182      	movs	r1, #130	; 0x82
 800aa80:	05c9      	lsls	r1, r1, #23
 800aa82:	f7f6 f965 	bl	8000d50 <__aeabi_fmul>
 800aa86:	1c01      	adds	r1, r0, #0
 800aa88:	1c20      	adds	r0, r4, #0
 800aa8a:	f7f6 fa93 	bl	8000fb4 <__aeabi_fsub>
 800aa8e:	1c04      	adds	r4, r0, #0
 800aa90:	f7f6 fc6a 	bl	8001368 <__aeabi_f2iz>
 800aa94:	9005      	str	r0, [sp, #20]
 800aa96:	f7f6 fc87 	bl	80013a8 <__aeabi_i2f>
 800aa9a:	1c01      	adds	r1, r0, #0
 800aa9c:	1c20      	adds	r0, r4, #0
 800aa9e:	f7f6 fa89 	bl	8000fb4 <__aeabi_fsub>
 800aaa2:	9b01      	ldr	r3, [sp, #4]
 800aaa4:	1c04      	adds	r4, r0, #0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	dc00      	bgt.n	800aaac <__kernel_rem_pio2f+0xd0>
 800aaaa:	e08d      	b.n	800abc8 <__kernel_rem_pio2f+0x1ec>
 800aaac:	2108      	movs	r1, #8
 800aaae:	1e7b      	subs	r3, r7, #1
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	aa0e      	add	r2, sp, #56	; 0x38
 800aab4:	589a      	ldr	r2, [r3, r2]
 800aab6:	9801      	ldr	r0, [sp, #4]
 800aab8:	9d05      	ldr	r5, [sp, #20]
 800aaba:	1a09      	subs	r1, r1, r0
 800aabc:	0010      	movs	r0, r2
 800aabe:	4108      	asrs	r0, r1
 800aac0:	182d      	adds	r5, r5, r0
 800aac2:	4088      	lsls	r0, r1
 800aac4:	1a10      	subs	r0, r2, r0
 800aac6:	aa0e      	add	r2, sp, #56	; 0x38
 800aac8:	5098      	str	r0, [r3, r2]
 800aaca:	2307      	movs	r3, #7
 800aacc:	9a01      	ldr	r2, [sp, #4]
 800aace:	9505      	str	r5, [sp, #20]
 800aad0:	1a9b      	subs	r3, r3, r2
 800aad2:	4118      	asrs	r0, r3
 800aad4:	9002      	str	r0, [sp, #8]
 800aad6:	9b02      	ldr	r3, [sp, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dc00      	bgt.n	800aade <__kernel_rem_pio2f+0x102>
 800aadc:	e085      	b.n	800abea <__kernel_rem_pio2f+0x20e>
 800aade:	9b05      	ldr	r3, [sp, #20]
 800aae0:	2200      	movs	r2, #0
 800aae2:	3301      	adds	r3, #1
 800aae4:	9305      	str	r3, [sp, #20]
 800aae6:	2301      	movs	r3, #1
 800aae8:	2680      	movs	r6, #128	; 0x80
 800aaea:	0015      	movs	r5, r2
 800aaec:	469c      	mov	ip, r3
 800aaee:	0076      	lsls	r6, r6, #1
 800aaf0:	4297      	cmp	r7, r2
 800aaf2:	dd00      	ble.n	800aaf6 <__kernel_rem_pio2f+0x11a>
 800aaf4:	e0b6      	b.n	800ac64 <__kernel_rem_pio2f+0x288>
 800aaf6:	9b01      	ldr	r3, [sp, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	dd05      	ble.n	800ab08 <__kernel_rem_pio2f+0x12c>
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d100      	bne.n	800ab02 <__kernel_rem_pio2f+0x126>
 800ab00:	e0c4      	b.n	800ac8c <__kernel_rem_pio2f+0x2b0>
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d100      	bne.n	800ab08 <__kernel_rem_pio2f+0x12c>
 800ab06:	e0cc      	b.n	800aca2 <__kernel_rem_pio2f+0x2c6>
 800ab08:	9b02      	ldr	r3, [sp, #8]
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d16d      	bne.n	800abea <__kernel_rem_pio2f+0x20e>
 800ab0e:	20fe      	movs	r0, #254	; 0xfe
 800ab10:	1c21      	adds	r1, r4, #0
 800ab12:	0580      	lsls	r0, r0, #22
 800ab14:	f7f6 fa4e 	bl	8000fb4 <__aeabi_fsub>
 800ab18:	1c04      	adds	r4, r0, #0
 800ab1a:	2d00      	cmp	r5, #0
 800ab1c:	d065      	beq.n	800abea <__kernel_rem_pio2f+0x20e>
 800ab1e:	20fe      	movs	r0, #254	; 0xfe
 800ab20:	9901      	ldr	r1, [sp, #4]
 800ab22:	0580      	lsls	r0, r0, #22
 800ab24:	f000 fb38 	bl	800b198 <scalbnf>
 800ab28:	1c01      	adds	r1, r0, #0
 800ab2a:	1c20      	adds	r0, r4, #0
 800ab2c:	f7f6 fa42 	bl	8000fb4 <__aeabi_fsub>
 800ab30:	1c04      	adds	r4, r0, #0
 800ab32:	e05a      	b.n	800abea <__kernel_rem_pio2f+0x20e>
 800ab34:	2000      	movs	r0, #0
 800ab36:	42e6      	cmn	r6, r4
 800ab38:	d403      	bmi.n	800ab42 <__kernel_rem_pio2f+0x166>
 800ab3a:	00a3      	lsls	r3, r4, #2
 800ab3c:	58e8      	ldr	r0, [r5, r3]
 800ab3e:	f7f6 fc33 	bl	80013a8 <__aeabi_i2f>
 800ab42:	00a3      	lsls	r3, r4, #2
 800ab44:	51d8      	str	r0, [r3, r7]
 800ab46:	3401      	adds	r4, #1
 800ab48:	e771      	b.n	800aa2e <__kernel_rem_pio2f+0x52>
 800ab4a:	00b2      	lsls	r2, r6, #2
 800ab4c:	1aa3      	subs	r3, r4, r2
 800ab4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab50:	3b04      	subs	r3, #4
 800ab52:	5889      	ldr	r1, [r1, r2]
 800ab54:	6818      	ldr	r0, [r3, #0]
 800ab56:	f7f6 f8fb 	bl	8000d50 <__aeabi_fmul>
 800ab5a:	1c01      	adds	r1, r0, #0
 800ab5c:	1c38      	adds	r0, r7, #0
 800ab5e:	f7f5 fd85 	bl	800066c <__aeabi_fadd>
 800ab62:	3601      	adds	r6, #1
 800ab64:	1c07      	adds	r7, r0, #0
 800ab66:	9b07      	ldr	r3, [sp, #28]
 800ab68:	429e      	cmp	r6, r3
 800ab6a:	ddee      	ble.n	800ab4a <__kernel_rem_pio2f+0x16e>
 800ab6c:	21f0      	movs	r1, #240	; 0xf0
 800ab6e:	aa0e      	add	r2, sp, #56	; 0x38
 800ab70:	00ab      	lsls	r3, r5, #2
 800ab72:	1852      	adds	r2, r2, r1
 800ab74:	50d7      	str	r7, [r2, r3]
 800ab76:	3501      	adds	r5, #1
 800ab78:	3404      	adds	r4, #4
 800ab7a:	e760      	b.n	800aa3e <__kernel_rem_pio2f+0x62>
 800ab7c:	2700      	movs	r7, #0
 800ab7e:	2600      	movs	r6, #0
 800ab80:	e7f1      	b.n	800ab66 <__kernel_rem_pio2f+0x18a>
 800ab82:	21ee      	movs	r1, #238	; 0xee
 800ab84:	1c20      	adds	r0, r4, #0
 800ab86:	0589      	lsls	r1, r1, #22
 800ab88:	f7f6 f8e2 	bl	8000d50 <__aeabi_fmul>
 800ab8c:	f7f6 fbec 	bl	8001368 <__aeabi_f2iz>
 800ab90:	f7f6 fc0a 	bl	80013a8 <__aeabi_i2f>
 800ab94:	2187      	movs	r1, #135	; 0x87
 800ab96:	00b3      	lsls	r3, r6, #2
 800ab98:	425b      	negs	r3, r3
 800ab9a:	05c9      	lsls	r1, r1, #23
 800ab9c:	9305      	str	r3, [sp, #20]
 800ab9e:	1c05      	adds	r5, r0, #0
 800aba0:	f7f6 f8d6 	bl	8000d50 <__aeabi_fmul>
 800aba4:	1c01      	adds	r1, r0, #0
 800aba6:	1c20      	adds	r0, r4, #0
 800aba8:	f7f6 fa04 	bl	8000fb4 <__aeabi_fsub>
 800abac:	f7f6 fbdc 	bl	8001368 <__aeabi_f2iz>
 800abb0:	9b02      	ldr	r3, [sp, #8]
 800abb2:	9a05      	ldr	r2, [sp, #20]
 800abb4:	3e01      	subs	r6, #1
 800abb6:	5098      	str	r0, [r3, r2]
 800abb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abba:	00b3      	lsls	r3, r6, #2
 800abbc:	5899      	ldr	r1, [r3, r2]
 800abbe:	1c28      	adds	r0, r5, #0
 800abc0:	f7f5 fd54 	bl	800066c <__aeabi_fadd>
 800abc4:	1c04      	adds	r4, r0, #0
 800abc6:	e74c      	b.n	800aa62 <__kernel_rem_pio2f+0x86>
 800abc8:	9b01      	ldr	r3, [sp, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d106      	bne.n	800abdc <__kernel_rem_pio2f+0x200>
 800abce:	1e7b      	subs	r3, r7, #1
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	aa0e      	add	r2, sp, #56	; 0x38
 800abd4:	5898      	ldr	r0, [r3, r2]
 800abd6:	1203      	asrs	r3, r0, #8
 800abd8:	9302      	str	r3, [sp, #8]
 800abda:	e77c      	b.n	800aad6 <__kernel_rem_pio2f+0xfa>
 800abdc:	21fc      	movs	r1, #252	; 0xfc
 800abde:	0589      	lsls	r1, r1, #22
 800abe0:	f7f5 fc40 	bl	8000464 <__aeabi_fcmpge>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d13a      	bne.n	800ac5e <__kernel_rem_pio2f+0x282>
 800abe8:	9002      	str	r0, [sp, #8]
 800abea:	2100      	movs	r1, #0
 800abec:	1c20      	adds	r0, r4, #0
 800abee:	f7f5 fc15 	bl	800041c <__aeabi_fcmpeq>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	d100      	bne.n	800abf8 <__kernel_rem_pio2f+0x21c>
 800abf6:	e0ab      	b.n	800ad50 <__kernel_rem_pio2f+0x374>
 800abf8:	003b      	movs	r3, r7
 800abfa:	2200      	movs	r2, #0
 800abfc:	1e79      	subs	r1, r7, #1
 800abfe:	9806      	ldr	r0, [sp, #24]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	4298      	cmp	r0, r3
 800ac04:	dd54      	ble.n	800acb0 <__kernel_rem_pio2f+0x2d4>
 800ac06:	2a00      	cmp	r2, #0
 800ac08:	d100      	bne.n	800ac0c <__kernel_rem_pio2f+0x230>
 800ac0a:	e089      	b.n	800ad20 <__kernel_rem_pio2f+0x344>
 800ac0c:	000f      	movs	r7, r1
 800ac0e:	9b01      	ldr	r3, [sp, #4]
 800ac10:	3b08      	subs	r3, #8
 800ac12:	9301      	str	r3, [sp, #4]
 800ac14:	00bb      	lsls	r3, r7, #2
 800ac16:	aa0e      	add	r2, sp, #56	; 0x38
 800ac18:	589b      	ldr	r3, [r3, r2]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d100      	bne.n	800ac20 <__kernel_rem_pio2f+0x244>
 800ac1e:	e090      	b.n	800ad42 <__kernel_rem_pio2f+0x366>
 800ac20:	20fe      	movs	r0, #254	; 0xfe
 800ac22:	9901      	ldr	r1, [sp, #4]
 800ac24:	0580      	lsls	r0, r0, #22
 800ac26:	f000 fab7 	bl	800b198 <scalbnf>
 800ac2a:	00bb      	lsls	r3, r7, #2
 800ac2c:	001d      	movs	r5, r3
 800ac2e:	003e      	movs	r6, r7
 800ac30:	1c04      	adds	r4, r0, #0
 800ac32:	9301      	str	r3, [sp, #4]
 800ac34:	2e00      	cmp	r6, #0
 800ac36:	db00      	blt.n	800ac3a <__kernel_rem_pio2f+0x25e>
 800ac38:	e0bf      	b.n	800adba <__kernel_rem_pio2f+0x3de>
 800ac3a:	2500      	movs	r5, #0
 800ac3c:	9a01      	ldr	r2, [sp, #4]
 800ac3e:	ab4a      	add	r3, sp, #296	; 0x128
 800ac40:	189c      	adds	r4, r3, r2
 800ac42:	1b7b      	subs	r3, r7, r5
 800ac44:	d400      	bmi.n	800ac48 <__kernel_rem_pio2f+0x26c>
 800ac46:	e0e6      	b.n	800ae16 <__kernel_rem_pio2f+0x43a>
 800ac48:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d900      	bls.n	800ac50 <__kernel_rem_pio2f+0x274>
 800ac4e:	e0f5      	b.n	800ae3c <__kernel_rem_pio2f+0x460>
 800ac50:	0018      	movs	r0, r3
 800ac52:	f7f5 fa57 	bl	8000104 <__gnu_thumb1_case_uhi>
 800ac56:	00f9      	.short	0x00f9
 800ac58:	011d011d 	.word	0x011d011d
 800ac5c:	015b      	.short	0x015b
 800ac5e:	2302      	movs	r3, #2
 800ac60:	9302      	str	r3, [sp, #8]
 800ac62:	e73c      	b.n	800aade <__kernel_rem_pio2f+0x102>
 800ac64:	0091      	lsls	r1, r2, #2
 800ac66:	ab0e      	add	r3, sp, #56	; 0x38
 800ac68:	58cb      	ldr	r3, [r1, r3]
 800ac6a:	2d00      	cmp	r5, #0
 800ac6c:	d108      	bne.n	800ac80 <__kernel_rem_pio2f+0x2a4>
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <__kernel_rem_pio2f+0x29e>
 800ac72:	1af3      	subs	r3, r6, r3
 800ac74:	ad0e      	add	r5, sp, #56	; 0x38
 800ac76:	514b      	str	r3, [r1, r5]
 800ac78:	4663      	mov	r3, ip
 800ac7a:	3201      	adds	r2, #1
 800ac7c:	001d      	movs	r5, r3
 800ac7e:	e737      	b.n	800aaf0 <__kernel_rem_pio2f+0x114>
 800ac80:	20ff      	movs	r0, #255	; 0xff
 800ac82:	1ac3      	subs	r3, r0, r3
 800ac84:	a80e      	add	r0, sp, #56	; 0x38
 800ac86:	500b      	str	r3, [r1, r0]
 800ac88:	002b      	movs	r3, r5
 800ac8a:	e7f6      	b.n	800ac7a <__kernel_rem_pio2f+0x29e>
 800ac8c:	1e7b      	subs	r3, r7, #1
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	aa0e      	add	r2, sp, #56	; 0x38
 800ac92:	589a      	ldr	r2, [r3, r2]
 800ac94:	920a      	str	r2, [sp, #40]	; 0x28
 800ac96:	227f      	movs	r2, #127	; 0x7f
 800ac98:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac9a:	400a      	ands	r2, r1
 800ac9c:	a90e      	add	r1, sp, #56	; 0x38
 800ac9e:	505a      	str	r2, [r3, r1]
 800aca0:	e732      	b.n	800ab08 <__kernel_rem_pio2f+0x12c>
 800aca2:	1e7b      	subs	r3, r7, #1
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	aa0e      	add	r2, sp, #56	; 0x38
 800aca8:	589a      	ldr	r2, [r3, r2]
 800acaa:	920a      	str	r2, [sp, #40]	; 0x28
 800acac:	223f      	movs	r2, #63	; 0x3f
 800acae:	e7f3      	b.n	800ac98 <__kernel_rem_pio2f+0x2bc>
 800acb0:	0098      	lsls	r0, r3, #2
 800acb2:	ac0e      	add	r4, sp, #56	; 0x38
 800acb4:	5900      	ldr	r0, [r0, r4]
 800acb6:	4302      	orrs	r2, r0
 800acb8:	e7a1      	b.n	800abfe <__kernel_rem_pio2f+0x222>
 800acba:	3301      	adds	r3, #1
 800acbc:	009a      	lsls	r2, r3, #2
 800acbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800acc0:	4252      	negs	r2, r2
 800acc2:	588a      	ldr	r2, [r1, r2]
 800acc4:	2a00      	cmp	r2, #0
 800acc6:	d0f8      	beq.n	800acba <__kernel_rem_pio2f+0x2de>
 800acc8:	2400      	movs	r4, #0
 800acca:	1c7a      	adds	r2, r7, #1
 800accc:	9202      	str	r2, [sp, #8]
 800acce:	9a04      	ldr	r2, [sp, #16]
 800acd0:	a922      	add	r1, sp, #136	; 0x88
 800acd2:	19d2      	adds	r2, r2, r7
 800acd4:	0092      	lsls	r2, r2, #2
 800acd6:	920a      	str	r2, [sp, #40]	; 0x28
 800acd8:	9a08      	ldr	r2, [sp, #32]
 800acda:	18ba      	adds	r2, r7, r2
 800acdc:	0092      	lsls	r2, r2, #2
 800acde:	188a      	adds	r2, r1, r2
 800ace0:	9205      	str	r2, [sp, #20]
 800ace2:	18ff      	adds	r7, r7, r3
 800ace4:	9b02      	ldr	r3, [sp, #8]
 800ace6:	429f      	cmp	r7, r3
 800ace8:	da00      	bge.n	800acec <__kernel_rem_pio2f+0x310>
 800acea:	e6b1      	b.n	800aa50 <__kernel_rem_pio2f+0x74>
 800acec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acee:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800acf0:	18e3      	adds	r3, r4, r3
 800acf2:	18d3      	adds	r3, r2, r3
 800acf4:	6858      	ldr	r0, [r3, #4]
 800acf6:	f7f6 fb57 	bl	80013a8 <__aeabi_i2f>
 800acfa:	2500      	movs	r5, #0
 800acfc:	2600      	movs	r6, #0
 800acfe:	9b05      	ldr	r3, [sp, #20]
 800ad00:	5118      	str	r0, [r3, r4]
 800ad02:	191b      	adds	r3, r3, r4
 800ad04:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad06:	9b07      	ldr	r3, [sp, #28]
 800ad08:	429d      	cmp	r5, r3
 800ad0a:	dd0b      	ble.n	800ad24 <__kernel_rem_pio2f+0x348>
 800ad0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad0e:	aa4a      	add	r2, sp, #296	; 0x128
 800ad10:	18e3      	adds	r3, r4, r3
 800ad12:	18d3      	adds	r3, r2, r3
 800ad14:	605e      	str	r6, [r3, #4]
 800ad16:	9b02      	ldr	r3, [sp, #8]
 800ad18:	3404      	adds	r4, #4
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	9302      	str	r3, [sp, #8]
 800ad1e:	e7e1      	b.n	800ace4 <__kernel_rem_pio2f+0x308>
 800ad20:	2301      	movs	r3, #1
 800ad22:	e7cb      	b.n	800acbc <__kernel_rem_pio2f+0x2e0>
 800ad24:	00ab      	lsls	r3, r5, #2
 800ad26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad28:	425a      	negs	r2, r3
 800ad2a:	5889      	ldr	r1, [r1, r2]
 800ad2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad2e:	3501      	adds	r5, #1
 800ad30:	58d0      	ldr	r0, [r2, r3]
 800ad32:	f7f6 f80d 	bl	8000d50 <__aeabi_fmul>
 800ad36:	1c01      	adds	r1, r0, #0
 800ad38:	1c30      	adds	r0, r6, #0
 800ad3a:	f7f5 fc97 	bl	800066c <__aeabi_fadd>
 800ad3e:	1c06      	adds	r6, r0, #0
 800ad40:	e7e1      	b.n	800ad06 <__kernel_rem_pio2f+0x32a>
 800ad42:	9b01      	ldr	r3, [sp, #4]
 800ad44:	3f01      	subs	r7, #1
 800ad46:	3b08      	subs	r3, #8
 800ad48:	9301      	str	r3, [sp, #4]
 800ad4a:	e763      	b.n	800ac14 <__kernel_rem_pio2f+0x238>
 800ad4c:	0800b7fc 	.word	0x0800b7fc
 800ad50:	9b01      	ldr	r3, [sp, #4]
 800ad52:	1c20      	adds	r0, r4, #0
 800ad54:	4259      	negs	r1, r3
 800ad56:	f000 fa1f 	bl	800b198 <scalbnf>
 800ad5a:	2187      	movs	r1, #135	; 0x87
 800ad5c:	05c9      	lsls	r1, r1, #23
 800ad5e:	1c04      	adds	r4, r0, #0
 800ad60:	f7f5 fb80 	bl	8000464 <__aeabi_fcmpge>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d021      	beq.n	800adac <__kernel_rem_pio2f+0x3d0>
 800ad68:	21ee      	movs	r1, #238	; 0xee
 800ad6a:	1c20      	adds	r0, r4, #0
 800ad6c:	0589      	lsls	r1, r1, #22
 800ad6e:	f7f5 ffef 	bl	8000d50 <__aeabi_fmul>
 800ad72:	f7f6 faf9 	bl	8001368 <__aeabi_f2iz>
 800ad76:	f7f6 fb17 	bl	80013a8 <__aeabi_i2f>
 800ad7a:	2187      	movs	r1, #135	; 0x87
 800ad7c:	05c9      	lsls	r1, r1, #23
 800ad7e:	1c05      	adds	r5, r0, #0
 800ad80:	f7f5 ffe6 	bl	8000d50 <__aeabi_fmul>
 800ad84:	1c01      	adds	r1, r0, #0
 800ad86:	1c20      	adds	r0, r4, #0
 800ad88:	f7f6 f914 	bl	8000fb4 <__aeabi_fsub>
 800ad8c:	f7f6 faec 	bl	8001368 <__aeabi_f2iz>
 800ad90:	00be      	lsls	r6, r7, #2
 800ad92:	ab0e      	add	r3, sp, #56	; 0x38
 800ad94:	50f0      	str	r0, [r6, r3]
 800ad96:	9b01      	ldr	r3, [sp, #4]
 800ad98:	1c28      	adds	r0, r5, #0
 800ad9a:	3308      	adds	r3, #8
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	f7f6 fae3 	bl	8001368 <__aeabi_f2iz>
 800ada2:	3701      	adds	r7, #1
 800ada4:	00bc      	lsls	r4, r7, #2
 800ada6:	ab0e      	add	r3, sp, #56	; 0x38
 800ada8:	50e0      	str	r0, [r4, r3]
 800adaa:	e739      	b.n	800ac20 <__kernel_rem_pio2f+0x244>
 800adac:	1c20      	adds	r0, r4, #0
 800adae:	f7f6 fadb 	bl	8001368 <__aeabi_f2iz>
 800adb2:	00bd      	lsls	r5, r7, #2
 800adb4:	ab0e      	add	r3, sp, #56	; 0x38
 800adb6:	50e8      	str	r0, [r5, r3]
 800adb8:	e732      	b.n	800ac20 <__kernel_rem_pio2f+0x244>
 800adba:	ab0e      	add	r3, sp, #56	; 0x38
 800adbc:	58e8      	ldr	r0, [r5, r3]
 800adbe:	f7f6 faf3 	bl	80013a8 <__aeabi_i2f>
 800adc2:	1c21      	adds	r1, r4, #0
 800adc4:	f7f5 ffc4 	bl	8000d50 <__aeabi_fmul>
 800adc8:	22f0      	movs	r2, #240	; 0xf0
 800adca:	21ee      	movs	r1, #238	; 0xee
 800adcc:	ab0e      	add	r3, sp, #56	; 0x38
 800adce:	189b      	adds	r3, r3, r2
 800add0:	5158      	str	r0, [r3, r5]
 800add2:	0589      	lsls	r1, r1, #22
 800add4:	1c20      	adds	r0, r4, #0
 800add6:	f7f5 ffbb 	bl	8000d50 <__aeabi_fmul>
 800adda:	3e01      	subs	r6, #1
 800addc:	1c04      	adds	r4, r0, #0
 800adde:	3d04      	subs	r5, #4
 800ade0:	e728      	b.n	800ac34 <__kernel_rem_pio2f+0x258>
 800ade2:	4a61      	ldr	r2, [pc, #388]	; (800af68 <__kernel_rem_pio2f+0x58c>)
 800ade4:	00b3      	lsls	r3, r6, #2
 800ade6:	58e1      	ldr	r1, [r4, r3]
 800ade8:	5898      	ldr	r0, [r3, r2]
 800adea:	f7f5 ffb1 	bl	8000d50 <__aeabi_fmul>
 800adee:	1c01      	adds	r1, r0, #0
 800adf0:	9804      	ldr	r0, [sp, #16]
 800adf2:	f7f5 fc3b 	bl	800066c <__aeabi_fadd>
 800adf6:	3601      	adds	r6, #1
 800adf8:	9004      	str	r0, [sp, #16]
 800adfa:	9b06      	ldr	r3, [sp, #24]
 800adfc:	429e      	cmp	r6, r3
 800adfe:	dc01      	bgt.n	800ae04 <__kernel_rem_pio2f+0x428>
 800ae00:	42b5      	cmp	r5, r6
 800ae02:	daee      	bge.n	800ade2 <__kernel_rem_pio2f+0x406>
 800ae04:	21a0      	movs	r1, #160	; 0xa0
 800ae06:	aa0e      	add	r2, sp, #56	; 0x38
 800ae08:	1852      	adds	r2, r2, r1
 800ae0a:	9904      	ldr	r1, [sp, #16]
 800ae0c:	00ab      	lsls	r3, r5, #2
 800ae0e:	50d1      	str	r1, [r2, r3]
 800ae10:	3501      	adds	r5, #1
 800ae12:	3c04      	subs	r4, #4
 800ae14:	e715      	b.n	800ac42 <__kernel_rem_pio2f+0x266>
 800ae16:	2300      	movs	r3, #0
 800ae18:	2600      	movs	r6, #0
 800ae1a:	9304      	str	r3, [sp, #16]
 800ae1c:	e7ed      	b.n	800adfa <__kernel_rem_pio2f+0x41e>
 800ae1e:	00bb      	lsls	r3, r7, #2
 800ae20:	5919      	ldr	r1, [r3, r4]
 800ae22:	f7f5 fc23 	bl	800066c <__aeabi_fadd>
 800ae26:	3f01      	subs	r7, #1
 800ae28:	2f00      	cmp	r7, #0
 800ae2a:	daf8      	bge.n	800ae1e <__kernel_rem_pio2f+0x442>
 800ae2c:	9b02      	ldr	r3, [sp, #8]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d002      	beq.n	800ae38 <__kernel_rem_pio2f+0x45c>
 800ae32:	2380      	movs	r3, #128	; 0x80
 800ae34:	061b      	lsls	r3, r3, #24
 800ae36:	18c0      	adds	r0, r0, r3
 800ae38:	9b03      	ldr	r3, [sp, #12]
 800ae3a:	6018      	str	r0, [r3, #0]
 800ae3c:	2007      	movs	r0, #7
 800ae3e:	9b05      	ldr	r3, [sp, #20]
 800ae40:	4003      	ands	r3, r0
 800ae42:	0018      	movs	r0, r3
 800ae44:	b05f      	add	sp, #380	; 0x17c
 800ae46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae48:	2000      	movs	r0, #0
 800ae4a:	ac36      	add	r4, sp, #216	; 0xd8
 800ae4c:	e7ec      	b.n	800ae28 <__kernel_rem_pio2f+0x44c>
 800ae4e:	00a3      	lsls	r3, r4, #2
 800ae50:	5959      	ldr	r1, [r3, r5]
 800ae52:	f7f5 fc0b 	bl	800066c <__aeabi_fadd>
 800ae56:	3c01      	subs	r4, #1
 800ae58:	2c00      	cmp	r4, #0
 800ae5a:	daf8      	bge.n	800ae4e <__kernel_rem_pio2f+0x472>
 800ae5c:	9a02      	ldr	r2, [sp, #8]
 800ae5e:	1c03      	adds	r3, r0, #0
 800ae60:	2a00      	cmp	r2, #0
 800ae62:	d002      	beq.n	800ae6a <__kernel_rem_pio2f+0x48e>
 800ae64:	2380      	movs	r3, #128	; 0x80
 800ae66:	061b      	lsls	r3, r3, #24
 800ae68:	18c3      	adds	r3, r0, r3
 800ae6a:	9a03      	ldr	r2, [sp, #12]
 800ae6c:	1c01      	adds	r1, r0, #0
 800ae6e:	6013      	str	r3, [r2, #0]
 800ae70:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800ae72:	f7f6 f89f 	bl	8000fb4 <__aeabi_fsub>
 800ae76:	2401      	movs	r4, #1
 800ae78:	ad36      	add	r5, sp, #216	; 0xd8
 800ae7a:	42a7      	cmp	r7, r4
 800ae7c:	da0c      	bge.n	800ae98 <__kernel_rem_pio2f+0x4bc>
 800ae7e:	9b02      	ldr	r3, [sp, #8]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <__kernel_rem_pio2f+0x4ae>
 800ae84:	2380      	movs	r3, #128	; 0x80
 800ae86:	061b      	lsls	r3, r3, #24
 800ae88:	18c0      	adds	r0, r0, r3
 800ae8a:	9b03      	ldr	r3, [sp, #12]
 800ae8c:	6058      	str	r0, [r3, #4]
 800ae8e:	e7d5      	b.n	800ae3c <__kernel_rem_pio2f+0x460>
 800ae90:	003c      	movs	r4, r7
 800ae92:	2000      	movs	r0, #0
 800ae94:	ad36      	add	r5, sp, #216	; 0xd8
 800ae96:	e7df      	b.n	800ae58 <__kernel_rem_pio2f+0x47c>
 800ae98:	00a3      	lsls	r3, r4, #2
 800ae9a:	5959      	ldr	r1, [r3, r5]
 800ae9c:	f7f5 fbe6 	bl	800066c <__aeabi_fadd>
 800aea0:	3401      	adds	r4, #1
 800aea2:	e7ea      	b.n	800ae7a <__kernel_rem_pio2f+0x49e>
 800aea4:	23a0      	movs	r3, #160	; 0xa0
 800aea6:	aa0e      	add	r2, sp, #56	; 0x38
 800aea8:	18d2      	adds	r2, r2, r3
 800aeaa:	5992      	ldr	r2, [r2, r6]
 800aeac:	3d01      	subs	r5, #1
 800aeae:	9204      	str	r2, [sp, #16]
 800aeb0:	aa36      	add	r2, sp, #216	; 0xd8
 800aeb2:	1994      	adds	r4, r2, r6
 800aeb4:	6862      	ldr	r2, [r4, #4]
 800aeb6:	9804      	ldr	r0, [sp, #16]
 800aeb8:	1c11      	adds	r1, r2, #0
 800aeba:	9206      	str	r2, [sp, #24]
 800aebc:	f7f5 fbd6 	bl	800066c <__aeabi_fadd>
 800aec0:	1c01      	adds	r1, r0, #0
 800aec2:	9007      	str	r0, [sp, #28]
 800aec4:	9804      	ldr	r0, [sp, #16]
 800aec6:	f7f6 f875 	bl	8000fb4 <__aeabi_fsub>
 800aeca:	9906      	ldr	r1, [sp, #24]
 800aecc:	f7f5 fbce 	bl	800066c <__aeabi_fadd>
 800aed0:	23a0      	movs	r3, #160	; 0xa0
 800aed2:	aa0e      	add	r2, sp, #56	; 0x38
 800aed4:	18d3      	adds	r3, r2, r3
 800aed6:	9a07      	ldr	r2, [sp, #28]
 800aed8:	6060      	str	r0, [r4, #4]
 800aeda:	519a      	str	r2, [r3, r6]
 800aedc:	3e04      	subs	r6, #4
 800aede:	2d00      	cmp	r5, #0
 800aee0:	dce0      	bgt.n	800aea4 <__kernel_rem_pio2f+0x4c8>
 800aee2:	003d      	movs	r5, r7
 800aee4:	ac36      	add	r4, sp, #216	; 0xd8
 800aee6:	9b01      	ldr	r3, [sp, #4]
 800aee8:	3b04      	subs	r3, #4
 800aeea:	9301      	str	r3, [sp, #4]
 800aeec:	2d01      	cmp	r5, #1
 800aeee:	dc10      	bgt.n	800af12 <__kernel_rem_pio2f+0x536>
 800aef0:	2000      	movs	r0, #0
 800aef2:	2f01      	cmp	r7, #1
 800aef4:	dc26      	bgt.n	800af44 <__kernel_rem_pio2f+0x568>
 800aef6:	9902      	ldr	r1, [sp, #8]
 800aef8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800aefa:	6863      	ldr	r3, [r4, #4]
 800aefc:	2900      	cmp	r1, #0
 800aefe:	d127      	bne.n	800af50 <__kernel_rem_pio2f+0x574>
 800af00:	9903      	ldr	r1, [sp, #12]
 800af02:	604b      	str	r3, [r1, #4]
 800af04:	000b      	movs	r3, r1
 800af06:	600a      	str	r2, [r1, #0]
 800af08:	6098      	str	r0, [r3, #8]
 800af0a:	e797      	b.n	800ae3c <__kernel_rem_pio2f+0x460>
 800af0c:	9e01      	ldr	r6, [sp, #4]
 800af0e:	003d      	movs	r5, r7
 800af10:	e7e4      	b.n	800aedc <__kernel_rem_pio2f+0x500>
 800af12:	9b01      	ldr	r3, [sp, #4]
 800af14:	3d01      	subs	r5, #1
 800af16:	58e3      	ldr	r3, [r4, r3]
 800af18:	9304      	str	r3, [sp, #16]
 800af1a:	9b01      	ldr	r3, [sp, #4]
 800af1c:	9804      	ldr	r0, [sp, #16]
 800af1e:	18e6      	adds	r6, r4, r3
 800af20:	6873      	ldr	r3, [r6, #4]
 800af22:	1c19      	adds	r1, r3, #0
 800af24:	9306      	str	r3, [sp, #24]
 800af26:	f7f5 fba1 	bl	800066c <__aeabi_fadd>
 800af2a:	1c01      	adds	r1, r0, #0
 800af2c:	9007      	str	r0, [sp, #28]
 800af2e:	9804      	ldr	r0, [sp, #16]
 800af30:	f7f6 f840 	bl	8000fb4 <__aeabi_fsub>
 800af34:	9906      	ldr	r1, [sp, #24]
 800af36:	f7f5 fb99 	bl	800066c <__aeabi_fadd>
 800af3a:	9b01      	ldr	r3, [sp, #4]
 800af3c:	9a07      	ldr	r2, [sp, #28]
 800af3e:	6070      	str	r0, [r6, #4]
 800af40:	50e2      	str	r2, [r4, r3]
 800af42:	e7d0      	b.n	800aee6 <__kernel_rem_pio2f+0x50a>
 800af44:	00bb      	lsls	r3, r7, #2
 800af46:	58e1      	ldr	r1, [r4, r3]
 800af48:	f7f5 fb90 	bl	800066c <__aeabi_fadd>
 800af4c:	3f01      	subs	r7, #1
 800af4e:	e7d0      	b.n	800aef2 <__kernel_rem_pio2f+0x516>
 800af50:	2180      	movs	r1, #128	; 0x80
 800af52:	9c03      	ldr	r4, [sp, #12]
 800af54:	0609      	lsls	r1, r1, #24
 800af56:	1852      	adds	r2, r2, r1
 800af58:	6022      	str	r2, [r4, #0]
 800af5a:	000a      	movs	r2, r1
 800af5c:	185b      	adds	r3, r3, r1
 800af5e:	6063      	str	r3, [r4, #4]
 800af60:	1880      	adds	r0, r0, r2
 800af62:	0023      	movs	r3, r4
 800af64:	e7d0      	b.n	800af08 <__kernel_rem_pio2f+0x52c>
 800af66:	46c0      	nop			; (mov r8, r8)
 800af68:	0800b7d0 	.word	0x0800b7d0

0800af6c <__kernel_sinf>:
 800af6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af6e:	9201      	str	r2, [sp, #4]
 800af70:	4a32      	ldr	r2, [pc, #200]	; (800b03c <__kernel_sinf+0xd0>)
 800af72:	0043      	lsls	r3, r0, #1
 800af74:	1c04      	adds	r4, r0, #0
 800af76:	9100      	str	r1, [sp, #0]
 800af78:	085b      	lsrs	r3, r3, #1
 800af7a:	4293      	cmp	r3, r2
 800af7c:	dc03      	bgt.n	800af86 <__kernel_sinf+0x1a>
 800af7e:	f7f6 f9f3 	bl	8001368 <__aeabi_f2iz>
 800af82:	2800      	cmp	r0, #0
 800af84:	d035      	beq.n	800aff2 <__kernel_sinf+0x86>
 800af86:	1c21      	adds	r1, r4, #0
 800af88:	1c20      	adds	r0, r4, #0
 800af8a:	f7f5 fee1 	bl	8000d50 <__aeabi_fmul>
 800af8e:	1c05      	adds	r5, r0, #0
 800af90:	1c01      	adds	r1, r0, #0
 800af92:	1c20      	adds	r0, r4, #0
 800af94:	f7f5 fedc 	bl	8000d50 <__aeabi_fmul>
 800af98:	4929      	ldr	r1, [pc, #164]	; (800b040 <__kernel_sinf+0xd4>)
 800af9a:	1c06      	adds	r6, r0, #0
 800af9c:	1c28      	adds	r0, r5, #0
 800af9e:	f7f5 fed7 	bl	8000d50 <__aeabi_fmul>
 800afa2:	4928      	ldr	r1, [pc, #160]	; (800b044 <__kernel_sinf+0xd8>)
 800afa4:	f7f6 f806 	bl	8000fb4 <__aeabi_fsub>
 800afa8:	1c29      	adds	r1, r5, #0
 800afaa:	f7f5 fed1 	bl	8000d50 <__aeabi_fmul>
 800afae:	4926      	ldr	r1, [pc, #152]	; (800b048 <__kernel_sinf+0xdc>)
 800afb0:	f7f5 fb5c 	bl	800066c <__aeabi_fadd>
 800afb4:	1c29      	adds	r1, r5, #0
 800afb6:	f7f5 fecb 	bl	8000d50 <__aeabi_fmul>
 800afba:	4924      	ldr	r1, [pc, #144]	; (800b04c <__kernel_sinf+0xe0>)
 800afbc:	f7f5 fffa 	bl	8000fb4 <__aeabi_fsub>
 800afc0:	1c29      	adds	r1, r5, #0
 800afc2:	f7f5 fec5 	bl	8000d50 <__aeabi_fmul>
 800afc6:	4922      	ldr	r1, [pc, #136]	; (800b050 <__kernel_sinf+0xe4>)
 800afc8:	f7f5 fb50 	bl	800066c <__aeabi_fadd>
 800afcc:	9b01      	ldr	r3, [sp, #4]
 800afce:	1c07      	adds	r7, r0, #0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d110      	bne.n	800aff6 <__kernel_sinf+0x8a>
 800afd4:	1c01      	adds	r1, r0, #0
 800afd6:	1c28      	adds	r0, r5, #0
 800afd8:	f7f5 feba 	bl	8000d50 <__aeabi_fmul>
 800afdc:	491d      	ldr	r1, [pc, #116]	; (800b054 <__kernel_sinf+0xe8>)
 800afde:	f7f5 ffe9 	bl	8000fb4 <__aeabi_fsub>
 800afe2:	1c31      	adds	r1, r6, #0
 800afe4:	f7f5 feb4 	bl	8000d50 <__aeabi_fmul>
 800afe8:	1c01      	adds	r1, r0, #0
 800afea:	1c20      	adds	r0, r4, #0
 800afec:	f7f5 fb3e 	bl	800066c <__aeabi_fadd>
 800aff0:	1c04      	adds	r4, r0, #0
 800aff2:	1c20      	adds	r0, r4, #0
 800aff4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aff6:	21fc      	movs	r1, #252	; 0xfc
 800aff8:	9800      	ldr	r0, [sp, #0]
 800affa:	0589      	lsls	r1, r1, #22
 800affc:	f7f5 fea8 	bl	8000d50 <__aeabi_fmul>
 800b000:	1c39      	adds	r1, r7, #0
 800b002:	9001      	str	r0, [sp, #4]
 800b004:	1c30      	adds	r0, r6, #0
 800b006:	f7f5 fea3 	bl	8000d50 <__aeabi_fmul>
 800b00a:	1c01      	adds	r1, r0, #0
 800b00c:	9801      	ldr	r0, [sp, #4]
 800b00e:	f7f5 ffd1 	bl	8000fb4 <__aeabi_fsub>
 800b012:	1c29      	adds	r1, r5, #0
 800b014:	f7f5 fe9c 	bl	8000d50 <__aeabi_fmul>
 800b018:	9900      	ldr	r1, [sp, #0]
 800b01a:	f7f5 ffcb 	bl	8000fb4 <__aeabi_fsub>
 800b01e:	490d      	ldr	r1, [pc, #52]	; (800b054 <__kernel_sinf+0xe8>)
 800b020:	1c05      	adds	r5, r0, #0
 800b022:	1c30      	adds	r0, r6, #0
 800b024:	f7f5 fe94 	bl	8000d50 <__aeabi_fmul>
 800b028:	1c01      	adds	r1, r0, #0
 800b02a:	1c28      	adds	r0, r5, #0
 800b02c:	f7f5 fb1e 	bl	800066c <__aeabi_fadd>
 800b030:	1c01      	adds	r1, r0, #0
 800b032:	1c20      	adds	r0, r4, #0
 800b034:	f7f5 ffbe 	bl	8000fb4 <__aeabi_fsub>
 800b038:	e7da      	b.n	800aff0 <__kernel_sinf+0x84>
 800b03a:	46c0      	nop			; (mov r8, r8)
 800b03c:	31ffffff 	.word	0x31ffffff
 800b040:	2f2ec9d3 	.word	0x2f2ec9d3
 800b044:	32d72f34 	.word	0x32d72f34
 800b048:	3638ef1b 	.word	0x3638ef1b
 800b04c:	39500d01 	.word	0x39500d01
 800b050:	3c088889 	.word	0x3c088889
 800b054:	3e2aaaab 	.word	0x3e2aaaab

0800b058 <matherr>:
 800b058:	2000      	movs	r0, #0
 800b05a:	4770      	bx	lr

0800b05c <fabsf>:
 800b05c:	0040      	lsls	r0, r0, #1
 800b05e:	0840      	lsrs	r0, r0, #1
 800b060:	4770      	bx	lr
	...

0800b064 <finitef>:
 800b064:	0043      	lsls	r3, r0, #1
 800b066:	2000      	movs	r0, #0
 800b068:	4a02      	ldr	r2, [pc, #8]	; (800b074 <finitef+0x10>)
 800b06a:	085b      	lsrs	r3, r3, #1
 800b06c:	429a      	cmp	r2, r3
 800b06e:	4140      	adcs	r0, r0
 800b070:	4770      	bx	lr
 800b072:	46c0      	nop			; (mov r8, r8)
 800b074:	7f7fffff 	.word	0x7f7fffff

0800b078 <floorf>:
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	0045      	lsls	r5, r0, #1
 800b07c:	086e      	lsrs	r6, r5, #1
 800b07e:	0e2d      	lsrs	r5, r5, #24
 800b080:	3d7f      	subs	r5, #127	; 0x7f
 800b082:	0004      	movs	r4, r0
 800b084:	2d16      	cmp	r5, #22
 800b086:	dc24      	bgt.n	800b0d2 <floorf+0x5a>
 800b088:	2d00      	cmp	r5, #0
 800b08a:	da0e      	bge.n	800b0aa <floorf+0x32>
 800b08c:	4915      	ldr	r1, [pc, #84]	; (800b0e4 <floorf+0x6c>)
 800b08e:	f7f5 faed 	bl	800066c <__aeabi_fadd>
 800b092:	2100      	movs	r1, #0
 800b094:	f7f5 f9dc 	bl	8000450 <__aeabi_fcmpgt>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d004      	beq.n	800b0a6 <floorf+0x2e>
 800b09c:	2c00      	cmp	r4, #0
 800b09e:	da1f      	bge.n	800b0e0 <floorf+0x68>
 800b0a0:	2e00      	cmp	r6, #0
 800b0a2:	d000      	beq.n	800b0a6 <floorf+0x2e>
 800b0a4:	4c10      	ldr	r4, [pc, #64]	; (800b0e8 <floorf+0x70>)
 800b0a6:	1c20      	adds	r0, r4, #0
 800b0a8:	e019      	b.n	800b0de <floorf+0x66>
 800b0aa:	4e10      	ldr	r6, [pc, #64]	; (800b0ec <floorf+0x74>)
 800b0ac:	412e      	asrs	r6, r5
 800b0ae:	4206      	tst	r6, r0
 800b0b0:	d015      	beq.n	800b0de <floorf+0x66>
 800b0b2:	490c      	ldr	r1, [pc, #48]	; (800b0e4 <floorf+0x6c>)
 800b0b4:	f7f5 fada 	bl	800066c <__aeabi_fadd>
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	f7f5 f9c9 	bl	8000450 <__aeabi_fcmpgt>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d0f1      	beq.n	800b0a6 <floorf+0x2e>
 800b0c2:	2c00      	cmp	r4, #0
 800b0c4:	da03      	bge.n	800b0ce <floorf+0x56>
 800b0c6:	2380      	movs	r3, #128	; 0x80
 800b0c8:	041b      	lsls	r3, r3, #16
 800b0ca:	412b      	asrs	r3, r5
 800b0cc:	18e4      	adds	r4, r4, r3
 800b0ce:	43b4      	bics	r4, r6
 800b0d0:	e7e9      	b.n	800b0a6 <floorf+0x2e>
 800b0d2:	4b07      	ldr	r3, [pc, #28]	; (800b0f0 <floorf+0x78>)
 800b0d4:	429e      	cmp	r6, r3
 800b0d6:	d902      	bls.n	800b0de <floorf+0x66>
 800b0d8:	1c01      	adds	r1, r0, #0
 800b0da:	f7f5 fac7 	bl	800066c <__aeabi_fadd>
 800b0de:	bd70      	pop	{r4, r5, r6, pc}
 800b0e0:	2400      	movs	r4, #0
 800b0e2:	e7e0      	b.n	800b0a6 <floorf+0x2e>
 800b0e4:	7149f2ca 	.word	0x7149f2ca
 800b0e8:	bf800000 	.word	0xbf800000
 800b0ec:	007fffff 	.word	0x007fffff
 800b0f0:	7f7fffff 	.word	0x7f7fffff

0800b0f4 <nanf>:
 800b0f4:	4800      	ldr	r0, [pc, #0]	; (800b0f8 <nanf+0x4>)
 800b0f6:	4770      	bx	lr
 800b0f8:	7fc00000 	.word	0x7fc00000

0800b0fc <rintf>:
 800b0fc:	0043      	lsls	r3, r0, #1
 800b0fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b100:	0859      	lsrs	r1, r3, #1
 800b102:	0e1b      	lsrs	r3, r3, #24
 800b104:	3b7f      	subs	r3, #127	; 0x7f
 800b106:	0002      	movs	r2, r0
 800b108:	2b16      	cmp	r3, #22
 800b10a:	dc38      	bgt.n	800b17e <rintf+0x82>
 800b10c:	2900      	cmp	r1, #0
 800b10e:	d01d      	beq.n	800b14c <rintf+0x50>
 800b110:	0001      	movs	r1, r0
 800b112:	0fc4      	lsrs	r4, r0, #31
 800b114:	2b00      	cmp	r3, #0
 800b116:	da1a      	bge.n	800b14e <rintf+0x52>
 800b118:	0243      	lsls	r3, r0, #9
 800b11a:	491c      	ldr	r1, [pc, #112]	; (800b18c <rintf+0x90>)
 800b11c:	0a5b      	lsrs	r3, r3, #9
 800b11e:	00a0      	lsls	r0, r4, #2
 800b120:	5845      	ldr	r5, [r0, r1]
 800b122:	4259      	negs	r1, r3
 800b124:	4319      	orrs	r1, r3
 800b126:	2380      	movs	r3, #128	; 0x80
 800b128:	0a49      	lsrs	r1, r1, #9
 800b12a:	03db      	lsls	r3, r3, #15
 800b12c:	4019      	ands	r1, r3
 800b12e:	0d13      	lsrs	r3, r2, #20
 800b130:	051b      	lsls	r3, r3, #20
 800b132:	4319      	orrs	r1, r3
 800b134:	1c28      	adds	r0, r5, #0
 800b136:	f7f5 fa99 	bl	800066c <__aeabi_fadd>
 800b13a:	9001      	str	r0, [sp, #4]
 800b13c:	9801      	ldr	r0, [sp, #4]
 800b13e:	1c29      	adds	r1, r5, #0
 800b140:	f7f5 ff38 	bl	8000fb4 <__aeabi_fsub>
 800b144:	0040      	lsls	r0, r0, #1
 800b146:	0840      	lsrs	r0, r0, #1
 800b148:	07e4      	lsls	r4, r4, #31
 800b14a:	4320      	orrs	r0, r4
 800b14c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800b14e:	4a10      	ldr	r2, [pc, #64]	; (800b190 <rintf+0x94>)
 800b150:	411a      	asrs	r2, r3
 800b152:	4202      	tst	r2, r0
 800b154:	d0fa      	beq.n	800b14c <rintf+0x50>
 800b156:	0852      	lsrs	r2, r2, #1
 800b158:	4202      	tst	r2, r0
 800b15a:	d004      	beq.n	800b166 <rintf+0x6a>
 800b15c:	4391      	bics	r1, r2
 800b15e:	2280      	movs	r2, #128	; 0x80
 800b160:	0392      	lsls	r2, r2, #14
 800b162:	411a      	asrs	r2, r3
 800b164:	4311      	orrs	r1, r2
 800b166:	4b09      	ldr	r3, [pc, #36]	; (800b18c <rintf+0x90>)
 800b168:	00a4      	lsls	r4, r4, #2
 800b16a:	58e4      	ldr	r4, [r4, r3]
 800b16c:	1c20      	adds	r0, r4, #0
 800b16e:	f7f5 fa7d 	bl	800066c <__aeabi_fadd>
 800b172:	9001      	str	r0, [sp, #4]
 800b174:	9801      	ldr	r0, [sp, #4]
 800b176:	1c21      	adds	r1, r4, #0
 800b178:	f7f5 ff1c 	bl	8000fb4 <__aeabi_fsub>
 800b17c:	e7e6      	b.n	800b14c <rintf+0x50>
 800b17e:	4b05      	ldr	r3, [pc, #20]	; (800b194 <rintf+0x98>)
 800b180:	4299      	cmp	r1, r3
 800b182:	d9e3      	bls.n	800b14c <rintf+0x50>
 800b184:	1c01      	adds	r1, r0, #0
 800b186:	f7f5 fa71 	bl	800066c <__aeabi_fadd>
 800b18a:	e7df      	b.n	800b14c <rintf+0x50>
 800b18c:	0800b808 	.word	0x0800b808
 800b190:	007fffff 	.word	0x007fffff
 800b194:	7f7fffff 	.word	0x7f7fffff

0800b198 <scalbnf>:
 800b198:	0043      	lsls	r3, r0, #1
 800b19a:	b570      	push	{r4, r5, r6, lr}
 800b19c:	0002      	movs	r2, r0
 800b19e:	000c      	movs	r4, r1
 800b1a0:	0859      	lsrs	r1, r3, #1
 800b1a2:	d005      	beq.n	800b1b0 <scalbnf+0x18>
 800b1a4:	4d1e      	ldr	r5, [pc, #120]	; (800b220 <scalbnf+0x88>)
 800b1a6:	42a9      	cmp	r1, r5
 800b1a8:	d903      	bls.n	800b1b2 <scalbnf+0x1a>
 800b1aa:	1c01      	adds	r1, r0, #0
 800b1ac:	f7f5 fa5e 	bl	800066c <__aeabi_fadd>
 800b1b0:	bd70      	pop	{r4, r5, r6, pc}
 800b1b2:	4d1c      	ldr	r5, [pc, #112]	; (800b224 <scalbnf+0x8c>)
 800b1b4:	42a9      	cmp	r1, r5
 800b1b6:	d815      	bhi.n	800b1e4 <scalbnf+0x4c>
 800b1b8:	2198      	movs	r1, #152	; 0x98
 800b1ba:	05c9      	lsls	r1, r1, #23
 800b1bc:	f7f5 fdc8 	bl	8000d50 <__aeabi_fmul>
 800b1c0:	4b19      	ldr	r3, [pc, #100]	; (800b228 <scalbnf+0x90>)
 800b1c2:	429c      	cmp	r4, r3
 800b1c4:	db21      	blt.n	800b20a <scalbnf+0x72>
 800b1c6:	0002      	movs	r2, r0
 800b1c8:	15c3      	asrs	r3, r0, #23
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	3b19      	subs	r3, #25
 800b1ce:	191b      	adds	r3, r3, r4
 800b1d0:	1c01      	adds	r1, r0, #0
 800b1d2:	2bfe      	cmp	r3, #254	; 0xfe
 800b1d4:	dc0f      	bgt.n	800b1f6 <scalbnf+0x5e>
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	dd06      	ble.n	800b1e8 <scalbnf+0x50>
 800b1da:	4814      	ldr	r0, [pc, #80]	; (800b22c <scalbnf+0x94>)
 800b1dc:	05db      	lsls	r3, r3, #23
 800b1de:	4010      	ands	r0, r2
 800b1e0:	4318      	orrs	r0, r3
 800b1e2:	e7e5      	b.n	800b1b0 <scalbnf+0x18>
 800b1e4:	0e1b      	lsrs	r3, r3, #24
 800b1e6:	e7f2      	b.n	800b1ce <scalbnf+0x36>
 800b1e8:	0019      	movs	r1, r3
 800b1ea:	3116      	adds	r1, #22
 800b1ec:	da0f      	bge.n	800b20e <scalbnf+0x76>
 800b1ee:	4b10      	ldr	r3, [pc, #64]	; (800b230 <scalbnf+0x98>)
 800b1f0:	1c01      	adds	r1, r0, #0
 800b1f2:	429c      	cmp	r4, r3
 800b1f4:	dd06      	ble.n	800b204 <scalbnf+0x6c>
 800b1f6:	480f      	ldr	r0, [pc, #60]	; (800b234 <scalbnf+0x9c>)
 800b1f8:	f000 f820 	bl	800b23c <copysignf>
 800b1fc:	490d      	ldr	r1, [pc, #52]	; (800b234 <scalbnf+0x9c>)
 800b1fe:	f7f5 fda7 	bl	8000d50 <__aeabi_fmul>
 800b202:	e7d5      	b.n	800b1b0 <scalbnf+0x18>
 800b204:	480c      	ldr	r0, [pc, #48]	; (800b238 <scalbnf+0xa0>)
 800b206:	f000 f819 	bl	800b23c <copysignf>
 800b20a:	490b      	ldr	r1, [pc, #44]	; (800b238 <scalbnf+0xa0>)
 800b20c:	e7f7      	b.n	800b1fe <scalbnf+0x66>
 800b20e:	21cc      	movs	r1, #204	; 0xcc
 800b210:	4806      	ldr	r0, [pc, #24]	; (800b22c <scalbnf+0x94>)
 800b212:	3319      	adds	r3, #25
 800b214:	05db      	lsls	r3, r3, #23
 800b216:	4010      	ands	r0, r2
 800b218:	4318      	orrs	r0, r3
 800b21a:	0589      	lsls	r1, r1, #22
 800b21c:	e7ef      	b.n	800b1fe <scalbnf+0x66>
 800b21e:	46c0      	nop			; (mov r8, r8)
 800b220:	7f7fffff 	.word	0x7f7fffff
 800b224:	007fffff 	.word	0x007fffff
 800b228:	ffff3cb0 	.word	0xffff3cb0
 800b22c:	807fffff 	.word	0x807fffff
 800b230:	0000c350 	.word	0x0000c350
 800b234:	7149f2ca 	.word	0x7149f2ca
 800b238:	0da24260 	.word	0x0da24260

0800b23c <copysignf>:
 800b23c:	0040      	lsls	r0, r0, #1
 800b23e:	0fc9      	lsrs	r1, r1, #31
 800b240:	07c9      	lsls	r1, r1, #31
 800b242:	0840      	lsrs	r0, r0, #1
 800b244:	4308      	orrs	r0, r1
 800b246:	4770      	bx	lr

0800b248 <_init>:
 800b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24a:	46c0      	nop			; (mov r8, r8)
 800b24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b24e:	bc08      	pop	{r3}
 800b250:	469e      	mov	lr, r3
 800b252:	4770      	bx	lr

0800b254 <_fini>:
 800b254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b256:	46c0      	nop			; (mov r8, r8)
 800b258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25a:	bc08      	pop	{r3}
 800b25c:	469e      	mov	lr, r3
 800b25e:	4770      	bx	lr
